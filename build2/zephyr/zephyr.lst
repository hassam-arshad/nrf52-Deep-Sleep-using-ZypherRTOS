
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 18 00 20 39 17 00 00 21 44 00 00 0d 17 00 00     ... 9...!D......
  10:	0d 17 00 00 0d 17 00 00 0d 17 00 00 00 00 00 00     ................
	...
  2c:	09 14 00 00 0d 17 00 00 00 00 00 00 b5 13 00 00     ................
  3c:	0d 17 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  50:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  60:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  70:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  80:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  90:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  a0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  b0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  c0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  d0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  e0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................
  f0:	b9 14 00 00 b9 14 00 00 b9 14 00 00 b9 14 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__data_size+0x8>
     102:	b94a      	cbnz	r2, 118 <__data_size+0x8>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x195>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x199>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25f>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x263>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x235>
     39c:	d106      	bne.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>

000003d4 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     3d4:	b530      	push	{r4, r5, lr}
     3d6:	b085      	sub	sp, #20
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3d8:	4c1b      	ldr	r4, [pc, #108]	; (448 <CONFIG_FLASH_SIZE+0x48>)
     3da:	4620      	mov	r0, r4
     3dc:	f004 f9fa 	bl	47d4 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     3e0:	b378      	cbz	r0, 442 <CONFIG_FLASH_SIZE+0x42>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     3e2:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
     3e4:	68a5      	ldr	r5, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     3e6:	6813      	ldr	r3, [r2, #0]
     3e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     3ec:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     3ee:	682b      	ldr	r3, [r5, #0]
     3f0:	4a16      	ldr	r2, [pc, #88]	; (44c <CONFIG_FLASH_SIZE+0x4c>)
     3f2:	210d      	movs	r1, #13
     3f4:	4620      	mov	r0, r4
     3f6:	4798      	blx	r3
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
     3f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     3fc:	220c      	movs	r2, #12
     3fe:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
                                            const nrf_gpio_pin_pull_t *  p_pull,
                                            const nrf_gpio_pin_drive_t * p_drive,
                                            const nrf_gpio_pin_sense_t * p_sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number];
     402:	f8d3 272c 	ldr.w	r2, [r3, #1836]	; 0x72c
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);

    /* Clear fields that will be updated. */
    cnf &= ~to_update;
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
     406:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
     40a:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     40e:	2100      	movs	r1, #0
     410:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
     414:	f003 fad2 	bl	39bc <z_impl_k_sleep>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     41c:	696b      	ldr	r3, [r5, #20]
     41e:	4620      	mov	r0, r4
     420:	4798      	blx	r3
	ret = gpio_pin_toggle_dt(&led);
	// call __WFI;
	
	//NRF_POWER->SYSTEMOFF = 1;

	pm_state_force(0u, &(struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
     422:	2000      	movs	r0, #0
     424:	2306      	movs	r3, #6
     426:	a901      	add	r1, sp, #4
     428:	e9cd 0001 	strd	r0, r0, [sp, #4]
     42c:	9003      	str	r0, [sp, #12]
     42e:	f88d 3004 	strb.w	r3, [sp, #4]
     432:	f000 fd61 	bl	ef8 <pm_state_force>
     436:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     43a:	2100      	movs	r1, #0
     43c:	f003 fabe 	bl	39bc <z_impl_k_sleep>
	 */
	//k_sleep(K_SECONDS(SLEEP_S));
	k_sleep(K_MSEC(5000));


	while (true) {
     440:	e7fe      	b.n	440 <CONFIG_FLASH_SIZE+0x40>
		
	}
}
     442:	b005      	add	sp, #20
     444:	bd30      	pop	{r4, r5, pc}
     446:	bf00      	nop
     448:	00004b4c 	.word	0x00004b4c
     44c:	00060001 	.word	0x00060001

00000450 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     450:	4b01      	ldr	r3, [pc, #4]	; (458 <char_out+0x8>)
     452:	681b      	ldr	r3, [r3, #0]
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	20000000 	.word	0x20000000

0000045c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     45c:	b507      	push	{r0, r1, r2, lr}
     45e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     460:	2100      	movs	r1, #0
     462:	4602      	mov	r2, r0
     464:	9100      	str	r1, [sp, #0]
     466:	4803      	ldr	r0, [pc, #12]	; (474 <vprintk+0x18>)
     468:	f000 f914 	bl	694 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     46c:	b003      	add	sp, #12
     46e:	f85d fb04 	ldr.w	pc, [sp], #4
     472:	bf00      	nop
     474:	00000451 	.word	0x00000451

00000478 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     47c:	8b05      	ldrh	r5, [r0, #24]
{
     47e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     480:	0728      	lsls	r0, r5, #28
{
     482:	4690      	mov	r8, r2
	if (processing) {
     484:	d411      	bmi.n	4aa <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     486:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     488:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     48c:	f040 80cd 	bne.w	62a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x142>
			evt = process_recheck(mgr);
     490:	4620      	mov	r0, r4
     492:	f003 fe7f 	bl	4194 <process_recheck>
		}

		if (evt == EVT_NOP) {
     496:	b178      	cbz	r0, 4b8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     498:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     49a:	8b21      	ldrh	r1, [r4, #24]
     49c:	2804      	cmp	r0, #4
     49e:	d811      	bhi.n	4c4 <process_event+0x4c>
     4a0:	e8df f000 	tbb	[pc, r0]
     4a4:	856d10c3 	.word	0x856d10c3
     4a8:	95          	.byte	0x95
     4a9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     4aa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4ac:	bf0c      	ite	eq
     4ae:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4b2:	f045 0520 	orrne.w	r5, r5, #32
     4b6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4b8:	f388 8811 	msr	BASEPRI, r8
     4bc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4c8:	45aa      	cmp	sl, r5
     4ca:	f000 80a6 	beq.w	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     4ce:	2700      	movs	r7, #0
     4d0:	46b9      	mov	r9, r7
     4d2:	463e      	mov	r6, r7
     4d4:	68a3      	ldr	r3, [r4, #8]
     4d6:	2b00      	cmp	r3, #0
     4d8:	f000 80bd 	beq.w	656 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     4dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     4e0:	8321      	strh	r1, [r4, #24]
     4e2:	f388 8811 	msr	BASEPRI, r8
     4e6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4ea:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4ec:	2900      	cmp	r1, #0
     4ee:	f000 80bb 	beq.w	668 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x180>
	return node->next;
     4f2:	680d      	ldr	r5, [r1, #0]
     4f4:	2900      	cmp	r1, #0
     4f6:	f000 80b7 	beq.w	668 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x180>
		mon->callback(mgr, mon, state, res);
     4fa:	f8d1 8004 	ldr.w	r8, [r1, #4]
     4fe:	4633      	mov	r3, r6
     500:	4652      	mov	r2, sl
     502:	4620      	mov	r0, r4
     504:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     506:	2d00      	cmp	r5, #0
     508:	d076      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
     50a:	682b      	ldr	r3, [r5, #0]
     50c:	4629      	mov	r1, r5
     50e:	461d      	mov	r5, r3
     510:	e7f0      	b.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     512:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     516:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     518:	2a01      	cmp	r2, #1
     51a:	d81b      	bhi.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
	list->head = NULL;
     51c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     522:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     524:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     526:	b289      	uxth	r1, r1
	list->tail = NULL;
     528:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     52c:	d109      	bne.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     52e:	463b      	mov	r3, r7
     530:	e003      	b.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
				mgr->refs += 1U;
     532:	8b62      	ldrh	r2, [r4, #26]
     534:	3201      	adds	r2, #1
     536:	8362      	strh	r2, [r4, #26]
	return node->next;
     538:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     53a:	2b00      	cmp	r3, #0
     53c:	d1f9      	bne.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     53e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     542:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     544:	4620      	mov	r0, r4
     546:	f003 fe25 	bl	4194 <process_recheck>
     54a:	2800      	cmp	r0, #0
     54c:	d07b      	beq.n	646 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     54e:	f041 0120 	orr.w	r1, r1, #32
     552:	e077      	b.n	644 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15c>
	} else if (state == ONOFF_STATE_TO_OFF) {
     554:	2b04      	cmp	r3, #4
     556:	d10a      	bne.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     558:	f021 0107 	bic.w	r1, r1, #7
     55c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     55e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     560:	4620      	mov	r0, r4
     562:	f003 fe17 	bl	4194 <process_recheck>
     566:	b110      	cbz	r0, 56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     568:	f041 0120 	orr.w	r1, r1, #32
     56c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     56e:	8b21      	ldrh	r1, [r4, #24]
     570:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     574:	45aa      	cmp	sl, r5
     576:	d050      	beq.n	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
     578:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     57a:	46b9      	mov	r9, r7
     57c:	e7aa      	b.n	4d4 <process_event+0x5c>
			transit = mgr->transitions->start;
     57e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     580:	f021 0107 	bic.w	r1, r1, #7
     584:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     588:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     58a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     58e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     590:	d12d      	bne.n	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
		    || (transit != NULL)) {
     592:	f1b9 0f00 	cmp.w	r9, #0
     596:	d040      	beq.n	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     598:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     59c:	8321      	strh	r1, [r4, #24]
     59e:	f388 8811 	msr	BASEPRI, r8
     5a2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     5a6:	493a      	ldr	r1, [pc, #232]	; (690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>)
     5a8:	4620      	mov	r0, r4
     5aa:	47c8      	blx	r9
     5ac:	e029      	b.n	602 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ae:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     5b2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b4:	f041 0104 	orr.w	r1, r1, #4
     5b8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5ba:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     5bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5c2:	d0e6      	beq.n	592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
     5c4:	2700      	movs	r7, #0
		res = 0;
     5c6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5c8:	f04f 0a04 	mov.w	sl, #4
     5cc:	e782      	b.n	4d4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     5d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d4:	f041 0105 	orr.w	r1, r1, #5
     5d8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5da:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     5dc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5e2:	d0d6      	beq.n	592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
     5e4:	2700      	movs	r7, #0
		res = 0;
     5e6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5e8:	f04f 0a05 	mov.w	sl, #5
     5ec:	e772      	b.n	4d4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     5ee:	2700      	movs	r7, #0
		res = 0;
     5f0:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f2:	f04f 0a06 	mov.w	sl, #6
     5f6:	e76d      	b.n	4d4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5f8:	462b      	mov	r3, r5
     5fa:	e787      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
			if (transit != NULL) {
     5fc:	f1b9 0f00 	cmp.w	r9, #0
     600:	d1d1      	bne.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
	__asm__ volatile(
     602:	f04f 0320 	mov.w	r3, #32
     606:	f3ef 8811 	mrs	r8, BASEPRI
     60a:	f383 8812 	msr	BASEPRI_MAX, r3
     60e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     612:	8b23      	ldrh	r3, [r4, #24]
     614:	f023 0308 	bic.w	r3, r3, #8
     618:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     61a:	8b25      	ldrh	r5, [r4, #24]
     61c:	06ea      	lsls	r2, r5, #27
     61e:	d52e      	bpl.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     620:	f025 0310 	bic.w	r3, r5, #16
     624:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     626:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     62a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     62e:	2e00      	cmp	r6, #0
     630:	f6bf af6f 	bge.w	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
	list->head = NULL;
     634:	2300      	movs	r3, #0
		*clients = mgr->clients;
     636:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     638:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     63c:	f021 0107 	bic.w	r1, r1, #7
     640:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     644:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     646:	8b21      	ldrh	r1, [r4, #24]
     648:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     64c:	45aa      	cmp	sl, r5
     64e:	f04f 0900 	mov.w	r9, #0
     652:	f47f af3f 	bne.w	4d4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     656:	2f00      	cmp	r7, #0
     658:	d09b      	beq.n	592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     65a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     65e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     660:	f388 8811 	msr	BASEPRI, r8
     664:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     668:	2f00      	cmp	r7, #0
     66a:	d0c7      	beq.n	5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>
	return node->next;
     66c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     66e:	4639      	mov	r1, r7
     670:	4633      	mov	r3, r6
     672:	4652      	mov	r2, sl
     674:	4620      	mov	r0, r4
     676:	f003 fdb9 	bl	41ec <notify_one>
	list->head = node;
     67a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     67c:	e7f4      	b.n	668 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x180>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     67e:	06ab      	lsls	r3, r5, #26
     680:	f57f af1a 	bpl.w	4b8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     684:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     688:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     68a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     68e:	e6ff      	b.n	490 <process_event+0x18>
     690:	00004219 	.word	0x00004219

00000694 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     698:	4681      	mov	r9, r0
     69a:	b095      	sub	sp, #84	; 0x54
     69c:	468b      	mov	fp, r1
     69e:	4617      	mov	r7, r2
     6a0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6a2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6a4:	7838      	ldrb	r0, [r7, #0]
     6a6:	b908      	cbnz	r0, 6ac <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6a8:	4628      	mov	r0, r5
     6aa:	e358      	b.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
			OUTC(*fp++);
     6ac:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     6ae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6b0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     6b2:	d006      	beq.n	6c2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     6b4:	4659      	mov	r1, fp
     6b6:	47c8      	blx	r9
     6b8:	2800      	cmp	r0, #0
     6ba:	f2c0 8350 	blt.w	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     6be:	3501      	adds	r5, #1
		if (bps == NULL) {
     6c0:	e1fb      	b.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
		} state = {
     6c2:	2218      	movs	r2, #24
     6c4:	2100      	movs	r1, #0
     6c6:	a80e      	add	r0, sp, #56	; 0x38
     6c8:	f003 fecc 	bl	4464 <memset>
	if (*sp == '%') {
     6cc:	787b      	ldrb	r3, [r7, #1]
     6ce:	2b25      	cmp	r3, #37	; 0x25
     6d0:	d07d      	beq.n	7ce <z_cbvprintf_impl+0x13a>
     6d2:	2300      	movs	r3, #0
     6d4:	1c78      	adds	r0, r7, #1
     6d6:	4698      	mov	r8, r3
     6d8:	469e      	mov	lr, r3
     6da:	469c      	mov	ip, r3
     6dc:	461e      	mov	r6, r3
     6de:	4601      	mov	r1, r0
		switch (*sp) {
     6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
     6e4:	2a2b      	cmp	r2, #43	; 0x2b
     6e6:	f000 80a1 	beq.w	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     6ea:	f200 8098 	bhi.w	81e <CONFIG_ISR_STACK_SIZE+0x1e>
     6ee:	2a20      	cmp	r2, #32
     6f0:	f000 809f 	beq.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
     6f4:	2a23      	cmp	r2, #35	; 0x23
     6f6:	f000 809f 	beq.w	838 <CONFIG_ISR_STACK_SIZE+0x38>
     6fa:	b12b      	cbz	r3, 708 <z_cbvprintf_impl+0x74>
     6fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     704:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     708:	f1b8 0f00 	cmp.w	r8, #0
     70c:	d005      	beq.n	71a <z_cbvprintf_impl+0x86>
     70e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     712:	f043 0320 	orr.w	r3, r3, #32
     716:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     71a:	f1be 0f00 	cmp.w	lr, #0
     71e:	d005      	beq.n	72c <z_cbvprintf_impl+0x98>
     720:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     724:	f043 0310 	orr.w	r3, r3, #16
     728:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     72c:	f1bc 0f00 	cmp.w	ip, #0
     730:	d005      	beq.n	73e <z_cbvprintf_impl+0xaa>
     732:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     736:	f043 0308 	orr.w	r3, r3, #8
     73a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     73e:	b12e      	cbz	r6, 74c <z_cbvprintf_impl+0xb8>
     740:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     744:	f043 0304 	orr.w	r3, r3, #4
     748:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     74c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     750:	f003 0044 	and.w	r0, r3, #68	; 0x44
     754:	2844      	cmp	r0, #68	; 0x44
     756:	d103      	bne.n	760 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     758:	f36f 1386 	bfc	r3, #6, #1
     75c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     760:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     764:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     76a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     76e:	d17f      	bne.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		conv->width_star = true;
     770:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     774:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     778:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     77a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     77e:	781a      	ldrb	r2, [r3, #0]
     780:	2a2e      	cmp	r2, #46	; 0x2e
     782:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     786:	bf0c      	ite	eq
     788:	2101      	moveq	r1, #1
     78a:	2100      	movne	r1, #0
     78c:	f361 0241 	bfi	r2, r1, #1, #1
     790:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     794:	d178      	bne.n	888 <__z_interrupt_stack_SIZEOF+0x48>
	if (*sp == '*') {
     796:	785a      	ldrb	r2, [r3, #1]
     798:	2a2a      	cmp	r2, #42	; 0x2a
     79a:	d06e      	beq.n	87a <__z_interrupt_stack_SIZEOF+0x3a>
	++sp;
     79c:	3301      	adds	r3, #1
	size_t val = 0;
     79e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7a0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7a4:	4619      	mov	r1, r3
     7a6:	f811 0b01 	ldrb.w	r0, [r1], #1
     7aa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ae:	2e09      	cmp	r6, #9
     7b0:	f240 8095 	bls.w	8de <__z_interrupt_stack_SIZEOF+0x9e>
	conv->unsupported |= ((conv->prec_value < 0)
     7b4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     7b8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     7ba:	f3c1 0040 	ubfx	r0, r1, #1, #1
     7be:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     7c2:	460a      	mov	r2, r1
     7c4:	f360 0241 	bfi	r2, r0, #1, #1
     7c8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     7cc:	e05c      	b.n	888 <__z_interrupt_stack_SIZEOF+0x48>
		conv->specifier = *sp++;
     7ce:	1cba      	adds	r2, r7, #2
     7d0:	9203      	str	r2, [sp, #12]
     7d2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     7d6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     7da:	07da      	lsls	r2, r3, #31
     7dc:	f140 812e 	bpl.w	a3c <__z_interrupt_stack_SIZEOF+0x1fc>
			width = va_arg(ap, int);
     7e0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     7e4:	f1b8 0f00 	cmp.w	r8, #0
     7e8:	da07      	bge.n	7fa <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     7ea:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     7ee:	f042 0204 	orr.w	r2, r2, #4
     7f2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     7f6:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     7fa:	075e      	lsls	r6, r3, #29
     7fc:	f140 8127 	bpl.w	a4e <__z_interrupt_stack_SIZEOF+0x20e>
			int arg = va_arg(ap, int);
     800:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     804:	f1ba 0f00 	cmp.w	sl, #0
     808:	f280 8126 	bge.w	a58 <__z_interrupt_stack_SIZEOF+0x218>
				conv->prec_present = false;
     80c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     810:	f36f 0341 	bfc	r3, #1, #1
     814:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     818:	f04f 3aff 	mov.w	sl, #4294967295
     81c:	e11c      	b.n	a58 <__z_interrupt_stack_SIZEOF+0x218>
		switch (*sp) {
     81e:	2a2d      	cmp	r2, #45	; 0x2d
     820:	d00d      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     822:	2a30      	cmp	r2, #48	; 0x30
     824:	f47f af69 	bne.w	6fa <z_cbvprintf_impl+0x66>
     828:	2301      	movs	r3, #1
	} while (loop);
     82a:	e758      	b.n	6de <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     82c:	f04f 0c01 	mov.w	ip, #1
     830:	e755      	b.n	6de <z_cbvprintf_impl+0x4a>
     832:	f04f 0e01 	mov.w	lr, #1
     836:	e752      	b.n	6de <z_cbvprintf_impl+0x4a>
     838:	f04f 0801 	mov.w	r8, #1
     83c:	e74f      	b.n	6de <z_cbvprintf_impl+0x4a>
     83e:	2601      	movs	r6, #1
     840:	e74d      	b.n	6de <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     842:	fb0e 6202 	mla	r2, lr, r2, r6
     846:	3a30      	subs	r2, #48	; 0x30
     848:	4603      	mov	r3, r0
     84a:	4618      	mov	r0, r3
     84c:	f810 6b01 	ldrb.w	r6, [r0], #1
     850:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     854:	f1bc 0f09 	cmp.w	ip, #9
     858:	d9f3      	bls.n	842 <__z_interrupt_stack_SIZEOF+0x2>
	if (sp != wp) {
     85a:	4299      	cmp	r1, r3
     85c:	d08f      	beq.n	77e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     85e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     862:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     864:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     866:	f362 0141 	bfi	r1, r2, #1, #1
     86a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     86e:	e786      	b.n	77e <z_cbvprintf_impl+0xea>
     870:	460b      	mov	r3, r1
	size_t val = 0;
     872:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     874:	f04f 0e0a 	mov.w	lr, #10
     878:	e7e7      	b.n	84a <__z_interrupt_stack_SIZEOF+0xa>
		conv->prec_star = true;
     87a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     87e:	f042 0204 	orr.w	r2, r2, #4
     882:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     886:	3302      	adds	r3, #2
	switch (*sp) {
     888:	781a      	ldrb	r2, [r3, #0]
     88a:	2a6c      	cmp	r2, #108	; 0x6c
     88c:	d047      	beq.n	91e <__z_interrupt_stack_SIZEOF+0xde>
     88e:	d82b      	bhi.n	8e8 <__z_interrupt_stack_SIZEOF+0xa8>
     890:	2a68      	cmp	r2, #104	; 0x68
     892:	d031      	beq.n	8f8 <__z_interrupt_stack_SIZEOF+0xb8>
     894:	2a6a      	cmp	r2, #106	; 0x6a
     896:	d04b      	beq.n	930 <__z_interrupt_stack_SIZEOF+0xf0>
     898:	2a4c      	cmp	r2, #76	; 0x4c
     89a:	d051      	beq.n	940 <__z_interrupt_stack_SIZEOF+0x100>
	conv->specifier = *sp++;
     89c:	461a      	mov	r2, r3
     89e:	f812 3b01 	ldrb.w	r3, [r2], #1
     8a2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     8a4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     8a6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     8aa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     8ae:	f200 80be 	bhi.w	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
     8b2:	2b6d      	cmp	r3, #109	; 0x6d
     8b4:	d851      	bhi.n	95a <__z_interrupt_stack_SIZEOF+0x11a>
     8b6:	2b69      	cmp	r3, #105	; 0x69
     8b8:	f200 80b9 	bhi.w	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
     8bc:	2b57      	cmp	r3, #87	; 0x57
     8be:	d867      	bhi.n	990 <__z_interrupt_stack_SIZEOF+0x150>
     8c0:	2b41      	cmp	r3, #65	; 0x41
     8c2:	d003      	beq.n	8cc <__z_interrupt_stack_SIZEOF+0x8c>
     8c4:	3b45      	subs	r3, #69	; 0x45
     8c6:	2b02      	cmp	r3, #2
     8c8:	f200 80b1 	bhi.w	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
		conv->specifier_cat = SPECIFIER_FP;
     8cc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     8d0:	2204      	movs	r2, #4
     8d2:	f362 0302 	bfi	r3, r2, #0, #3
     8d6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     8da:	2301      	movs	r3, #1
			break;
     8dc:	e073      	b.n	9c6 <__z_interrupt_stack_SIZEOF+0x186>
		val = 10U * val + *sp++ - '0';
     8de:	fb0c 0202 	mla	r2, ip, r2, r0
     8e2:	3a30      	subs	r2, #48	; 0x30
     8e4:	460b      	mov	r3, r1
     8e6:	e75d      	b.n	7a4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     8e8:	2a74      	cmp	r2, #116	; 0x74
     8ea:	d025      	beq.n	938 <__z_interrupt_stack_SIZEOF+0xf8>
     8ec:	2a7a      	cmp	r2, #122	; 0x7a
     8ee:	d1d5      	bne.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
		conv->length_mod = LENGTH_Z;
     8f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8f4:	2106      	movs	r1, #6
     8f6:	e00c      	b.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
		if (*++sp == 'h') {
     8f8:	785a      	ldrb	r2, [r3, #1]
     8fa:	2a68      	cmp	r2, #104	; 0x68
     8fc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     900:	d106      	bne.n	910 <__z_interrupt_stack_SIZEOF+0xd0>
			conv->length_mod = LENGTH_HH;
     902:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     904:	f361 02c6 	bfi	r2, r1, #3, #4
     908:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     90c:	3302      	adds	r3, #2
     90e:	e7c5      	b.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
			conv->length_mod = LENGTH_H;
     910:	2102      	movs	r1, #2
     912:	f361 02c6 	bfi	r2, r1, #3, #4
     916:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     91a:	3301      	adds	r3, #1
     91c:	e7be      	b.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
		if (*++sp == 'l') {
     91e:	785a      	ldrb	r2, [r3, #1]
     920:	2a6c      	cmp	r2, #108	; 0x6c
     922:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     926:	d101      	bne.n	92c <__z_interrupt_stack_SIZEOF+0xec>
			conv->length_mod = LENGTH_LL;
     928:	2104      	movs	r1, #4
     92a:	e7eb      	b.n	904 <__z_interrupt_stack_SIZEOF+0xc4>
			conv->length_mod = LENGTH_L;
     92c:	2103      	movs	r1, #3
     92e:	e7f0      	b.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
		conv->length_mod = LENGTH_J;
     930:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     934:	2105      	movs	r1, #5
     936:	e7ec      	b.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
		conv->length_mod = LENGTH_T;
     938:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     93c:	2107      	movs	r1, #7
     93e:	e7e8      	b.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
		conv->unsupported = true;
     940:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     944:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     948:	f022 0202 	bic.w	r2, r2, #2
     94c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     950:	f042 0202 	orr.w	r2, r2, #2
     954:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     958:	e7df      	b.n	91a <__z_interrupt_stack_SIZEOF+0xda>
	switch (conv->specifier) {
     95a:	3b6e      	subs	r3, #110	; 0x6e
     95c:	b2d9      	uxtb	r1, r3
     95e:	2301      	movs	r3, #1
     960:	408b      	lsls	r3, r1
     962:	f240 4182 	movw	r1, #1154	; 0x482
     966:	420b      	tst	r3, r1
     968:	d137      	bne.n	9da <__z_interrupt_stack_SIZEOF+0x19a>
     96a:	f013 0f24 	tst.w	r3, #36	; 0x24
     96e:	d151      	bne.n	a14 <__z_interrupt_stack_SIZEOF+0x1d4>
     970:	07d8      	lsls	r0, r3, #31
     972:	d55c      	bpl.n	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
		conv->specifier_cat = SPECIFIER_PTR;
     974:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     978:	2103      	movs	r1, #3
     97a:	f361 0302 	bfi	r3, r1, #0, #3
     97e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     982:	f002 0378 	and.w	r3, r2, #120	; 0x78
     986:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     98a:	424b      	negs	r3, r1
     98c:	414b      	adcs	r3, r1
     98e:	e01a      	b.n	9c6 <__z_interrupt_stack_SIZEOF+0x186>
	switch (conv->specifier) {
     990:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     994:	b2c9      	uxtb	r1, r1
     996:	2001      	movs	r0, #1
     998:	fa00 f101 	lsl.w	r1, r0, r1
     99c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     9a0:	d194      	bne.n	8cc <__z_interrupt_stack_SIZEOF+0x8c>
     9a2:	f640 0601 	movw	r6, #2049	; 0x801
     9a6:	4231      	tst	r1, r6
     9a8:	d11d      	bne.n	9e6 <__z_interrupt_stack_SIZEOF+0x1a6>
     9aa:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     9ae:	d03e      	beq.n	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
		conv->specifier_cat = SPECIFIER_SINT;
     9b0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9b4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b8:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9bc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     9be:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c2:	d034      	beq.n	a2e <__z_interrupt_stack_SIZEOF+0x1ee>
	bool unsupported = false;
     9c4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     9c6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     9ca:	f3c2 0140 	ubfx	r1, r2, #1, #1
     9ce:	430b      	orrs	r3, r1
     9d0:	f363 0241 	bfi	r2, r3, #1, #1
     9d4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     9d8:	e6fd      	b.n	7d6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     9da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9de:	2102      	movs	r1, #2
     9e0:	f361 0302 	bfi	r3, r1, #0, #3
     9e4:	e7e8      	b.n	9b8 <__z_interrupt_stack_SIZEOF+0x178>
     9e6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     9ea:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ec:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9f0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9f6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     9fa:	bf02      	ittt	eq
     9fc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     a00:	f041 0101 	orreq.w	r1, r1, #1
     a04:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     a08:	2b63      	cmp	r3, #99	; 0x63
     a0a:	d1db      	bne.n	9c4 <__z_interrupt_stack_SIZEOF+0x184>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a0c:	1e13      	subs	r3, r2, #0
     a0e:	bf18      	it	ne
     a10:	2301      	movne	r3, #1
     a12:	e7d8      	b.n	9c6 <__z_interrupt_stack_SIZEOF+0x186>
		conv->specifier_cat = SPECIFIER_PTR;
     a14:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a18:	2103      	movs	r1, #3
     a1a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     a1e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a22:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a26:	bf14      	ite	ne
     a28:	2301      	movne	r3, #1
     a2a:	2300      	moveq	r3, #0
     a2c:	e7cb      	b.n	9c6 <__z_interrupt_stack_SIZEOF+0x186>
		conv->invalid = true;
     a2e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a32:	f043 0301 	orr.w	r3, r3, #1
     a36:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     a3a:	e7c3      	b.n	9c4 <__z_interrupt_stack_SIZEOF+0x184>
		} else if (conv->width_present) {
     a3c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     a40:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a42:	bfb4      	ite	lt
     a44:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     a48:	f04f 38ff 	movge.w	r8, #4294967295
     a4c:	e6d5      	b.n	7fa <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
     a4e:	0798      	lsls	r0, r3, #30
     a50:	f57f aee2 	bpl.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
			precision = conv->prec_value;
     a54:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     a58:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     a5c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a5e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a62:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     a66:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a6a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a6c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a70:	d133      	bne.n	ada <__z_interrupt_stack_SIZEOF+0x29a>
			switch (length_mod) {
     a72:	1ecb      	subs	r3, r1, #3
     a74:	2b04      	cmp	r3, #4
     a76:	d804      	bhi.n	a82 <__z_interrupt_stack_SIZEOF+0x242>
     a78:	e8df f003 	tbb	[pc, r3]
     a7c:	21464621 	.word	0x21464621
     a80:	21          	.byte	0x21
     a81:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a82:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     a84:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     a86:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a8a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     a8e:	d11c      	bne.n	aca <__z_interrupt_stack_SIZEOF+0x28a>
				value->sint = (signed char)value->sint;
     a90:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     a94:	17da      	asrs	r2, r3, #31
     a96:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     a9a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     a9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     aa0:	f013 0603 	ands.w	r6, r3, #3
     aa4:	d050      	beq.n	b48 <__z_interrupt_stack_SIZEOF+0x308>
			OUTS(sp, fp);
     aa6:	9b03      	ldr	r3, [sp, #12]
     aa8:	463a      	mov	r2, r7
     aaa:	4659      	mov	r1, fp
     aac:	4648      	mov	r0, r9
     aae:	f003 fc90 	bl	43d2 <outs>
     ab2:	2800      	cmp	r0, #0
     ab4:	f2c0 8153 	blt.w	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     ab8:	4405      	add	r5, r0
			continue;
     aba:	9f03      	ldr	r7, [sp, #12]
     abc:	e5f2      	b.n	6a4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     abe:	f854 3b04 	ldr.w	r3, [r4], #4
     ac2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     ac4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     ac8:	e7e8      	b.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
			} else if (length_mod == LENGTH_H) {
     aca:	2902      	cmp	r1, #2
     acc:	d1e5      	bne.n	a9a <__z_interrupt_stack_SIZEOF+0x25a>
				value->sint = (short)value->sint;
     ace:	b21a      	sxth	r2, r3
     ad0:	f343 33c0 	sbfx	r3, r3, #15, #1
     ad4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     ad8:	e7df      	b.n	a9a <__z_interrupt_stack_SIZEOF+0x25a>
		} else if (specifier_cat == SPECIFIER_UINT) {
     ada:	2b02      	cmp	r3, #2
     adc:	d124      	bne.n	b28 <__z_interrupt_stack_SIZEOF+0x2e8>
			switch (length_mod) {
     ade:	1ecb      	subs	r3, r1, #3
     ae0:	2b04      	cmp	r3, #4
     ae2:	d804      	bhi.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
     ae4:	e8df f003 	tbb	[pc, r3]
     ae8:	18101018 	.word	0x18101018
     aec:	18          	.byte	0x18
     aed:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     aee:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     af0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     af4:	f04f 0200 	mov.w	r2, #0
     af8:	d014      	beq.n	b24 <__z_interrupt_stack_SIZEOF+0x2e4>
			} else if (length_mod == LENGTH_H) {
     afa:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     afc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     b00:	d1cc      	bne.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
				value->uint = (unsigned short)value->uint;
     b02:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b04:	930e      	str	r3, [sp, #56]	; 0x38
     b06:	e7c9      	b.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
					(uint_value_type)va_arg(ap,
     b08:	3407      	adds	r4, #7
     b0a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b0e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b12:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b16:	e7c1      	b.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
					(uint_value_type)va_arg(ap, size_t);
     b18:	f854 3b04 	ldr.w	r3, [r4], #4
     b1c:	930e      	str	r3, [sp, #56]	; 0x38
     b1e:	2300      	movs	r3, #0
     b20:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     b22:	e7bb      	b.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
				value->uint = (unsigned char)value->uint;
     b24:	b2db      	uxtb	r3, r3
     b26:	e7cd      	b.n	ac4 <__z_interrupt_stack_SIZEOF+0x284>
		} else if (specifier_cat == SPECIFIER_FP) {
     b28:	2b04      	cmp	r3, #4
     b2a:	d108      	bne.n	b3e <__z_interrupt_stack_SIZEOF+0x2fe>
					(sint_value_type)va_arg(ap, long long);
     b2c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     b2e:	f024 0407 	bic.w	r4, r4, #7
     b32:	e9d4 2300 	ldrd	r2, r3, [r4]
     b36:	3408      	adds	r4, #8
     b38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b3c:	e7ae      	b.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b3e:	2b03      	cmp	r3, #3
     b40:	d1ac      	bne.n	a9c <__z_interrupt_stack_SIZEOF+0x25c>
			value->ptr = va_arg(ap, void *);
     b42:	f854 3b04 	ldr.w	r3, [r4], #4
     b46:	e7dd      	b.n	b04 <__z_interrupt_stack_SIZEOF+0x2c4>
		switch (conv->specifier) {
     b48:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     b4c:	2878      	cmp	r0, #120	; 0x78
     b4e:	d8b4      	bhi.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
     b50:	2862      	cmp	r0, #98	; 0x62
     b52:	d81c      	bhi.n	b8e <__z_interrupt_stack_SIZEOF+0x34e>
     b54:	2825      	cmp	r0, #37	; 0x25
     b56:	f43f adad 	beq.w	6b4 <z_cbvprintf_impl+0x20>
     b5a:	2858      	cmp	r0, #88	; 0x58
     b5c:	d1ad      	bne.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b5e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b62:	9300      	str	r3, [sp, #0]
     b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b68:	ab08      	add	r3, sp, #32
     b6a:	aa10      	add	r2, sp, #64	; 0x40
     b6c:	f003 fbeb 	bl	4346 <encode_uint>
			if (precision >= 0) {
     b70:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     b74:	4607      	mov	r7, r0
			if (precision >= 0) {
     b76:	f280 809a 	bge.w	cae <__z_interrupt_stack_SIZEOF+0x46e>
		if (bps == NULL) {
     b7a:	2f00      	cmp	r7, #0
     b7c:	d09d      	beq.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
		size_t nj_len = (bpe - bps);
     b7e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b82:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     b84:	2e00      	cmp	r6, #0
     b86:	f000 80c1 	beq.w	d0c <__z_interrupt_stack_SIZEOF+0x4cc>
			nj_len += 1U;
     b8a:	3001      	adds	r0, #1
     b8c:	e0be      	b.n	d0c <__z_interrupt_stack_SIZEOF+0x4cc>
		switch (conv->specifier) {
     b8e:	3863      	subs	r0, #99	; 0x63
     b90:	2815      	cmp	r0, #21
     b92:	d892      	bhi.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
     b94:	a201      	add	r2, pc, #4	; (adr r2, b9c <__z_interrupt_stack_SIZEOF+0x35c>)
     b96:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     b9a:	bf00      	nop
     b9c:	00000c71 	.word	0x00000c71
     ba0:	00000c83 	.word	0x00000c83
     ba4:	00000abb 	.word	0x00000abb
     ba8:	00000abb 	.word	0x00000abb
     bac:	00000abb 	.word	0x00000abb
     bb0:	00000abb 	.word	0x00000abb
     bb4:	00000c83 	.word	0x00000c83
     bb8:	00000abb 	.word	0x00000abb
     bbc:	00000abb 	.word	0x00000abb
     bc0:	00000abb 	.word	0x00000abb
     bc4:	00000abb 	.word	0x00000abb
     bc8:	00000d11 	.word	0x00000d11
     bcc:	00000ca9 	.word	0x00000ca9
     bd0:	00000ccf 	.word	0x00000ccf
     bd4:	00000abb 	.word	0x00000abb
     bd8:	00000abb 	.word	0x00000abb
     bdc:	00000bf5 	.word	0x00000bf5
     be0:	00000abb 	.word	0x00000abb
     be4:	00000ca9 	.word	0x00000ca9
     be8:	00000abb 	.word	0x00000abb
     bec:	00000abb 	.word	0x00000abb
     bf0:	00000ca9 	.word	0x00000ca9
			if (precision >= 0) {
     bf4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     bf8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     bfa:	db35      	blt.n	c68 <__z_interrupt_stack_SIZEOF+0x428>
				len = strnlen(bps, precision);
     bfc:	4651      	mov	r1, sl
     bfe:	4638      	mov	r0, r7
     c00:	f003 fc1c 	bl	443c <strnlen>
			bpe = bps + len;
     c04:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     c08:	2f00      	cmp	r7, #0
     c0a:	f43f af56 	beq.w	aba <__z_interrupt_stack_SIZEOF+0x27a>
		char sign = 0;
     c0e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     c10:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c14:	f013 0210 	ands.w	r2, r3, #16
     c18:	9205      	str	r2, [sp, #20]
     c1a:	f000 8093 	beq.w	d44 <__z_interrupt_stack_SIZEOF+0x504>
			nj_len += 2U;
     c1e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     c20:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     c22:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     c24:	bf48      	it	mi
     c26:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     c28:	9204      	str	r2, [sp, #16]
     c2a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     c2c:	bf48      	it	mi
     c2e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     c30:	f1b8 0f00 	cmp.w	r8, #0
     c34:	f340 80a0 	ble.w	d78 <__z_interrupt_stack_SIZEOF+0x538>
			if (!conv->flag_dash) {
     c38:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     c3c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     c40:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c44:	0750      	lsls	r0, r2, #29
     c46:	9306      	str	r3, [sp, #24]
     c48:	f100 8096 	bmi.w	d78 <__z_interrupt_stack_SIZEOF+0x538>
				if (conv->flag_zero) {
     c4c:	0651      	lsls	r1, r2, #25
     c4e:	f140 8089 	bpl.w	d64 <__z_interrupt_stack_SIZEOF+0x524>
					if (sign != 0) {
     c52:	b13e      	cbz	r6, c64 <__z_interrupt_stack_SIZEOF+0x424>
						OUTC(sign);
     c54:	4659      	mov	r1, fp
     c56:	4630      	mov	r0, r6
     c58:	47c8      	blx	r9
     c5a:	2800      	cmp	r0, #0
     c5c:	db7f      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     c5e:	9b06      	ldr	r3, [sp, #24]
     c60:	3501      	adds	r5, #1
     c62:	461e      	mov	r6, r3
					pad = '0';
     c64:	2230      	movs	r2, #48	; 0x30
     c66:	e07e      	b.n	d66 <__z_interrupt_stack_SIZEOF+0x526>
				len = strlen(bps);
     c68:	4638      	mov	r0, r7
     c6a:	f003 fbe0 	bl	442e <strlen>
     c6e:	e7c9      	b.n	c04 <__z_interrupt_stack_SIZEOF+0x3c4>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     c72:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     c76:	2600      	movs	r6, #0
			bps = buf;
     c78:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     c7a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     c7e:	2001      	movs	r0, #1
     c80:	e7c6      	b.n	c10 <__z_interrupt_stack_SIZEOF+0x3d0>
			if (conv->flag_plus) {
     c82:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     c84:	bf5c      	itt	pl
     c86:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     c8a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     c8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     c90:	bf48      	it	mi
     c92:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     c94:	2b00      	cmp	r3, #0
     c96:	f6bf af62 	bge.w	b5e <__z_interrupt_stack_SIZEOF+0x31e>
				value->uint = (uint_value_type)-sint;
     c9a:	4252      	negs	r2, r2
     c9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ca0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     ca4:	262d      	movs	r6, #45	; 0x2d
     ca6:	e75a      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		switch (conv->specifier) {
     ca8:	2600      	movs	r6, #0
     caa:	e758      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		char sign = 0;
     cac:	2600      	movs	r6, #0
				conv->flag_zero = false;
     cae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     cb2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cb6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     cb8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cbc:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     cbe:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     cc2:	f67f af5a 	bls.w	b7a <__z_interrupt_stack_SIZEOF+0x33a>
					conv->pad0_value = precision - (int)len;
     cc6:	ebaa 0303 	sub.w	r3, sl, r3
     cca:	9311      	str	r3, [sp, #68]	; 0x44
     ccc:	e755      	b.n	b7a <__z_interrupt_stack_SIZEOF+0x33a>
			if (value->ptr != NULL) {
     cce:	980e      	ldr	r0, [sp, #56]	; 0x38
     cd0:	b390      	cbz	r0, d38 <__z_interrupt_stack_SIZEOF+0x4f8>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cd2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cd6:	9300      	str	r3, [sp, #0]
     cd8:	aa10      	add	r2, sp, #64	; 0x40
     cda:	ab08      	add	r3, sp, #32
     cdc:	2100      	movs	r1, #0
     cde:	f003 fb32 	bl	4346 <encode_uint>
				conv->altform_0c = true;
     ce2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     ce6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     cea:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     cee:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     cf2:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cf6:	4607      	mov	r7, r0
				conv->altform_0c = true;
     cf8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     cfc:	dad6      	bge.n	cac <__z_interrupt_stack_SIZEOF+0x46c>
		if (bps == NULL) {
     cfe:	2800      	cmp	r0, #0
     d00:	f43f aedb 	beq.w	aba <__z_interrupt_stack_SIZEOF+0x27a>
		size_t nj_len = (bpe - bps);
     d04:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d08:	1a18      	subs	r0, r3, r0
		char sign = 0;
     d0a:	2600      	movs	r6, #0
     d0c:	469a      	mov	sl, r3
     d0e:	e77f      	b.n	c10 <__z_interrupt_stack_SIZEOF+0x3d0>
				store_count(conv, value->ptr, count);
     d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     d12:	2907      	cmp	r1, #7
     d14:	f63f aed1 	bhi.w	aba <__z_interrupt_stack_SIZEOF+0x27a>
     d18:	e8df f001 	tbb	[pc, r1]
     d1c:	0c06040c 	.word	0x0c06040c
     d20:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     d24:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     d26:	e6c8      	b.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
		*(short *)dp = (short)count;
     d28:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     d2a:	e6c6      	b.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
		*(intmax_t *)dp = (intmax_t)count;
     d2c:	17ea      	asrs	r2, r5, #31
     d2e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     d32:	e6c2      	b.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d34:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     d36:	e6c0      	b.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
     d38:	4f2e      	ldr	r7, [pc, #184]	; (df4 <__z_interrupt_stack_SIZEOF+0x5b4>)
		char sign = 0;
     d3a:	4606      	mov	r6, r0
			bpe = bps + 5;
     d3c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     d40:	2005      	movs	r0, #5
     d42:	e765      	b.n	c10 <__z_interrupt_stack_SIZEOF+0x3d0>
		} else if (conv->altform_0) {
     d44:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     d46:	bf48      	it	mi
     d48:	3001      	addmi	r0, #1
     d4a:	e769      	b.n	c20 <__z_interrupt_stack_SIZEOF+0x3e0>
     d4c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     d4e:	4610      	mov	r0, r2
     d50:	9206      	str	r2, [sp, #24]
     d52:	4659      	mov	r1, fp
     d54:	47c8      	blx	r9
     d56:	2800      	cmp	r0, #0
     d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d5c:	da04      	bge.n	d68 <__z_interrupt_stack_SIZEOF+0x528>
#undef OUTS
#undef OUTC
}
     d5e:	b015      	add	sp, #84	; 0x54
     d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d64:	2220      	movs	r2, #32
					pad = '0';
     d66:	4643      	mov	r3, r8
				while (width-- > 0) {
     d68:	4619      	mov	r1, r3
     d6a:	2900      	cmp	r1, #0
     d6c:	f103 33ff 	add.w	r3, r3, #4294967295
     d70:	dcec      	bgt.n	d4c <__z_interrupt_stack_SIZEOF+0x50c>
     d72:	4445      	add	r5, r8
     d74:	1a6d      	subs	r5, r5, r1
     d76:	4698      	mov	r8, r3
		if (sign != 0) {
     d78:	b12e      	cbz	r6, d86 <__z_interrupt_stack_SIZEOF+0x546>
			OUTC(sign);
     d7a:	4659      	mov	r1, fp
     d7c:	4630      	mov	r0, r6
     d7e:	47c8      	blx	r9
     d80:	2800      	cmp	r0, #0
     d82:	dbec      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     d84:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d86:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d8a:	06da      	lsls	r2, r3, #27
     d8c:	d401      	bmi.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     d8e:	071b      	lsls	r3, r3, #28
     d90:	d505      	bpl.n	d9e <__z_interrupt_stack_SIZEOF+0x55e>
				OUTC('0');
     d92:	4659      	mov	r1, fp
     d94:	2030      	movs	r0, #48	; 0x30
     d96:	47c8      	blx	r9
     d98:	2800      	cmp	r0, #0
     d9a:	dbe0      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     d9c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d9e:	9b05      	ldr	r3, [sp, #20]
     da0:	b133      	cbz	r3, db0 <__z_interrupt_stack_SIZEOF+0x570>
				OUTC(conv->specifier);
     da2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     da6:	4659      	mov	r1, fp
     da8:	47c8      	blx	r9
     daa:	2800      	cmp	r0, #0
     dac:	dbd7      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     dae:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     db0:	9e04      	ldr	r6, [sp, #16]
     db2:	442e      	add	r6, r5
     db4:	e005      	b.n	dc2 <__z_interrupt_stack_SIZEOF+0x582>
				OUTC('0');
     db6:	4659      	mov	r1, fp
     db8:	2030      	movs	r0, #48	; 0x30
     dba:	47c8      	blx	r9
     dbc:	2800      	cmp	r0, #0
     dbe:	dbce      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     dc0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dc2:	1b73      	subs	r3, r6, r5
     dc4:	2b00      	cmp	r3, #0
     dc6:	dcf6      	bgt.n	db6 <__z_interrupt_stack_SIZEOF+0x576>
			OUTS(bps, bpe);
     dc8:	4653      	mov	r3, sl
     dca:	463a      	mov	r2, r7
     dcc:	4659      	mov	r1, fp
     dce:	4648      	mov	r0, r9
     dd0:	f003 faff 	bl	43d2 <outs>
     dd4:	2800      	cmp	r0, #0
     dd6:	dbc2      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     dd8:	4405      	add	r5, r0
		while (width > 0) {
     dda:	44a8      	add	r8, r5
     ddc:	eba8 0305 	sub.w	r3, r8, r5
     de0:	2b00      	cmp	r3, #0
     de2:	f77f ae6a 	ble.w	aba <__z_interrupt_stack_SIZEOF+0x27a>
			OUTC(' ');
     de6:	4659      	mov	r1, fp
     de8:	2020      	movs	r0, #32
     dea:	47c8      	blx	r9
     dec:	2800      	cmp	r0, #0
     dee:	dbb6      	blt.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     df0:	3501      	adds	r5, #1
			--width;
     df2:	e7f3      	b.n	ddc <__z_interrupt_stack_SIZEOF+0x59c>
     df4:	00004e80 	.word	0x00004e80

00000df8 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     df8:	b508      	push	{r3, lr}
	__asm__ volatile(
     dfa:	f04f 0220 	mov.w	r2, #32
     dfe:	f3ef 8311 	mrs	r3, BASEPRI
     e02:	f382 8812 	msr	BASEPRI_MAX, r2
     e06:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     e0a:	f000 fe11 	bl	1a30 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e0e:	4803      	ldr	r0, [pc, #12]	; (e1c <sys_reboot+0x24>)
     e10:	f003 f9a9 	bl	4166 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e14:	f000 fa48 	bl	12a8 <arch_cpu_idle>
     e18:	e7fc      	b.n	e14 <sys_reboot+0x1c>
     e1a:	bf00      	nop
     e1c:	00004e86 	.word	0x00004e86

00000e20 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     e20:	f001 bb2c 	b.w	247c <SystemInit>

00000e24 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e28:	4605      	mov	r5, r0
     e2a:	f04f 0320 	mov.w	r3, #32
     e2e:	f3ef 8611 	mrs	r6, BASEPRI
     e32:	f383 8812 	msr	BASEPRI_MAX, r3
     e36:	f3bf 8f6f 	isb	sy
	return list->head;
     e3a:	4b0e      	ldr	r3, [pc, #56]	; (e74 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e3c:	4f0e      	ldr	r7, [pc, #56]	; (e78 <pm_state_notify+0x54>)
     e3e:	681c      	ldr	r4, [r3, #0]
     e40:	f8df 8038 	ldr.w	r8, [pc, #56]	; e7c <pm_state_notify+0x58>
     e44:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e48:	b92c      	cbnz	r4, e56 <pm_state_notify+0x32>
	__asm__ volatile(
     e4a:	f386 8811 	msr	BASEPRI, r6
     e4e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     e56:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     e5a:	2d00      	cmp	r5, #0
     e5c:	bf18      	it	ne
     e5e:	4613      	movne	r3, r2
		if (callback) {
     e60:	b12b      	cbz	r3, e6e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e62:	f898 2014 	ldrb.w	r2, [r8, #20]
     e66:	fb09 f202 	mul.w	r2, r9, r2
     e6a:	5cb8      	ldrb	r0, [r7, r2]
     e6c:	4798      	blx	r3
	return node->next;
     e6e:	6824      	ldr	r4, [r4, #0]
     e70:	e7ea      	b.n	e48 <pm_state_notify+0x24>
     e72:	bf00      	nop
     e74:	200002a8 	.word	0x200002a8
     e78:	2000029c 	.word	0x2000029c
     e7c:	20000870 	.word	0x20000870

00000e80 <pm_system_resume>:

void pm_system_resume(void)
{
     e80:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     e82:	4b19      	ldr	r3, [pc, #100]	; (ee8 <pm_system_resume+0x68>)
     e84:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e86:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e8a:	f004 031f 	and.w	r3, r4, #31
     e8e:	2201      	movs	r2, #1
     e90:	409a      	lsls	r2, r3
     e92:	4b16      	ldr	r3, [pc, #88]	; (eec <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e94:	0961      	lsrs	r1, r4, #5
     e96:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e9a:	43d0      	mvns	r0, r2
     e9c:	e853 1f00 	ldrex	r1, [r3]
     ea0:	ea01 0500 	and.w	r5, r1, r0
     ea4:	e843 5600 	strex	r6, r5, [r3]
     ea8:	2e00      	cmp	r6, #0
     eaa:	d1f7      	bne.n	e9c <pm_system_resume+0x1c>
     eac:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     eb0:	420a      	tst	r2, r1
     eb2:	d013      	beq.n	edc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
     eb4:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <pm_system_resume+0x70>)
     eb6:	4d0f      	ldr	r5, [pc, #60]	; (ef4 <pm_system_resume+0x74>)
     eb8:	b18b      	cbz	r3, ede <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
     eba:	230c      	movs	r3, #12
     ebc:	4363      	muls	r3, r4
     ebe:	18ea      	adds	r2, r5, r3
     ec0:	5ce8      	ldrb	r0, [r5, r3]
     ec2:	7851      	ldrb	r1, [r2, #1]
     ec4:	f003 fae3 	bl	448e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     ec8:	2000      	movs	r0, #0
     eca:	f7ff ffab 	bl	e24 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     ece:	230c      	movs	r3, #12
     ed0:	435c      	muls	r4, r3
     ed2:	192a      	adds	r2, r5, r4
     ed4:	2300      	movs	r3, #0
     ed6:	512b      	str	r3, [r5, r4]
     ed8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     edc:	bd70      	pop	{r4, r5, r6, pc}
     ede:	f383 8811 	msr	BASEPRI, r3
     ee2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     ee6:	e7ef      	b.n	ec8 <pm_system_resume+0x48>
     ee8:	20000870 	.word	0x20000870
     eec:	200002b0 	.word	0x200002b0
     ef0:	0000448f 	.word	0x0000448f
     ef4:	2000029c 	.word	0x2000029c

00000ef8 <pm_state_force>:

bool pm_state_force(uint8_t cpu, const struct pm_state_info *info)
{
     ef8:	b510      	push	{r4, lr}
	__asm__ volatile(
     efa:	f04f 0320 	mov.w	r3, #32
     efe:	f3ef 8411 	mrs	r4, BASEPRI
     f02:	f383 8812 	msr	BASEPRI_MAX, r3
     f06:	f3bf 8f6f 	isb	sy

	__ASSERT(info->state < PM_STATE_COUNT,
		 "Invalid power state %d!", info->state);

	key = k_spin_lock(&pm_forced_state_lock);
	z_cpus_pm_forced_state[cpu] = *info;
     f0a:	4b06      	ldr	r3, [pc, #24]	; (f24 <pm_state_force+0x2c>)
     f0c:	220c      	movs	r2, #12
     f0e:	fb02 3300 	mla	r3, r2, r0, r3
     f12:	c907      	ldmia	r1, {r0, r1, r2}
     f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__asm__ volatile(
     f18:	f384 8811 	msr	BASEPRI, r4
     f1c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&pm_forced_state_lock, key);

	return true;
}
     f20:	2001      	movs	r0, #1
     f22:	bd10      	pop	{r4, pc}
     f24:	20000290 	.word	0x20000290

00000f28 <pm_system_suspend>:

bool pm_system_suspend(int32_t ticks)
{
     f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     f2c:	4b35      	ldr	r3, [pc, #212]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
{
     f2e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     f30:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
     f32:	f04f 0320 	mov.w	r3, #32
     f36:	f3ef 8811 	mrs	r8, BASEPRI
     f3a:	f383 8812 	msr	BASEPRI_MAX, r3
     f3e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     f42:	240c      	movs	r4, #12
     f44:	4b30      	ldr	r3, [pc, #192]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     f46:	4e31      	ldr	r6, [pc, #196]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     f48:	436c      	muls	r4, r5
     f4a:	191a      	adds	r2, r3, r4
     f4c:	5d19      	ldrb	r1, [r3, r4]
     f4e:	2900      	cmp	r1, #0
     f50:	d04c      	beq.n	fec <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     f52:	ca07      	ldmia	r2, {r0, r1, r2}
     f54:	eb06 0c04 	add.w	ip, r6, r4
     f58:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     f5c:	2200      	movs	r2, #0
     f5e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     f60:	f388 8811 	msr	BASEPRI, r8
     f64:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     f68:	230c      	movs	r3, #12
     f6a:	436b      	muls	r3, r5
     f6c:	18f2      	adds	r2, r6, r3
     f6e:	5cf0      	ldrb	r0, [r6, r3]
     f70:	2800      	cmp	r0, #0
     f72:	d039      	beq.n	fe8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     f74:	1c7b      	adds	r3, r7, #1
     f76:	d010      	beq.n	f9a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     f7c:	4c24      	ldr	r4, [pc, #144]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     f7e:	4a25      	ldr	r2, [pc, #148]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     f84:	2100      	movs	r1, #0
     f86:	fbec 4100 	umlal	r4, r1, ip, r0
     f8a:	2300      	movs	r3, #0
     f8c:	4620      	mov	r0, r4
     f8e:	f7ff f8b7 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f92:	2101      	movs	r1, #1
     f94:	1a38      	subs	r0, r7, r0
     f96:	f003 fd74 	bl	4a82 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f9a:	f002 fc51 	bl	3840 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f9e:	2001      	movs	r0, #1
     fa0:	f7ff ff40 	bl	e24 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     fa4:	f3bf 8f5b 	dmb	ish
     fa8:	4b1b      	ldr	r3, [pc, #108]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     faa:	096a      	lsrs	r2, r5, #5
     fac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
     fb0:	f005 011f 	and.w	r1, r5, #31
     fb4:	2201      	movs	r2, #1
     fb6:	408a      	lsls	r2, r1
     fb8:	e853 0f00 	ldrex	r0, [r3]
     fbc:	4310      	orrs	r0, r2
     fbe:	e843 0100 	strex	r1, r0, [r3]
     fc2:	2900      	cmp	r1, #0
     fc4:	d1f8      	bne.n	fb8 <pm_system_suspend+0x90>
     fc6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
     fca:	4b14      	ldr	r3, [pc, #80]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fcc:	b13b      	cbz	r3, fde <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
     fce:	230c      	movs	r3, #12
     fd0:	fb03 f005 	mul.w	r0, r3, r5
     fd4:	1833      	adds	r3, r6, r0
     fd6:	5c30      	ldrb	r0, [r6, r0]
     fd8:	7859      	ldrb	r1, [r3, #1]
     fda:	f003 fa4c 	bl	4476 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     fde:	f7ff ff4f 	bl	e80 <pm_system_resume>
	k_sched_unlock();
     fe2:	f002 fc41 	bl	3868 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     fe6:	2001      	movs	r0, #1
}
     fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
     fec:	4601      	mov	r1, r0
     fee:	4628      	mov	r0, r5
     ff0:	f000 f816 	bl	1020 <pm_policy_next_state>
		if (info != NULL) {
     ff4:	2800      	cmp	r0, #0
     ff6:	d0b3      	beq.n	f60 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
     ff8:	c807      	ldmia	r0, {r0, r1, r2}
     ffa:	4434      	add	r4, r6
     ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1000:	e7ae      	b.n	f60 <pm_system_suspend+0x38>
    1002:	bf00      	nop
    1004:	20000870 	.word	0x20000870
    1008:	20000290 	.word	0x20000290
    100c:	2000029c 	.word	0x2000029c
    1010:	000f423f 	.word	0x000f423f
    1014:	000f4240 	.word	0x000f4240
    1018:	200002b0 	.word	0x200002b0
    101c:	00004477 	.word	0x00004477

00001020 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1024:	b085      	sub	sp, #20
    1026:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1028:	a903      	add	r1, sp, #12
    102a:	f000 f843 	bl	10b4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    102e:	4b1e      	ldr	r3, [pc, #120]	; (10a8 <pm_policy_next_state+0x88>)
    1030:	9d03      	ldr	r5, [sp, #12]
    1032:	f8d3 a000 	ldr.w	sl, [r3]
    1036:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10ac <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    103a:	1e43      	subs	r3, r0, #1
    103c:	b21b      	sxth	r3, r3
    103e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1042:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1044:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1048:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    104c:	f04f 0b00 	mov.w	fp, #0
    1050:	b924      	cbnz	r4, 105c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1052:	46a1      	mov	r9, r4
}
    1054:	4648      	mov	r0, r9
    1056:	b005      	add	sp, #20
    1058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    105c:	6868      	ldr	r0, [r5, #4]
    105e:	4a14      	ldr	r2, [pc, #80]	; (10b0 <pm_policy_next_state+0x90>)
    1060:	46c4      	mov	ip, r8
    1062:	4659      	mov	r1, fp
    1064:	fbe0 c107 	umlal	ip, r1, r0, r7
    1068:	2300      	movs	r3, #0
    106a:	4660      	mov	r0, ip
    106c:	f7ff f848 	bl	100 <__aeabi_uldivmod>
    1070:	9001      	str	r0, [sp, #4]
    1072:	68a8      	ldr	r0, [r5, #8]
    1074:	4a0e      	ldr	r2, [pc, #56]	; (10b0 <pm_policy_next_state+0x90>)
    1076:	46c4      	mov	ip, r8
    1078:	4659      	mov	r1, fp
    107a:	fbe0 c107 	umlal	ip, r1, r0, r7
    107e:	2300      	movs	r3, #0
    1080:	4660      	mov	r0, ip
    1082:	f7ff f83d 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1086:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    108a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    108c:	d001      	beq.n	1092 <pm_policy_next_state+0x72>
    108e:	4582      	cmp	sl, r0
    1090:	d905      	bls.n	109e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1092:	1c73      	adds	r3, r6, #1
    1094:	d0de      	beq.n	1054 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    1096:	9b01      	ldr	r3, [sp, #4]
    1098:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    109a:	42b0      	cmp	r0, r6
    109c:	d9da      	bls.n	1054 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    109e:	3c01      	subs	r4, #1
    10a0:	b2a4      	uxth	r4, r4
    10a2:	3d0c      	subs	r5, #12
    10a4:	e7d4      	b.n	1050 <pm_policy_next_state+0x30>
    10a6:	bf00      	nop
    10a8:	20000004 	.word	0x20000004
    10ac:	000f423f 	.word	0x000f423f
    10b0:	000f4240 	.word	0x000f4240

000010b4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    10b4:	b908      	cbnz	r0, 10ba <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <pm_state_cpu_get_all+0xc>)
    10b8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    10ba:	2000      	movs	r0, #0
    10bc:	4770      	bx	lr
    10be:	bf00      	nop
    10c0:	00004d08 	.word	0x00004d08

000010c4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    10c4:	4801      	ldr	r0, [pc, #4]	; (10cc <nrf_cc3xx_platform_abort_init+0x8>)
    10c6:	f002 bea1 	b.w	3e0c <nrf_cc3xx_platform_set_abort>
    10ca:	bf00      	nop
    10cc:	00004d08 	.word	0x00004d08

000010d0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10d0:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    10d2:	4604      	mov	r4, r0
    10d4:	b918      	cbnz	r0, 10de <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    10d6:	4b0f      	ldr	r3, [pc, #60]	; (1114 <mutex_free_platform+0x44>)
    10d8:	480f      	ldr	r0, [pc, #60]	; (1118 <mutex_free_platform+0x48>)
    10da:	685b      	ldr	r3, [r3, #4]
    10dc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    10de:	6861      	ldr	r1, [r4, #4]
    10e0:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    10e4:	d00f      	beq.n	1106 <mutex_free_platform+0x36>
    10e6:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    10ea:	d00c      	beq.n	1106 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10ec:	4d0b      	ldr	r5, [pc, #44]	; (111c <mutex_free_platform+0x4c>)
    10ee:	42a9      	cmp	r1, r5
    10f0:	d009      	beq.n	1106 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    10f2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    10f6:	d007      	beq.n	1108 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    10f8:	4809      	ldr	r0, [pc, #36]	; (1120 <mutex_free_platform+0x50>)
    10fa:	4621      	mov	r1, r4
    10fc:	f003 fbb8 	bl	4870 <k_mem_slab_free>
        mutex->mutex = NULL;
    1100:	2300      	movs	r3, #0
    1102:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1104:	6065      	str	r5, [r4, #4]
}
    1106:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1108:	6820      	ldr	r0, [r4, #0]
    110a:	2214      	movs	r2, #20
    110c:	f003 f9aa 	bl	4464 <memset>
    1110:	e7f8      	b.n	1104 <mutex_free_platform+0x34>
    1112:	bf00      	nop
    1114:	200000b0 	.word	0x200000b0
    1118:	00004eaf 	.word	0x00004eaf
    111c:	a95c5f2c 	.word	0xa95c5f2c
    1120:	200007b4 	.word	0x200007b4

00001124 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1124:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1126:	b320      	cbz	r0, 1172 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1128:	6843      	ldr	r3, [r0, #4]
    112a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    112e:	d110      	bne.n	1152 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1130:	2201      	movs	r2, #1
    1132:	6803      	ldr	r3, [r0, #0]
    1134:	f3bf 8f5b 	dmb	ish
    1138:	e853 1f00 	ldrex	r1, [r3]
    113c:	2900      	cmp	r1, #0
    113e:	d103      	bne.n	1148 <mutex_lock_platform+0x24>
    1140:	e843 2000 	strex	r0, r2, [r3]
    1144:	2800      	cmp	r0, #0
    1146:	d1f7      	bne.n	1138 <mutex_lock_platform+0x14>
    1148:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    114c:	d10d      	bne.n	116a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    114e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1150:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1152:	4a09      	ldr	r2, [pc, #36]	; (1178 <mutex_lock_platform+0x54>)
    1154:	4293      	cmp	r3, r2
    1156:	d00a      	beq.n	116e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1158:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    115a:	f04f 32ff 	mov.w	r2, #4294967295
    115e:	f04f 33ff 	mov.w	r3, #4294967295
    1162:	f002 f865 	bl	3230 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1166:	2800      	cmp	r0, #0
    1168:	d0f1      	beq.n	114e <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    116a:	4804      	ldr	r0, [pc, #16]	; (117c <mutex_lock_platform+0x58>)
    116c:	e7f0      	b.n	1150 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    116e:	4804      	ldr	r0, [pc, #16]	; (1180 <mutex_lock_platform+0x5c>)
    1170:	e7ee      	b.n	1150 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1172:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1176:	e7eb      	b.n	1150 <mutex_lock_platform+0x2c>
    1178:	a95c5f2c 	.word	0xa95c5f2c
    117c:	ffff8fe9 	.word	0xffff8fe9
    1180:	ffff8fea 	.word	0xffff8fea

00001184 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1184:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1186:	b1d8      	cbz	r0, 11c0 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1188:	6843      	ldr	r3, [r0, #4]
    118a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    118e:	d110      	bne.n	11b2 <mutex_unlock_platform+0x2e>
    1190:	2200      	movs	r2, #0
    1192:	6803      	ldr	r3, [r0, #0]
    1194:	f3bf 8f5b 	dmb	ish
    1198:	e853 1f00 	ldrex	r1, [r3]
    119c:	2901      	cmp	r1, #1
    119e:	d103      	bne.n	11a8 <mutex_unlock_platform+0x24>
    11a0:	e843 2000 	strex	r0, r2, [r3]
    11a4:	2800      	cmp	r0, #0
    11a6:	d1f7      	bne.n	1198 <mutex_unlock_platform+0x14>
    11a8:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11ac:	d10b      	bne.n	11c6 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11ae:	2000      	movs	r0, #0
    }
}
    11b0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11b2:	4a07      	ldr	r2, [pc, #28]	; (11d0 <mutex_unlock_platform+0x4c>)
    11b4:	4293      	cmp	r3, r2
    11b6:	d008      	beq.n	11ca <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    11b8:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    11ba:	f002 f8b3 	bl	3324 <z_impl_k_mutex_unlock>
    11be:	e7f6      	b.n	11ae <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    11c4:	e7f4      	b.n	11b0 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11c6:	4803      	ldr	r0, [pc, #12]	; (11d4 <mutex_unlock_platform+0x50>)
    11c8:	e7f2      	b.n	11b0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11ca:	4803      	ldr	r0, [pc, #12]	; (11d8 <mutex_unlock_platform+0x54>)
    11cc:	e7f0      	b.n	11b0 <mutex_unlock_platform+0x2c>
    11ce:	bf00      	nop
    11d0:	a95c5f2c 	.word	0xa95c5f2c
    11d4:	ffff8fe9 	.word	0xffff8fe9
    11d8:	ffff8fea 	.word	0xffff8fea

000011dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    11de:	4604      	mov	r4, r0
    11e0:	b918      	cbnz	r0, 11ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    11e2:	4b1d      	ldr	r3, [pc, #116]	; (1258 <mutex_init_platform+0x7c>)
    11e4:	481d      	ldr	r0, [pc, #116]	; (125c <mutex_init_platform+0x80>)
    11e6:	685b      	ldr	r3, [r3, #4]
    11e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    11ea:	6863      	ldr	r3, [r4, #4]
    11ec:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    11f0:	d02f      	beq.n	1252 <mutex_init_platform+0x76>
    11f2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11f6:	d02c      	beq.n	1252 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11f8:	4a19      	ldr	r2, [pc, #100]	; (1260 <mutex_init_platform+0x84>)
    11fa:	4293      	cmp	r3, r2
    11fc:	d119      	bne.n	1232 <mutex_init_platform+0x56>
    11fe:	6823      	ldr	r3, [r4, #0]
    1200:	bb03      	cbnz	r3, 1244 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1202:	4818      	ldr	r0, [pc, #96]	; (1264 <mutex_init_platform+0x88>)
    1204:	f04f 32ff 	mov.w	r2, #4294967295
    1208:	f04f 33ff 	mov.w	r3, #4294967295
    120c:	4621      	mov	r1, r4
    120e:	f001 ff37 	bl	3080 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1212:	b908      	cbnz	r0, 1218 <mutex_init_platform+0x3c>
    1214:	6823      	ldr	r3, [r4, #0]
    1216:	b91b      	cbnz	r3, 1220 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1218:	4b0f      	ldr	r3, [pc, #60]	; (1258 <mutex_init_platform+0x7c>)
    121a:	4813      	ldr	r0, [pc, #76]	; (1268 <mutex_init_platform+0x8c>)
    121c:	685b      	ldr	r3, [r3, #4]
    121e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1220:	6820      	ldr	r0, [r4, #0]
    1222:	2214      	movs	r2, #20
    1224:	2100      	movs	r1, #0
    1226:	f003 f91d 	bl	4464 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    122a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    122e:	6063      	str	r3, [r4, #4]
    1230:	e008      	b.n	1244 <mutex_init_platform+0x68>
    switch(flags){
    1232:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1236:	d80d      	bhi.n	1254 <mutex_init_platform+0x78>
    1238:	2b3a      	cmp	r3, #58	; 0x3a
    123a:	d003      	beq.n	1244 <mutex_init_platform+0x68>
    123c:	f640 62ba 	movw	r2, #3770	; 0xeba
    1240:	4293      	cmp	r3, r2
    1242:	d1de      	bne.n	1202 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1244:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1246:	f003 fb51 	bl	48ec <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    124a:	6863      	ldr	r3, [r4, #4]
    124c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    1250:	6063      	str	r3, [r4, #4]
}
    1252:	bd10      	pop	{r4, pc}
    switch(flags){
    1254:	4a05      	ldr	r2, [pc, #20]	; (126c <mutex_init_platform+0x90>)
    1256:	e7f3      	b.n	1240 <mutex_init_platform+0x64>
    1258:	200000b0 	.word	0x200000b0
    125c:	00004eaf 	.word	0x00004eaf
    1260:	a95c5f2c 	.word	0xa95c5f2c
    1264:	200007b4 	.word	0x200007b4
    1268:	00004ed5 	.word	0x00004ed5
    126c:	3a00003a 	.word	0x3a00003a

00001270 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1270:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1272:	4906      	ldr	r1, [pc, #24]	; (128c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1274:	4806      	ldr	r0, [pc, #24]	; (1290 <nrf_cc3xx_platform_mutex_init+0x20>)
    1276:	2340      	movs	r3, #64	; 0x40
    1278:	2214      	movs	r2, #20
    127a:	f003 faeb 	bl	4854 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1282:	4904      	ldr	r1, [pc, #16]	; (1294 <nrf_cc3xx_platform_mutex_init+0x24>)
    1284:	4804      	ldr	r0, [pc, #16]	; (1298 <nrf_cc3xx_platform_mutex_init+0x28>)
    1286:	f002 be33 	b.w	3ef0 <nrf_cc3xx_platform_set_mutexes>
    128a:	bf00      	nop
    128c:	200002b4 	.word	0x200002b4
    1290:	200007b4 	.word	0x200007b4
    1294:	00004d10 	.word	0x00004d10
    1298:	00004d24 	.word	0x00004d24

0000129c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    129c:	4901      	ldr	r1, [pc, #4]	; (12a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    129e:	2210      	movs	r2, #16
	str	r2, [r1]
    12a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12a4:	e000ed10 	.word	0xe000ed10

000012a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12ac:	f380 8811 	msr	BASEPRI, r0
	isb
    12b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    12b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    12b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12ba:	b662      	cpsie	i
	isb
    12bc:	f3bf 8f6f 	isb	sy

	bx	lr
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop

000012c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    12c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    12c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    12c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    12cc:	bf20      	wfe

	msr	BASEPRI, r0
    12ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    12d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    12d4:	4770      	bx	lr
    12d6:	bf00      	nop

000012d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    12d8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    12da:	2800      	cmp	r0, #0
    12dc:	db07      	blt.n	12ee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12de:	4a04      	ldr	r2, [pc, #16]	; (12f0 <arch_irq_enable+0x18>)
    12e0:	0941      	lsrs	r1, r0, #5
    12e2:	2301      	movs	r3, #1
    12e4:	f000 001f 	and.w	r0, r0, #31
    12e8:	4083      	lsls	r3, r0
    12ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    12ee:	4770      	bx	lr
    12f0:	e000e100 	.word	0xe000e100

000012f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <arch_irq_is_enabled+0x18>)
    12f6:	0942      	lsrs	r2, r0, #5
    12f8:	f000 001f 	and.w	r0, r0, #31
    12fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1300:	2301      	movs	r3, #1
    1302:	fa03 f000 	lsl.w	r0, r3, r0
}
    1306:	4010      	ands	r0, r2
    1308:	4770      	bx	lr
    130a:	bf00      	nop
    130c:	e000e100 	.word	0xe000e100

00001310 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1310:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1312:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1314:	bfa8      	it	ge
    1316:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    131a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    131e:	bfb8      	it	lt
    1320:	4b06      	ldrlt	r3, [pc, #24]	; (133c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1322:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1326:	bfac      	ite	ge
    1328:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    132c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1330:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1332:	bfb4      	ite	lt
    1334:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1336:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    133a:	4770      	bx	lr
    133c:	e000ed14 	.word	0xe000ed14

00001340 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1340:	bf30      	wfi
    b z_SysNmiOnReset
    1342:	f7ff bffd 	b.w	1340 <z_SysNmiOnReset>
    1346:	bf00      	nop

00001348 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1348:	4a0b      	ldr	r2, [pc, #44]	; (1378 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    134a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    134c:	4b0b      	ldr	r3, [pc, #44]	; (137c <z_arm_prep_c+0x34>)
    134e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1352:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1358:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    135c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1360:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1368:	f001 fdc6 	bl	2ef8 <z_bss_zero>
	z_data_copy();
    136c:	f002 fba6 	bl	3abc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1370:	f000 f9d6 	bl	1720 <z_arm_interrupt_init>
	z_cstart();
    1374:	f001 fe04 	bl	2f80 <z_cstart>
    1378:	00000000 	.word	0x00000000
    137c:	e000ed00 	.word	0xe000ed00

00001380 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1380:	4a09      	ldr	r2, [pc, #36]	; (13a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1382:	490a      	ldr	r1, [pc, #40]	; (13ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1384:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1386:	6809      	ldr	r1, [r1, #0]
    1388:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    138a:	4909      	ldr	r1, [pc, #36]	; (13b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    138c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    138e:	684b      	ldr	r3, [r1, #4]
    1390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1394:	604b      	str	r3, [r1, #4]
    1396:	2300      	movs	r3, #0
    1398:	f383 8811 	msr	BASEPRI, r3
    139c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13a0:	6893      	ldr	r3, [r2, #8]
}
    13a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop
    13a8:	20000870 	.word	0x20000870
    13ac:	00004ddc 	.word	0x00004ddc
    13b0:	e000ed00 	.word	0xe000ed00

000013b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13b4:	4912      	ldr	r1, [pc, #72]	; (1400 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    13bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    13c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13c6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    13c8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    13cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    13d0:	4f0c      	ldr	r7, [pc, #48]	; (1404 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    13d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    13d6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    13d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    13da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    13dc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    13de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    13e0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    13e2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    13e6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    13e8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    13ea:	f000 fa35 	bl	1858 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    13ee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    13f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    13f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    13fa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    13fe:	4770      	bx	lr
    ldr r1, =_kernel
    1400:	20000870 	.word	0x20000870
    ldr v4, =_SCS_ICSR
    1404:	e000ed04 	.word	0xe000ed04

00001408 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1408:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    140c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    140e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1412:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1416:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1418:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    141c:	2902      	cmp	r1, #2
    beq _oops
    141e:	d0ff      	beq.n	1420 <_oops>

00001420 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1420:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1422:	f002 fff5 	bl	4410 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1426:	bd01      	pop	{r0, pc}

00001428 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1428:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    142c:	9b00      	ldr	r3, [sp, #0]
    142e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1432:	490a      	ldr	r1, [pc, #40]	; (145c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1434:	9b01      	ldr	r3, [sp, #4]
    1436:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    143a:	9b02      	ldr	r3, [sp, #8]
    143c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1440:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1448:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    144c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1450:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1452:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1454:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1456:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	00004181 	.word	0x00004181

00001460 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1460:	4a09      	ldr	r2, [pc, #36]	; (1488 <z_check_thread_stack_fail+0x28>)
{
    1462:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1464:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1466:	b170      	cbz	r0, 1486 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1468:	f113 0f16 	cmn.w	r3, #22
    146c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    146e:	d005      	beq.n	147c <z_check_thread_stack_fail+0x1c>
    1470:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1474:	429a      	cmp	r2, r3
    1476:	d805      	bhi.n	1484 <z_check_thread_stack_fail+0x24>
    1478:	4283      	cmp	r3, r0
    147a:	d203      	bcs.n	1484 <z_check_thread_stack_fail+0x24>
		return 0;
    147c:	4281      	cmp	r1, r0
    147e:	bf28      	it	cs
    1480:	2000      	movcs	r0, #0
    1482:	4770      	bx	lr
    1484:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1486:	4770      	bx	lr
    1488:	20000870 	.word	0x20000870

0000148c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    148c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    148e:	4b09      	ldr	r3, [pc, #36]	; (14b4 <arch_switch_to_main_thread+0x28>)
    1490:	6098      	str	r0, [r3, #8]
{
    1492:	460d      	mov	r5, r1
    1494:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1496:	f000 f9df 	bl	1858 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    149a:	4620      	mov	r0, r4
    149c:	f385 8809 	msr	PSP, r5
    14a0:	2100      	movs	r1, #0
    14a2:	b663      	cpsie	if
    14a4:	f381 8811 	msr	BASEPRI, r1
    14a8:	f3bf 8f6f 	isb	sy
    14ac:	2200      	movs	r2, #0
    14ae:	2300      	movs	r3, #0
    14b0:	f002 fe66 	bl	4180 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14b4:	20000870 	.word	0x20000870

000014b8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    14b8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    14ba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    14bc:	4a0b      	ldr	r2, [pc, #44]	; (14ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    14be:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    14c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    14c2:	bf1e      	ittt	ne
	movne	r1, #0
    14c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    14c6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    14c8:	f003 fa01 	blne	48ce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    14cc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    14ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    14d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    14d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    14da:	4905      	ldr	r1, [pc, #20]	; (14f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    14dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    14de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    14e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    14e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    14e6:	4903      	ldr	r1, [pc, #12]	; (14f4 <_isr_wrapper+0x3c>)
	bx r1
    14e8:	4708      	bx	r1
    14ea:	0000      	.short	0x0000
	ldr r2, =_kernel
    14ec:	20000870 	.word	0x20000870
	ldr r1, =_sw_isr_table
    14f0:	00004b64 	.word	0x00004b64
	ldr r1, =z_arm_int_exit
    14f4:	000014f9 	.word	0x000014f9

000014f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    14f8:	4b04      	ldr	r3, [pc, #16]	; (150c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    14fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    14fc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    14fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1500:	d003      	beq.n	150a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1502:	4903      	ldr	r1, [pc, #12]	; (1510 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1508:	600a      	str	r2, [r1, #0]

0000150a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    150a:	4770      	bx	lr
	ldr r3, =_kernel
    150c:	20000870 	.word	0x20000870
	ldr r1, =_SCS_ICSR
    1510:	e000ed04 	.word	0xe000ed04

00001514 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1514:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1516:	4b1d      	ldr	r3, [pc, #116]	; (158c <mem_manage_fault+0x78>)
{
    1518:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    151a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    151e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1520:	0792      	lsls	r2, r2, #30
{
    1522:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1524:	d522      	bpl.n	156c <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1526:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    152a:	0614      	lsls	r4, r2, #24
    152c:	d51e      	bpl.n	156c <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    152e:	b119      	cbz	r1, 1538 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1536:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    153e:	4c13      	ldr	r4, [pc, #76]	; (158c <mem_manage_fault+0x78>)
    1540:	f012 0f10 	tst.w	r2, #16
    1544:	d115      	bne.n	1572 <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1548:	0799      	lsls	r1, r3, #30
    154a:	d412      	bmi.n	1572 <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    154c:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    154e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1550:	4a0e      	ldr	r2, [pc, #56]	; (158c <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1552:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1554:	bf42      	ittt	mi
    1556:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    1558:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    155c:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    155e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1560:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1564:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1566:	2300      	movs	r3, #0
    1568:	702b      	strb	r3, [r5, #0]

	return reason;
}
    156a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    156c:	f06f 0015 	mvn.w	r0, #21
    1570:	e7e2      	b.n	1538 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1572:	6863      	ldr	r3, [r4, #4]
    1574:	051a      	lsls	r2, r3, #20
    1576:	d5e9      	bpl.n	154c <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1578:	4631      	mov	r1, r6
    157a:	f7ff ff71 	bl	1460 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    157e:	2800      	cmp	r0, #0
    1580:	d0e4      	beq.n	154c <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1582:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1586:	2002      	movs	r0, #2
    1588:	e7e1      	b.n	154e <mem_manage_fault+0x3a>
    158a:	bf00      	nop
    158c:	e000ed00 	.word	0xe000ed00

00001590 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1590:	4b0d      	ldr	r3, [pc, #52]	; (15c8 <bus_fault.constprop.0+0x38>)
    1592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1598:	0592      	lsls	r2, r2, #22
    159a:	d508      	bpl.n	15ae <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    159c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    159e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15a0:	0412      	lsls	r2, r2, #16
    15a2:	d504      	bpl.n	15ae <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    15a4:	b118      	cbz	r0, 15ae <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    15ac:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    15b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15b2:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15b4:	4a04      	ldr	r2, [pc, #16]	; (15c8 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    15b6:	bf58      	it	pl
    15b8:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15ba:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    15bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15be:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    15c2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    15c4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    15c6:	4770      	bx	lr
    15c8:	e000ed00 	.word	0xe000ed00

000015cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15ce:	4b4a      	ldr	r3, [pc, #296]	; (16f8 <z_arm_fault+0x12c>)
    15d0:	685b      	ldr	r3, [r3, #4]
{
    15d2:	b08a      	sub	sp, #40	; 0x28
    15d4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    15da:	2600      	movs	r6, #0
    15dc:	f386 8811 	msr	BASEPRI, r6
    15e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    15e4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    15e8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    15ec:	d111      	bne.n	1612 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    15ee:	f002 000c 	and.w	r0, r2, #12
    15f2:	2808      	cmp	r0, #8
    15f4:	d00d      	beq.n	1612 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    15f6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    15f8:	bf4c      	ite	mi
    15fa:	460d      	movmi	r5, r1
			*nested_exc = true;
    15fc:	2601      	movpl	r6, #1
	*recoverable = false;
    15fe:	2200      	movs	r2, #0
	switch (fault) {
    1600:	3b03      	subs	r3, #3
	*recoverable = false;
    1602:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1606:	2b03      	cmp	r3, #3
    1608:	d84d      	bhi.n	16a6 <z_arm_fault+0xda>
    160a:	e8df f003 	tbb	[pc, r3]
    160e:	6504      	.short	0x6504
    1610:	6d69      	.short	0x6d69
		return NULL;
    1612:	4635      	mov	r5, r6
    1614:	e7f3      	b.n	15fe <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1616:	4b38      	ldr	r3, [pc, #224]	; (16f8 <z_arm_fault+0x12c>)
    1618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    161a:	0791      	lsls	r1, r2, #30
    161c:	d443      	bmi.n	16a6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1620:	2a00      	cmp	r2, #0
    1622:	db40      	blt.n	16a6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1626:	0052      	lsls	r2, r2, #1
    1628:	d53d      	bpl.n	16a6 <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    162a:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    162c:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    162e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1632:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1638:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    163c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    163e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1646:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    164c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1650:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1654:	4291      	cmp	r1, r2
    1656:	d009      	beq.n	166c <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    165a:	b2d2      	uxtb	r2, r2
    165c:	b142      	cbz	r2, 1670 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    165e:	f10d 0207 	add.w	r2, sp, #7
    1662:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1664:	4628      	mov	r0, r5
    1666:	f7ff ff55 	bl	1514 <mem_manage_fault>
    166a:	e00a      	b.n	1682 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    166c:	682c      	ldr	r4, [r5, #0]
    166e:	e01b      	b.n	16a8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1672:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1676:	d006      	beq.n	1686 <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    1678:	f10d 0107 	add.w	r1, sp, #7
    167c:	2001      	movs	r0, #1
    167e:	f7ff ff87 	bl	1590 <bus_fault.constprop.0>
    1682:	4604      	mov	r4, r0
    1684:	e010      	b.n	16a8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1688:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    168c:	d30b      	bcc.n	16a6 <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    168e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    169c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16a4:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    16a6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    16a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16ac:	b993      	cbnz	r3, 16d4 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    16ae:	2220      	movs	r2, #32
    16b0:	4629      	mov	r1, r5
    16b2:	a802      	add	r0, sp, #8
    16b4:	f002 fecb 	bl	444e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    16b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16ba:	b1be      	cbz	r6, 16ec <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    16bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    16c0:	b922      	cbnz	r2, 16cc <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    16c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    16c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    16ca:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    16cc:	a902      	add	r1, sp, #8
    16ce:	4620      	mov	r0, r4
    16d0:	f002 fe9c 	bl	440c <z_arm_fatal_error>
}
    16d4:	b00a      	add	sp, #40	; 0x28
    16d6:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    16d8:	f10d 0207 	add.w	r2, sp, #7
    16dc:	2100      	movs	r1, #0
    16de:	e7c1      	b.n	1664 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    16e0:	f10d 0107 	add.w	r1, sp, #7
    16e4:	2000      	movs	r0, #0
    16e6:	e7ca      	b.n	167e <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16e8:	4b03      	ldr	r3, [pc, #12]	; (16f8 <z_arm_fault+0x12c>)
    16ea:	e7d0      	b.n	168e <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    16ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    16f0:	f023 0301 	bic.w	r3, r3, #1
    16f4:	e7e9      	b.n	16ca <z_arm_fault+0xfe>
    16f6:	bf00      	nop
    16f8:	e000ed00 	.word	0xe000ed00

000016fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16fc:	4a02      	ldr	r2, [pc, #8]	; (1708 <z_arm_fault_init+0xc>)
    16fe:	6953      	ldr	r3, [r2, #20]
    1700:	f043 0310 	orr.w	r3, r3, #16
    1704:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1706:	4770      	bx	lr
    1708:	e000ed00 	.word	0xe000ed00

0000170c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    170c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1710:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1714:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1716:	4672      	mov	r2, lr
	bl z_arm_fault
    1718:	f7ff ff58 	bl	15cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    171c:	bd01      	pop	{r0, pc}
    171e:	bf00      	nop

00001720 <z_arm_interrupt_init>:
    1720:	4804      	ldr	r0, [pc, #16]	; (1734 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1722:	2300      	movs	r3, #0
    1724:	2120      	movs	r1, #32
    1726:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1728:	3301      	adds	r3, #1
    172a:	2b30      	cmp	r3, #48	; 0x30
    172c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1730:	d1f9      	bne.n	1726 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1732:	4770      	bx	lr
    1734:	e000e100 	.word	0xe000e100

00001738 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1738:	2000      	movs	r0, #0
    msr CONTROL, r0
    173a:	f380 8814 	msr	CONTROL, r0
    isb
    173e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1742:	f7ff fb6d 	bl	e20 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1746:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1748:	490d      	ldr	r1, [pc, #52]	; (1780 <__start+0x48>)
    str r0, [r1]
    174a:	6008      	str	r0, [r1, #0]
    dsb
    174c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1750:	480c      	ldr	r0, [pc, #48]	; (1784 <__start+0x4c>)
    msr msp, r0
    1752:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1756:	f000 f82b 	bl	17b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    175a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    175c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1760:	4809      	ldr	r0, [pc, #36]	; (1788 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1762:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1766:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1768:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    176c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1770:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1772:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1774:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1778:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    177c:	f7ff fde4 	bl	1348 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1780:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1784:	20001880 	.word	0x20001880
    ldr r0, =z_interrupt_stacks
    1788:	20000ac0 	.word	0x20000ac0

0000178c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    178c:	4907      	ldr	r1, [pc, #28]	; (17ac <z_arm_clear_arm_mpu_config+0x20>)
    178e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1792:	2300      	movs	r3, #0
	int num_regions =
    1794:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1798:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    179a:	4293      	cmp	r3, r2
    179c:	db00      	blt.n	17a0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    179e:	4770      	bx	lr
  MPU->RNR = rnr;
    17a0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    17a4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    17a8:	3301      	adds	r3, #1
    17aa:	e7f6      	b.n	179a <z_arm_clear_arm_mpu_config+0xe>
    17ac:	e000ed00 	.word	0xe000ed00

000017b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    17b0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    17b2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    17b4:	2300      	movs	r3, #0
    17b6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    17ba:	f7ff ffe7 	bl	178c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    17be:	4b14      	ldr	r3, [pc, #80]	; (1810 <z_arm_init_arch_hw_at_boot+0x60>)
    17c0:	f04f 32ff 	mov.w	r2, #4294967295
    17c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    17c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    17cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    17d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    17d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    17d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    17dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    17e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    17e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    17e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    17ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    17f0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    17f4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    17f8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    17fc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1800:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1804:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    180e:	bd08      	pop	{r3, pc}
    1810:	e000e100 	.word	0xe000e100

00001814 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1814:	4b08      	ldr	r3, [pc, #32]	; (1838 <z_impl_k_thread_abort+0x24>)
    1816:	689b      	ldr	r3, [r3, #8]
    1818:	4283      	cmp	r3, r0
    181a:	d10b      	bne.n	1834 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    181c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1820:	b143      	cbz	r3, 1834 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1822:	4b06      	ldr	r3, [pc, #24]	; (183c <z_impl_k_thread_abort+0x28>)
    1824:	685a      	ldr	r2, [r3, #4]
    1826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    182a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    182e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1832:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1834:	f002 b8e2 	b.w	39fc <z_thread_abort>
    1838:	20000870 	.word	0x20000870
    183c:	e000ed00 	.word	0xe000ed00

00001840 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1840:	4b02      	ldr	r3, [pc, #8]	; (184c <z_arm_configure_static_mpu_regions+0xc>)
    1842:	4a03      	ldr	r2, [pc, #12]	; (1850 <z_arm_configure_static_mpu_regions+0x10>)
    1844:	4803      	ldr	r0, [pc, #12]	; (1854 <z_arm_configure_static_mpu_regions+0x14>)
    1846:	2101      	movs	r1, #1
    1848:	f000 b870 	b.w	192c <arm_core_mpu_configure_static_mpu_regions>
    184c:	20040000 	.word	0x20040000
    1850:	20000000 	.word	0x20000000
    1854:	00004d34 	.word	0x00004d34

00001858 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1858:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    185a:	4b05      	ldr	r3, [pc, #20]	; (1870 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    185c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    185e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1860:	4a04      	ldr	r2, [pc, #16]	; (1874 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1862:	2140      	movs	r1, #64	; 0x40
    1864:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1868:	4618      	mov	r0, r3
    186a:	2101      	movs	r1, #1
    186c:	f000 b868 	b.w	1940 <arm_core_mpu_configure_dynamic_mpu_regions>
    1870:	200007d0 	.word	0x200007d0
    1874:	150b0000 	.word	0x150b0000

00001878 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1878:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    187a:	4e20      	ldr	r6, [pc, #128]	; (18fc <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    187c:	2500      	movs	r5, #0
    187e:	428d      	cmp	r5, r1
    1880:	da39      	bge.n	18f6 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    1882:	6844      	ldr	r4, [r0, #4]
    1884:	b374      	cbz	r4, 18e4 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1886:	b153      	cbz	r3, 189e <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1888:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    188c:	ea14 0f0c 	tst.w	r4, ip
    1890:	d12f      	bne.n	18f2 <mpu_configure_regions+0x7a>
		&&
    1892:	2c1f      	cmp	r4, #31
    1894:	d92d      	bls.n	18f2 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    1896:	6807      	ldr	r7, [r0, #0]
		&&
    1898:	ea1c 0f07 	tst.w	ip, r7
    189c:	d129      	bne.n	18f2 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    189e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    18a0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    18a2:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    18a6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    18aa:	d91e      	bls.n	18ea <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    18ac:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    18b0:	d81d      	bhi.n	18ee <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    18b2:	3c01      	subs	r4, #1
    18b4:	fab4 f484 	clz	r4, r4
    18b8:	f1c4 041f 	rsb	r4, r4, #31
    18bc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    18be:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    18c2:	ea4c 0c04 	orr.w	ip, ip, r4
    18c6:	d814      	bhi.n	18f2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18c8:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    18cc:	4314      	orrs	r4, r2
    18ce:	f044 0410 	orr.w	r4, r4, #16
    18d2:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18d6:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    18da:	f04c 0401 	orr.w	r4, ip, #1
    18de:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    18e2:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    18e4:	3501      	adds	r5, #1
    18e6:	300c      	adds	r0, #12
    18e8:	e7c9      	b.n	187e <mpu_configure_regions+0x6>
		return REGION_32B;
    18ea:	2408      	movs	r4, #8
    18ec:	e7e7      	b.n	18be <mpu_configure_regions+0x46>
		return REGION_4G;
    18ee:	243e      	movs	r4, #62	; 0x3e
    18f0:	e7e5      	b.n	18be <mpu_configure_regions+0x46>
			return -EINVAL;
    18f2:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    18f6:	4610      	mov	r0, r2
    18f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18fa:	bf00      	nop
    18fc:	e000ed00 	.word	0xe000ed00

00001900 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <arm_core_mpu_enable+0x14>)
    1902:	2205      	movs	r2, #5
    1904:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    190c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1910:	4770      	bx	lr
    1912:	bf00      	nop
    1914:	e000ed00 	.word	0xe000ed00

00001918 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1918:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    191c:	4b02      	ldr	r3, [pc, #8]	; (1928 <arm_core_mpu_disable+0x10>)
    191e:	2200      	movs	r2, #0
    1920:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	e000ed00 	.word	0xe000ed00

0000192c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    192c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    192e:	4c03      	ldr	r4, [pc, #12]	; (193c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1930:	2301      	movs	r3, #1
    1932:	7822      	ldrb	r2, [r4, #0]
    1934:	f7ff ffa0 	bl	1878 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1938:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    193a:	bd10      	pop	{r4, pc}
    193c:	20000a80 	.word	0x20000a80

00001940 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    1940:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1942:	4a09      	ldr	r2, [pc, #36]	; (1968 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1944:	2300      	movs	r3, #0
    1946:	7812      	ldrb	r2, [r2, #0]
    1948:	f7ff ff96 	bl	1878 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    194c:	f110 0f16 	cmn.w	r0, #22
    1950:	d002      	beq.n	1958 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1952:	4a06      	ldr	r2, [pc, #24]	; (196c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1954:	2807      	cmp	r0, #7
    1956:	dd00      	ble.n	195a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1958:	bd08      	pop	{r3, pc}
    195a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    195e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1962:	3001      	adds	r0, #1
    1964:	e7f6      	b.n	1954 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1966:	bf00      	nop
    1968:	20000a80 	.word	0x20000a80
    196c:	e000ed00 	.word	0xe000ed00

00001970 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1970:	4914      	ldr	r1, [pc, #80]	; (19c4 <z_arm_mpu_init+0x54>)
    1972:	6808      	ldr	r0, [r1, #0]
    1974:	2808      	cmp	r0, #8
{
    1976:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1978:	d821      	bhi.n	19be <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    197a:	f7ff ffcd 	bl	1918 <arm_core_mpu_disable>
    197e:	4c12      	ldr	r4, [pc, #72]	; (19c8 <z_arm_mpu_init+0x58>)
    1980:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1982:	2200      	movs	r2, #0
    1984:	4290      	cmp	r0, r2
    1986:	f101 010c 	add.w	r1, r1, #12
    198a:	d105      	bne.n	1998 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    198c:	4b0f      	ldr	r3, [pc, #60]	; (19cc <z_arm_mpu_init+0x5c>)
    198e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1990:	f7ff ffb6 	bl	1900 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1994:	2000      	movs	r0, #0
}
    1996:	bd10      	pop	{r4, pc}
    1998:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    199c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    19a0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    19a4:	4313      	orrs	r3, r2
    19a6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    19aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    19ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    19b2:	f043 0301 	orr.w	r3, r3, #1
    19b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    19ba:	3201      	adds	r2, #1
    19bc:	e7e2      	b.n	1984 <z_arm_mpu_init+0x14>
		return -1;
    19be:	f04f 30ff 	mov.w	r0, #4294967295
    19c2:	e7e8      	b.n	1996 <z_arm_mpu_init+0x26>
    19c4:	00004d40 	.word	0x00004d40
    19c8:	e000ed00 	.word	0xe000ed00
    19cc:	20000a80 	.word	0x20000a80

000019d0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    19d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    19d2:	f04f 0320 	mov.w	r3, #32
    19d6:	f3ef 8011 	mrs	r0, BASEPRI
    19da:	f383 8812 	msr	BASEPRI_MAX, r3
    19de:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    19e2:	4a11      	ldr	r2, [pc, #68]	; (1a28 <nordicsemi_nrf52_init+0x58>)
    19e4:	2301      	movs	r3, #1
    19e6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    19ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    19ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    19f2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    19f6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    19fa:	2c08      	cmp	r4, #8
    19fc:	d108      	bne.n	1a10 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    19fe:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    1a02:	2905      	cmp	r1, #5
    1a04:	d804      	bhi.n	1a10 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1a06:	4c09      	ldr	r4, [pc, #36]	; (1a2c <nordicsemi_nrf52_init+0x5c>)
    1a08:	5c61      	ldrb	r1, [r4, r1]
    1a0a:	b109      	cbz	r1, 1a10 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1a0c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a14:	2201      	movs	r2, #1
    1a16:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1a1a:	f380 8811 	msr	BASEPRI, r0
    1a1e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a22:	2000      	movs	r0, #0
    1a24:	bd10      	pop	{r4, pc}
    1a26:	bf00      	nop
    1a28:	4001e000 	.word	0x4001e000
    1a2c:	00004f11 	.word	0x00004f11

00001a30 <sys_arch_reboot>:
    *p_gpregret = val;
    1a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a34:	b2c0      	uxtb	r0, r0
    1a36:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1a3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a3e:	4905      	ldr	r1, [pc, #20]	; (1a54 <sys_arch_reboot+0x24>)
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <sys_arch_reboot+0x28>)
    1a42:	68ca      	ldr	r2, [r1, #12]
    1a44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1a48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a4a:	60cb      	str	r3, [r1, #12]
    1a4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a50:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1a52:	e7fd      	b.n	1a50 <sys_arch_reboot+0x20>
    1a54:	e000ed00 	.word	0xe000ed00
    1a58:	05fa0004 	.word	0x05fa0004

00001a5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a5c:	b120      	cbz	r0, 1a68 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a5e:	4b03      	ldr	r3, [pc, #12]	; (1a6c <arch_busy_wait+0x10>)
    1a60:	0180      	lsls	r0, r0, #6
    1a62:	f043 0301 	orr.w	r3, r3, #1
    1a66:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a68:	4770      	bx	lr
    1a6a:	bf00      	nop
    1a6c:	00004d00 	.word	0x00004d00

00001a70 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1a70:	4b08      	ldr	r3, [pc, #32]	; (1a94 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a72:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1a74:	1ac3      	subs	r3, r0, r3
{
    1a76:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1a78:	4907      	ldr	r1, [pc, #28]	; (1a98 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1a7a:	109b      	asrs	r3, r3, #2
{
    1a7c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1a7e:	4359      	muls	r1, r3
    1a80:	4806      	ldr	r0, [pc, #24]	; (1a9c <onoff_stop+0x2c>)
    1a82:	2240      	movs	r2, #64	; 0x40
    1a84:	f002 fd25 	bl	44d2 <stop>
	notify(mgr, res);
    1a88:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1a8a:	4601      	mov	r1, r0
	notify(mgr, res);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1a92:	4718      	bx	r3
    1a94:	200007f0 	.word	0x200007f0
    1a98:	b6db6db7 	.word	0xb6db6db7
    1a9c:	00004b1c 	.word	0x00004b1c

00001aa0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1aa2:	4c0c      	ldr	r4, [pc, #48]	; (1ad4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1aa4:	4a0c      	ldr	r2, [pc, #48]	; (1ad8 <onoff_start+0x38>)
    1aa6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1aa8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1aaa:	9300      	str	r3, [sp, #0]
{
    1aac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1aae:	460b      	mov	r3, r1
    1ab0:	490a      	ldr	r1, [pc, #40]	; (1adc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1ab2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ab4:	4361      	muls	r1, r4
{
    1ab6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ab8:	4809      	ldr	r0, [pc, #36]	; (1ae0 <onoff_start+0x40>)
    1aba:	f002 fd37 	bl	452c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1abe:	1e01      	subs	r1, r0, #0
    1ac0:	da05      	bge.n	1ace <onoff_start+0x2e>
		notify(mgr, err);
    1ac2:	4630      	mov	r0, r6
    1ac4:	462b      	mov	r3, r5
	}
}
    1ac6:	b002      	add	sp, #8
    1ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1acc:	4718      	bx	r3
}
    1ace:	b002      	add	sp, #8
    1ad0:	bd70      	pop	{r4, r5, r6, pc}
    1ad2:	bf00      	nop
    1ad4:	200007f0 	.word	0x200007f0
    1ad8:	00004599 	.word	0x00004599
    1adc:	b6db6db7 	.word	0xb6db6db7
    1ae0:	00004b1c 	.word	0x00004b1c

00001ae4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1ae4:	2200      	movs	r2, #0
{
    1ae6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1ae8:	2101      	movs	r1, #1
{
    1aea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1aec:	4610      	mov	r0, r2
    1aee:	f7ff fc0f 	bl	1310 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1af2:	480f      	ldr	r0, [pc, #60]	; (1b30 <clk_init+0x4c>)
    1af4:	f000 fe18 	bl	2728 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1af8:	4b0e      	ldr	r3, [pc, #56]	; (1b34 <clk_init+0x50>)
    1afa:	4298      	cmp	r0, r3
    1afc:	d115      	bne.n	1b2a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1afe:	f002 fdc5 	bl	468c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1b02:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b04:	490c      	ldr	r1, [pc, #48]	; (1b38 <clk_init+0x54>)
    1b06:	4630      	mov	r0, r6
    1b08:	f002 fb94 	bl	4234 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1b0c:	2800      	cmp	r0, #0
    1b0e:	db0b      	blt.n	1b28 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b10:	2501      	movs	r5, #1
    1b12:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1b14:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b16:	4908      	ldr	r1, [pc, #32]	; (1b38 <clk_init+0x54>)
    1b18:	f104 001c 	add.w	r0, r4, #28
    1b1c:	f002 fb8a 	bl	4234 <onoff_manager_init>
		if (err < 0) {
    1b20:	2800      	cmp	r0, #0
    1b22:	db01      	blt.n	1b28 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b24:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1b26:	2000      	movs	r0, #0
}
    1b28:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1b2a:	f06f 0004 	mvn.w	r0, #4
    1b2e:	e7fb      	b.n	1b28 <clk_init+0x44>
    1b30:	00001b71 	.word	0x00001b71
    1b34:	0bad0000 	.word	0x0bad0000
    1b38:	00004d60 	.word	0x00004d60

00001b3c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1b3c:	b570      	push	{r4, r5, r6, lr}
    1b3e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1b40:	230c      	movs	r3, #12
    1b42:	4809      	ldr	r0, [pc, #36]	; (1b68 <clkstarted_handle.constprop.0+0x2c>)
    1b44:	434b      	muls	r3, r1
    1b46:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1b48:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1b4c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1b4e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1b50:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1b52:	4418      	add	r0, r3
    1b54:	f002 fcaa 	bl	44ac <set_on_state>
	if (callback) {
    1b58:	b12d      	cbz	r5, 1b66 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b5a:	4632      	mov	r2, r6
    1b5c:	462b      	mov	r3, r5
    1b5e:	4803      	ldr	r0, [pc, #12]	; (1b6c <clkstarted_handle.constprop.0+0x30>)
}
    1b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b64:	4718      	bx	r3
}
    1b66:	bd70      	pop	{r4, r5, r6, pc}
    1b68:	200007f0 	.word	0x200007f0
    1b6c:	00004b1c 	.word	0x00004b1c

00001b70 <clock_event_handler>:
	switch (event) {
    1b70:	b110      	cbz	r0, 1b78 <clock_event_handler+0x8>
    1b72:	2801      	cmp	r0, #1
    1b74:	d004      	beq.n	1b80 <clock_event_handler+0x10>
    1b76:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b78:	4b03      	ldr	r3, [pc, #12]	; (1b88 <clock_event_handler+0x18>)
    1b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b7c:	075b      	lsls	r3, r3, #29
    1b7e:	d101      	bne.n	1b84 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b80:	f7ff bfdc 	b.w	1b3c <clkstarted_handle.constprop.0>
}
    1b84:	4770      	bx	lr
    1b86:	bf00      	nop
    1b88:	200007f0 	.word	0x200007f0

00001b8c <generic_hfclk_start>:
{
    1b8c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1b8e:	f04f 0320 	mov.w	r3, #32
    1b92:	f3ef 8111 	mrs	r1, BASEPRI
    1b96:	f383 8812 	msr	BASEPRI_MAX, r3
    1b9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b9e:	4a12      	ldr	r2, [pc, #72]	; (1be8 <generic_hfclk_start+0x5c>)
    1ba0:	6813      	ldr	r3, [r2, #0]
    1ba2:	f043 0002 	orr.w	r0, r3, #2
    1ba6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ba8:	07da      	lsls	r2, r3, #31
    1baa:	d408      	bmi.n	1bbe <generic_hfclk_start+0x32>
	__asm__ volatile(
    1bac:	f381 8811 	msr	BASEPRI, r1
    1bb0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1bb4:	2001      	movs	r0, #1
}
    1bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1bba:	f002 bd74 	b.w	46a6 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bc2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1bc6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1bca:	07d3      	lsls	r3, r2, #31
    1bcc:	d5ee      	bpl.n	1bac <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1bce:	4807      	ldr	r0, [pc, #28]	; (1bec <generic_hfclk_start+0x60>)
    1bd0:	f002 fc6c 	bl	44ac <set_on_state>
    1bd4:	f381 8811 	msr	BASEPRI, r1
    1bd8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1bdc:	2000      	movs	r0, #0
}
    1bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1be2:	f7ff bfab 	b.w	1b3c <clkstarted_handle.constprop.0>
    1be6:	bf00      	nop
    1be8:	20000840 	.word	0x20000840
    1bec:	20000830 	.word	0x20000830

00001bf0 <api_blocking_start>:
{
    1bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bf2:	2200      	movs	r2, #0
    1bf4:	2301      	movs	r3, #1
    1bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bfa:	4a09      	ldr	r2, [pc, #36]	; (1c20 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bfc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1c00:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1c02:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1c06:	f002 fcc0 	bl	458a <api_start>
	if (err < 0) {
    1c0a:	2800      	cmp	r0, #0
    1c0c:	db05      	blt.n	1c1a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1c12:	2300      	movs	r3, #0
    1c14:	4668      	mov	r0, sp
    1c16:	f001 fbe1 	bl	33dc <z_impl_k_sem_take>
}
    1c1a:	b005      	add	sp, #20
    1c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c20:	000045b7 	.word	0x000045b7

00001c24 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c24:	4b09      	ldr	r3, [pc, #36]	; (1c4c <generic_hfclk_stop+0x28>)
    1c26:	f3bf 8f5b 	dmb	ish
    1c2a:	e853 2f00 	ldrex	r2, [r3]
    1c2e:	f022 0102 	bic.w	r1, r2, #2
    1c32:	e843 1000 	strex	r0, r1, [r3]
    1c36:	2800      	cmp	r0, #0
    1c38:	d1f7      	bne.n	1c2a <generic_hfclk_stop+0x6>
    1c3a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1c3e:	07d3      	lsls	r3, r2, #31
    1c40:	d402      	bmi.n	1c48 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1c42:	2001      	movs	r0, #1
    1c44:	f002 bd6b 	b.w	471e <nrfx_clock_stop>
}
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop
    1c4c:	20000840 	.word	0x20000840

00001c50 <z_nrf_clock_control_lf_on>:
{
    1c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c54:	4938      	ldr	r1, [pc, #224]	; (1d38 <z_nrf_clock_control_lf_on+0xe8>)
    1c56:	f3bf 8f5b 	dmb	ish
    1c5a:	4607      	mov	r7, r0
    1c5c:	2201      	movs	r2, #1
    1c5e:	e851 3f00 	ldrex	r3, [r1]
    1c62:	e841 2000 	strex	r0, r2, [r1]
    1c66:	2800      	cmp	r0, #0
    1c68:	d1f9      	bne.n	1c5e <z_nrf_clock_control_lf_on+0xe>
    1c6a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c6e:	b933      	cbnz	r3, 1c7e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c70:	4932      	ldr	r1, [pc, #200]	; (1d3c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1c72:	4833      	ldr	r0, [pc, #204]	; (1d40 <z_nrf_clock_control_lf_on+0xf0>)
    1c74:	604b      	str	r3, [r1, #4]
    1c76:	60cb      	str	r3, [r1, #12]
    1c78:	608a      	str	r2, [r1, #8]
    1c7a:	f002 faee 	bl	425a <onoff_request>
	switch (start_mode) {
    1c7e:	1e7b      	subs	r3, r7, #1
    1c80:	2b01      	cmp	r3, #1
    1c82:	d82b      	bhi.n	1cdc <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c84:	2f01      	cmp	r7, #1
    1c86:	d107      	bne.n	1c98 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1c90:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1c94:	2b01      	cmp	r3, #1
    1c96:	d021      	beq.n	1cdc <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c98:	f002 fe13 	bl	48c2 <k_is_in_isr>
    1c9c:	4605      	mov	r5, r0
    1c9e:	b9f8      	cbnz	r0, 1ce0 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    1ca0:	4b28      	ldr	r3, [pc, #160]	; (1d44 <z_nrf_clock_control_lf_on+0xf4>)
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	b1e3      	cbz	r3, 1ce0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1caa:	2202      	movs	r2, #2
    1cac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1cb0:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cb2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1d48 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1cb6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1cba:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1cbe:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1cc2:	03d2      	lsls	r2, r2, #15
    1cc4:	d516      	bpl.n	1cf4 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1cc6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1cca:	2b01      	cmp	r3, #1
    1ccc:	d001      	beq.n	1cd2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1cce:	2f01      	cmp	r7, #1
    1cd0:	d110      	bne.n	1cf4 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1cd2:	b35d      	cbz	r5, 1d2c <z_nrf_clock_control_lf_on+0xdc>
    1cd4:	f386 8811 	msr	BASEPRI, r6
    1cd8:	f3bf 8f6f 	isb	sy
}
    1cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1ce0:	f04f 0320 	mov.w	r3, #32
    1ce4:	f3ef 8611 	mrs	r6, BASEPRI
    1ce8:	f383 8812 	msr	BASEPRI_MAX, r3
    1cec:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1cf0:	2501      	movs	r5, #1
    1cf2:	e7de      	b.n	1cb2 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1cf4:	b1ad      	cbz	r5, 1d22 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1cf6:	4630      	mov	r0, r6
    1cf8:	f7ff fae4 	bl	12c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1cfc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1d00:	2b00      	cmp	r3, #0
    1d02:	d1da      	bne.n	1cba <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d04:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1d08:	2a00      	cmp	r2, #0
    1d0a:	d0d6      	beq.n	1cba <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d0c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d14:	2301      	movs	r3, #1
    1d16:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1d1a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d1e:	60a3      	str	r3, [r4, #8]
}
    1d20:	e7cb      	b.n	1cba <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1d22:	2100      	movs	r1, #0
    1d24:	2021      	movs	r0, #33	; 0x21
    1d26:	f001 fe49 	bl	39bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1d2a:	e7e7      	b.n	1cfc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d30:	2202      	movs	r2, #2
    1d32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1d36:	e7d1      	b.n	1cdc <z_nrf_clock_control_lf_on+0x8c>
    1d38:	200007ec 	.word	0x200007ec
    1d3c:	200007dc 	.word	0x200007dc
    1d40:	2000080c 	.word	0x2000080c
    1d44:	20000a81 	.word	0x20000a81
    1d48:	e000e100 	.word	0xe000e100

00001d4c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1d4c:	b530      	push	{r4, r5, lr}
	return port->config;
    1d4e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1d50:	7b05      	ldrb	r5, [r0, #12]
    1d52:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1d56:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1d5a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1d5c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1d60:	d105      	bne.n	1d6e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1d62:	4620      	mov	r0, r4
    1d64:	f000 ff62 	bl	2c2c <nrfx_gpiote_trigger_disable>

		return 0;
    1d68:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1d6a:	b005      	add	sp, #20
    1d6c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d6e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1d70:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d74:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1d78:	d114      	bne.n	1da4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d7e:	bf0c      	ite	eq
    1d80:	2304      	moveq	r3, #4
    1d82:	2305      	movne	r3, #5
    1d84:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d88:	2300      	movs	r3, #0
    1d8a:	4619      	mov	r1, r3
    1d8c:	aa02      	add	r2, sp, #8
    1d8e:	4620      	mov	r0, r4
    1d90:	f000 fd8a 	bl	28a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d94:	4b1f      	ldr	r3, [pc, #124]	; (1e14 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1d96:	4298      	cmp	r0, r3
    1d98:	d139      	bne.n	1e0e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1d9a:	2101      	movs	r1, #1
    1d9c:	4620      	mov	r0, r4
    1d9e:	f000 fefd 	bl	2b9c <nrfx_gpiote_trigger_enable>
	return 0;
    1da2:	e7e1      	b.n	1d68 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1da4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1da8:	d026      	beq.n	1df8 <gpio_nrfx_pin_interrupt_configure+0xac>
    1daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1dae:	bf14      	ite	ne
    1db0:	2301      	movne	r3, #1
    1db2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1db4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1db8:	6883      	ldr	r3, [r0, #8]
    1dba:	40cb      	lsrs	r3, r1
    1dbc:	07d9      	lsls	r1, r3, #31
    1dbe:	d4e3      	bmi.n	1d88 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1dc0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1dc4:	d1e0      	bne.n	1d88 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1dc6:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    1dc8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1dca:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    1dce:	4a12      	ldr	r2, [pc, #72]	; (1e18 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1dd0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    1dd4:	bf18      	it	ne
    1dd6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1dde:	07db      	lsls	r3, r3, #31
    1de0:	d4d2      	bmi.n	1d88 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1de2:	f10d 0507 	add.w	r5, sp, #7
    1de6:	4629      	mov	r1, r5
    1de8:	4620      	mov	r0, r4
    1dea:	f000 fe83 	bl	2af4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1dee:	4b0b      	ldr	r3, [pc, #44]	; (1e1c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    1df0:	4298      	cmp	r0, r3
    1df2:	d003      	beq.n	1dfc <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    1df4:	9503      	str	r5, [sp, #12]
    1df6:	e7c7      	b.n	1d88 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1df8:	2303      	movs	r3, #3
    1dfa:	e7db      	b.n	1db4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1dfc:	4628      	mov	r0, r5
    1dfe:	f000 fec7 	bl	2b90 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1e02:	4b04      	ldr	r3, [pc, #16]	; (1e14 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1e04:	4298      	cmp	r0, r3
    1e06:	d0f5      	beq.n	1df4 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    1e08:	f06f 000b 	mvn.w	r0, #11
    1e0c:	e7ad      	b.n	1d6a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1e0e:	f06f 0015 	mvn.w	r0, #21
    1e12:	e7aa      	b.n	1d6a <gpio_nrfx_pin_interrupt_configure+0x1e>
    1e14:	0bad0000 	.word	0x0bad0000
    1e18:	50000300 	.word	0x50000300
    1e1c:	0bad0004 	.word	0x0bad0004

00001e20 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1e20:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1e22:	f000 fea5 	bl	2b70 <nrfx_gpiote_is_init>
    1e26:	4604      	mov	r4, r0
    1e28:	b968      	cbnz	r0, 1e46 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1e2a:	f000 fe79 	bl	2b20 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1e2e:	4b08      	ldr	r3, [pc, #32]	; (1e50 <gpio_nrfx_init+0x30>)
    1e30:	4298      	cmp	r0, r3
    1e32:	d10a      	bne.n	1e4a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1e34:	4807      	ldr	r0, [pc, #28]	; (1e54 <gpio_nrfx_init+0x34>)
    1e36:	4621      	mov	r1, r4
    1e38:	f000 fe56 	bl	2ae8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1e3c:	4622      	mov	r2, r4
    1e3e:	2105      	movs	r1, #5
    1e40:	2006      	movs	r0, #6
    1e42:	f7ff fa65 	bl	1310 <z_arm_irq_priority_set>
		return 0;
    1e46:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1e48:	bd10      	pop	{r4, pc}
		return -EIO;
    1e4a:	f06f 0004 	mvn.w	r0, #4
    1e4e:	e7fb      	b.n	1e48 <gpio_nrfx_init+0x28>
    1e50:	0bad0000 	.word	0x0bad0000
    1e54:	00001e59 	.word	0x00001e59

00001e58 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e58:	0942      	lsrs	r2, r0, #5
{
    1e5a:	b570      	push	{r4, r5, r6, lr}
    1e5c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e5e:	d002      	beq.n	1e66 <nrfx_gpio_handler+0xe>
    1e60:	2a01      	cmp	r2, #1
    1e62:	d017      	beq.n	1e94 <nrfx_gpio_handler+0x3c>
}
    1e64:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e66:	4e0d      	ldr	r6, [pc, #52]	; (1e9c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    1e68:	6932      	ldr	r2, [r6, #16]
    1e6a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1e6c:	2900      	cmp	r1, #0
    1e6e:	d0f9      	beq.n	1e64 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    1e70:	f003 031f 	and.w	r3, r3, #31
    1e74:	2501      	movs	r5, #1
    1e76:	680c      	ldr	r4, [r1, #0]
    1e78:	409d      	lsls	r5, r3
    1e7a:	2900      	cmp	r1, #0
    1e7c:	d0f2      	beq.n	1e64 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    1e7e:	688a      	ldr	r2, [r1, #8]
    1e80:	402a      	ands	r2, r5
    1e82:	d002      	beq.n	1e8a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1e84:	684b      	ldr	r3, [r1, #4]
    1e86:	4630      	mov	r0, r6
    1e88:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1e8a:	b12c      	cbz	r4, 1e98 <nrfx_gpio_handler+0x40>
    1e8c:	6823      	ldr	r3, [r4, #0]
    1e8e:	4621      	mov	r1, r4
    1e90:	461c      	mov	r4, r3
    1e92:	e7f2      	b.n	1e7a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1e94:	4e02      	ldr	r6, [pc, #8]	; (1ea0 <nrfx_gpio_handler+0x48>)
    1e96:	e7e7      	b.n	1e68 <nrfx_gpio_handler+0x10>
    1e98:	4623      	mov	r3, r4
    1e9a:	e7f8      	b.n	1e8e <nrfx_gpio_handler+0x36>
    1e9c:	00004b4c 	.word	0x00004b4c
    1ea0:	00004b34 	.word	0x00004b34

00001ea4 <gpio_nrfx_pin_configure>:
{
    1ea4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    1ea8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1eaa:	7b3b      	ldrb	r3, [r7, #12]
    1eac:	f001 051f 	and.w	r5, r1, #31
    1eb0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    1eb4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1eb6:	4628      	mov	r0, r5
    1eb8:	f10d 0103 	add.w	r1, sp, #3
{
    1ebc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ebe:	f000 fe19 	bl	2af4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1ec2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ec6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1ec8:	d10b      	bne.n	1ee2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1eca:	4628      	mov	r0, r5
    1ecc:	f000 fed6 	bl	2c7c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1ed0:	4b3d      	ldr	r3, [pc, #244]	; (1fc8 <gpio_nrfx_pin_configure+0x124>)
    1ed2:	4598      	cmp	r8, r3
    1ed4:	d103      	bne.n	1ede <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    1ed6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1eda:	f000 fe53 	bl	2b84 <nrfx_gpiote_channel_free>
		return 0;
    1ede:	2000      	movs	r0, #0
    1ee0:	e00c      	b.n	1efc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1ee2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1ee4:	4619      	mov	r1, r3
    1ee6:	aa02      	add	r2, sp, #8
    1ee8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1eea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1eee:	f000 fcdb 	bl	28a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ef2:	4b35      	ldr	r3, [pc, #212]	; (1fc8 <gpio_nrfx_pin_configure+0x124>)
    1ef4:	4298      	cmp	r0, r3
    1ef6:	d004      	beq.n	1f02 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    1ef8:	f06f 0015 	mvn.w	r0, #21
}
    1efc:	b004      	add	sp, #16
    1efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    1f02:	4580      	cmp	r8, r0
    1f04:	d103      	bne.n	1f0e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    1f06:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1f0a:	f000 fe3b 	bl	2b84 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1f0e:	03a3      	lsls	r3, r4, #14
    1f10:	d54b      	bpl.n	1faa <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f12:	f240 3306 	movw	r3, #774	; 0x306
    1f16:	4023      	ands	r3, r4
    1f18:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    1f1c:	d019      	beq.n	1f52 <gpio_nrfx_pin_configure+0xae>
    1f1e:	d80c      	bhi.n	1f3a <gpio_nrfx_pin_configure+0x96>
    1f20:	2b06      	cmp	r3, #6
    1f22:	d017      	beq.n	1f54 <gpio_nrfx_pin_configure+0xb0>
    1f24:	d804      	bhi.n	1f30 <gpio_nrfx_pin_configure+0x8c>
    1f26:	b1ab      	cbz	r3, 1f54 <gpio_nrfx_pin_configure+0xb0>
    1f28:	2b02      	cmp	r3, #2
    1f2a:	d1e5      	bne.n	1ef8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    1f2c:	2304      	movs	r3, #4
    1f2e:	e011      	b.n	1f54 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1f34:	d1e0      	bne.n	1ef8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    1f36:	2301      	movs	r3, #1
    1f38:	e00c      	b.n	1f54 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f3a:	f240 2202 	movw	r2, #514	; 0x202
    1f3e:	4293      	cmp	r3, r2
    1f40:	d027      	beq.n	1f92 <gpio_nrfx_pin_configure+0xee>
    1f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1f46:	d026      	beq.n	1f96 <gpio_nrfx_pin_configure+0xf2>
    1f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1f4c:	d1d4      	bne.n	1ef8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    1f4e:	2302      	movs	r3, #2
    1f50:	e000      	b.n	1f54 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    1f52:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    1f54:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1f58:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1f5c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1f60:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1f62:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    1f66:	bf54      	ite	pl
    1f68:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1f6c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1f6e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1f70:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1f74:	d511      	bpl.n	1f9a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1f76:	687a      	ldr	r2, [r7, #4]
    1f78:	2301      	movs	r3, #1
    1f7a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1f7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1f80:	2200      	movs	r2, #0
    1f82:	a901      	add	r1, sp, #4
    1f84:	4628      	mov	r0, r5
    1f86:	f000 fd3d 	bl	2a04 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1f8a:	4b0f      	ldr	r3, [pc, #60]	; (1fc8 <gpio_nrfx_pin_configure+0x124>)
    1f8c:	4298      	cmp	r0, r3
    1f8e:	d0a6      	beq.n	1ede <gpio_nrfx_pin_configure+0x3a>
    1f90:	e7b2      	b.n	1ef8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    1f92:	2305      	movs	r3, #5
    1f94:	e7de      	b.n	1f54 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1f96:	2303      	movs	r3, #3
    1f98:	e7dc      	b.n	1f54 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1f9a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1f9c:	bf41      	itttt	mi
    1f9e:	2301      	movmi	r3, #1
    1fa0:	687a      	ldrmi	r2, [r7, #4]
    1fa2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    1fa4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    1fa8:	e7ea      	b.n	1f80 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    1faa:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1fac:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    1fb0:	bf54      	ite	pl
    1fb2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1fb6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1fb8:	461a      	mov	r2, r3
    1fba:	a901      	add	r1, sp, #4
    1fbc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1fbe:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1fc2:	f000 fc71 	bl	28a8 <nrfx_gpiote_input_configure>
    1fc6:	e7e0      	b.n	1f8a <gpio_nrfx_pin_configure+0xe6>
    1fc8:	0bad0000 	.word	0x0bad0000

00001fcc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    1fcc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    1fce:	2301      	movs	r3, #1
    1fd0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1fd2:	4a0e      	ldr	r2, [pc, #56]	; (200c <compare_int_lock+0x40>)
    1fd4:	f3bf 8f5b 	dmb	ish
    1fd8:	43dc      	mvns	r4, r3
    1fda:	e852 1f00 	ldrex	r1, [r2]
    1fde:	ea01 0504 	and.w	r5, r1, r4
    1fe2:	e842 5600 	strex	r6, r5, [r2]
    1fe6:	2e00      	cmp	r6, #0
    1fe8:	d1f7      	bne.n	1fda <compare_int_lock+0xe>
    1fea:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1ff2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1ff4:	4806      	ldr	r0, [pc, #24]	; (2010 <compare_int_lock+0x44>)
    1ff6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    1ffa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ffe:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2002:	420b      	tst	r3, r1
}
    2004:	bf14      	ite	ne
    2006:	2001      	movne	r0, #1
    2008:	2000      	moveq	r0, #0
    200a:	bd70      	pop	{r4, r5, r6, pc}
    200c:	20000860 	.word	0x20000860
    2010:	40011000 	.word	0x40011000

00002014 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2016:	491b      	ldr	r1, [pc, #108]	; (2084 <sys_clock_timeout_handler+0x70>)
{
    2018:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    201a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    201e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2020:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2024:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2028:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    202a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    202e:	d30f      	bcc.n	2050 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2030:	f001 fe2a 	bl	3c88 <sys_clock_announce>
    return p_reg->CC[ch];
    2034:	00a3      	lsls	r3, r4, #2
    2036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    203a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    203e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2042:	4295      	cmp	r5, r2
    2044:	d11d      	bne.n	2082 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    2046:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    204a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    204e:	e012      	b.n	2076 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2050:	4b0d      	ldr	r3, [pc, #52]	; (2088 <sys_clock_timeout_handler+0x74>)
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	0a1a      	lsrs	r2, r3, #8
    2056:	061b      	lsls	r3, r3, #24
    2058:	195e      	adds	r6, r3, r5
    205a:	4b0c      	ldr	r3, [pc, #48]	; (208c <sys_clock_timeout_handler+0x78>)
    205c:	f142 0700 	adc.w	r7, r2, #0
    2060:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2064:	f001 fe10 	bl	3c88 <sys_clock_announce>
    return p_reg->CC[ch];
    2068:	4a09      	ldr	r2, [pc, #36]	; (2090 <sys_clock_timeout_handler+0x7c>)
    206a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    2072:	429d      	cmp	r5, r3
    2074:	d105      	bne.n	2082 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2076:	4a06      	ldr	r2, [pc, #24]	; (2090 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    207c:	40a3      	lsls	r3, r4
    207e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2084:	20000178 	.word	0x20000178
    2088:	20000864 	.word	0x20000864
    208c:	20000180 	.word	0x20000180
    2090:	40011000 	.word	0x40011000

00002094 <compare_int_unlock>:
	if (key) {
    2094:	b311      	cbz	r1, 20dc <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2096:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    209a:	2301      	movs	r3, #1
    209c:	4a10      	ldr	r2, [pc, #64]	; (20e0 <compare_int_unlock+0x4c>)
    209e:	4083      	lsls	r3, r0
    20a0:	e852 cf00 	ldrex	ip, [r2]
    20a4:	ea4c 0c03 	orr.w	ip, ip, r3
    20a8:	e842 c100 	strex	r1, ip, [r2]
    20ac:	2900      	cmp	r1, #0
    20ae:	d1f7      	bne.n	20a0 <compare_int_unlock+0xc>
    20b0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    20b4:	4a0b      	ldr	r2, [pc, #44]	; (20e4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    20b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    20ba:	4083      	lsls	r3, r0
    20bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20c0:	4b09      	ldr	r3, [pc, #36]	; (20e8 <compare_int_unlock+0x54>)
    20c2:	f3bf 8f5b 	dmb	ish
    20c6:	681b      	ldr	r3, [r3, #0]
    20c8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    20cc:	40c3      	lsrs	r3, r0
    20ce:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20d0:	bf42      	ittt	mi
    20d2:	4b06      	ldrmi	r3, [pc, #24]	; (20ec <compare_int_unlock+0x58>)
    20d4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    20d8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	20000860 	.word	0x20000860
    20e4:	40011000 	.word	0x40011000
    20e8:	2000085c 	.word	0x2000085c
    20ec:	e000e100 	.word	0xe000e100

000020f0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    20f0:	4b0d      	ldr	r3, [pc, #52]	; (2128 <z_nrf_rtc_timer_read+0x38>)
    20f2:	6818      	ldr	r0, [r3, #0]
    20f4:	0a01      	lsrs	r1, r0, #8
    20f6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    20f8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    20fc:	4b0b      	ldr	r3, [pc, #44]	; (212c <z_nrf_rtc_timer_read+0x3c>)
    20fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2102:	1818      	adds	r0, r3, r0
    2104:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    210c:	d20a      	bcs.n	2124 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    210e:	4b08      	ldr	r3, [pc, #32]	; (2130 <z_nrf_rtc_timer_read+0x40>)
    2110:	e9d3 2300 	ldrd	r2, r3, [r3]
    2114:	4290      	cmp	r0, r2
    2116:	eb71 0303 	sbcs.w	r3, r1, r3
    211a:	d203      	bcs.n	2124 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    211c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2120:	f141 0100 	adc.w	r1, r1, #0
}
    2124:	4770      	bx	lr
    2126:	bf00      	nop
    2128:	20000864 	.word	0x20000864
    212c:	40011000 	.word	0x40011000
    2130:	20000180 	.word	0x20000180

00002134 <compare_set>:
{
    2134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2138:	4614      	mov	r4, r2
    213a:	461d      	mov	r5, r3
    213c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    213e:	f7ff ff45 	bl	1fcc <compare_int_lock>
    2142:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2144:	f7ff ffd4 	bl	20f0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2148:	42a0      	cmp	r0, r4
    214a:	eb71 0305 	sbcs.w	r3, r1, r5
    214e:	d27a      	bcs.n	2246 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    2150:	4b46      	ldr	r3, [pc, #280]	; (226c <compare_set+0x138>)
    2152:	1a20      	subs	r0, r4, r0
    2154:	eb65 0101 	sbc.w	r1, r5, r1
    2158:	4298      	cmp	r0, r3
    215a:	f171 0100 	sbcs.w	r1, r1, #0
    215e:	f080 8081 	bcs.w	2264 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    2162:	4b43      	ldr	r3, [pc, #268]	; (2270 <compare_set+0x13c>)
    2164:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    2168:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    216c:	429d      	cmp	r5, r3
    216e:	bf08      	it	eq
    2170:	4294      	cmpeq	r4, r2
    2172:	d053      	beq.n	221c <compare_set+0xe8>
    2174:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    2178:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    217c:	f107 0950 	add.w	r9, r7, #80	; 0x50
    2180:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    2184:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2188:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    218c:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    2190:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    2198:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    219c:	4a35      	ldr	r2, [pc, #212]	; (2274 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    219e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    21a2:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    21a4:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    21a6:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    21aa:	eba0 000b 	sub.w	r0, r0, fp
    21ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    21b2:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    21b6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    21b8:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    21bc:	d105      	bne.n	21ca <compare_set+0x96>
    21be:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    21c0:	2013      	movs	r0, #19
    21c2:	f002 fc7e 	bl	4ac2 <z_impl_k_busy_wait>
    21c6:	4a2b      	ldr	r2, [pc, #172]	; (2274 <compare_set+0x140>)
    21c8:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    21ca:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    21ce:	eba6 000c 	sub.w	r0, r6, ip
    21d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    21d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    21da:	bf88      	it	hi
    21dc:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    21de:	2000      	movs	r0, #0
    21e0:	f8c9 0000 	str.w	r0, [r9]
    21e4:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    21e8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    21ec:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    21f0:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    21f4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    21f8:	4583      	cmp	fp, r0
    21fa:	d006      	beq.n	220a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    21fc:	1a30      	subs	r0, r6, r0
    21fe:	3802      	subs	r0, #2
    2200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2208:	d81b      	bhi.n	2242 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    220a:	eba6 0608 	sub.w	r6, r6, r8
    220e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2212:	1936      	adds	r6, r6, r4
    2214:	f145 0300 	adc.w	r3, r5, #0
    2218:	4634      	mov	r4, r6
    221a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    221c:	4914      	ldr	r1, [pc, #80]	; (2270 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    221e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2220:	013b      	lsls	r3, r7, #4
    2222:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    2226:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    222a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    222c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    2230:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2232:	4638      	mov	r0, r7
    2234:	9900      	ldr	r1, [sp, #0]
    2236:	f7ff ff2d 	bl	2094 <compare_int_unlock>
}
    223a:	4620      	mov	r0, r4
    223c:	b003      	add	sp, #12
    223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2242:	4630      	mov	r0, r6
    2244:	e7af      	b.n	21a6 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    2246:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2248:	4a0b      	ldr	r2, [pc, #44]	; (2278 <compare_set+0x144>)
    224a:	f3bf 8f5b 	dmb	ish
    224e:	40bb      	lsls	r3, r7
    2250:	e852 0f00 	ldrex	r0, [r2]
    2254:	4318      	orrs	r0, r3
    2256:	e842 0100 	strex	r1, r0, [r2]
    225a:	2900      	cmp	r1, #0
    225c:	d1f8      	bne.n	2250 <compare_set+0x11c>
    225e:	f3bf 8f5b 	dmb	ish
    2262:	e7db      	b.n	221c <compare_set+0xe8>
			return -EINVAL;
    2264:	f06f 0415 	mvn.w	r4, #21
    2268:	e7e3      	b.n	2232 <compare_set+0xfe>
    226a:	bf00      	nop
    226c:	01000001 	.word	0x01000001
    2270:	20000168 	.word	0x20000168
    2274:	40011000 	.word	0x40011000
    2278:	2000085c 	.word	0x2000085c

0000227c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    227c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    227e:	4b19      	ldr	r3, [pc, #100]	; (22e4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2280:	4d19      	ldr	r5, [pc, #100]	; (22e8 <sys_clock_driver_init+0x6c>)
    2282:	2400      	movs	r4, #0
    2284:	f04f 30ff 	mov.w	r0, #4294967295
    2288:	f04f 31ff 	mov.w	r1, #4294967295
    228c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2290:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2298:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    229c:	4b13      	ldr	r3, [pc, #76]	; (22ec <sys_clock_driver_init+0x70>)
    229e:	2602      	movs	r6, #2
    22a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    22a4:	2101      	movs	r1, #1
    22a6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    22aa:	2011      	movs	r0, #17
    22ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    22b0:	4622      	mov	r2, r4
    22b2:	f7ff f82d 	bl	1310 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    22b6:	2011      	movs	r0, #17
    22b8:	f7ff f80e 	bl	12d8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    22bc:	4a0c      	ldr	r2, [pc, #48]	; (22f0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    22be:	2301      	movs	r3, #1
    22c0:	60ab      	str	r3, [r5, #8]
    22c2:	602b      	str	r3, [r5, #0]
    22c4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    22c6:	4b0b      	ldr	r3, [pc, #44]	; (22f4 <sys_clock_driver_init+0x78>)
    22c8:	4a0b      	ldr	r2, [pc, #44]	; (22f8 <sys_clock_driver_init+0x7c>)
    22ca:	9300      	str	r3, [sp, #0]
    22cc:	9401      	str	r4, [sp, #4]
    22ce:	2300      	movs	r3, #0
    22d0:	4620      	mov	r0, r4
    22d2:	f7ff ff2f 	bl	2134 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    22d6:	4630      	mov	r0, r6
    22d8:	f7ff fcba 	bl	1c50 <z_nrf_clock_control_lf_on>

	return 0;
}
    22dc:	4620      	mov	r0, r4
    22de:	b002      	add	sp, #8
    22e0:	bd70      	pop	{r4, r5, r6, pc}
    22e2:	bf00      	nop
    22e4:	20000168 	.word	0x20000168
    22e8:	40011000 	.word	0x40011000
    22ec:	e000e100 	.word	0xe000e100
    22f0:	20000860 	.word	0x20000860
    22f4:	00002015 	.word	0x00002015
    22f8:	007fffff 	.word	0x007fffff

000022fc <rtc_nrf_isr>:
{
    22fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2300:	4c33      	ldr	r4, [pc, #204]	; (23d0 <rtc_nrf_isr+0xd4>)
    2302:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2306:	079a      	lsls	r2, r3, #30
    2308:	d50b      	bpl.n	2322 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    230a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    230e:	b143      	cbz	r3, 2322 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2310:	4a30      	ldr	r2, [pc, #192]	; (23d4 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2312:	2300      	movs	r3, #0
    2314:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2318:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    231c:	6813      	ldr	r3, [r2, #0]
    231e:	3301      	adds	r3, #1
    2320:	6013      	str	r3, [r2, #0]
    2322:	f04f 0320 	mov.w	r3, #32
    2326:	f3ef 8211 	mrs	r2, BASEPRI
    232a:	f383 8812 	msr	BASEPRI_MAX, r3
    232e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2332:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2336:	03db      	lsls	r3, r3, #15
    2338:	d529      	bpl.n	238e <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    233a:	f3bf 8f5b 	dmb	ish
    233e:	4b26      	ldr	r3, [pc, #152]	; (23d8 <rtc_nrf_isr+0xdc>)
    2340:	e853 1f00 	ldrex	r1, [r3]
    2344:	f021 0001 	bic.w	r0, r1, #1
    2348:	e843 0500 	strex	r5, r0, [r3]
    234c:	2d00      	cmp	r5, #0
    234e:	d1f7      	bne.n	2340 <rtc_nrf_isr+0x44>
    2350:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2354:	b911      	cbnz	r1, 235c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2356:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    235a:	b1c3      	cbz	r3, 238e <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    235c:	2500      	movs	r5, #0
    235e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2362:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    2366:	f382 8811 	msr	BASEPRI, r2
    236a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    236e:	f7ff febf 	bl	20f0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2372:	f04f 0320 	mov.w	r3, #32
    2376:	f3ef 8211 	mrs	r2, BASEPRI
    237a:	f383 8812 	msr	BASEPRI_MAX, r3
    237e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2382:	4b16      	ldr	r3, [pc, #88]	; (23dc <rtc_nrf_isr+0xe0>)
    2384:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2388:	42b0      	cmp	r0, r6
    238a:	41b9      	sbcs	r1, r7
    238c:	d206      	bcs.n	239c <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    238e:	f382 8811 	msr	BASEPRI, r2
    2392:	f3bf 8f6f 	isb	sy
}
    2396:	b003      	add	sp, #12
    2398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    239c:	f04f 38ff 	mov.w	r8, #4294967295
    23a0:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    23a4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    23a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    23ac:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    23ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    23b2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    23b6:	f382 8811 	msr	BASEPRI, r2
    23ba:	f3bf 8f6f 	isb	sy
		if (handler) {
    23be:	2900      	cmp	r1, #0
    23c0:	d0e9      	beq.n	2396 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    23c2:	9000      	str	r0, [sp, #0]
    23c4:	4632      	mov	r2, r6
    23c6:	463b      	mov	r3, r7
    23c8:	4628      	mov	r0, r5
    23ca:	4788      	blx	r1
}
    23cc:	e7e3      	b.n	2396 <rtc_nrf_isr+0x9a>
    23ce:	bf00      	nop
    23d0:	40011000 	.word	0x40011000
    23d4:	20000864 	.word	0x20000864
    23d8:	2000085c 	.word	0x2000085c
    23dc:	20000168 	.word	0x20000168

000023e0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23e0:	1c43      	adds	r3, r0, #1
{
    23e2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23e4:	d021      	beq.n	242a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    23e6:	2801      	cmp	r0, #1
    23e8:	dd21      	ble.n	242e <sys_clock_set_timeout+0x4e>
    23ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    23ee:	da20      	bge.n	2432 <sys_clock_set_timeout+0x52>
    23f0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    23f2:	f7ff fe7d 	bl	20f0 <z_nrf_rtc_timer_read>
    23f6:	4b10      	ldr	r3, [pc, #64]	; (2438 <sys_clock_set_timeout+0x58>)
    23f8:	e9d3 1300 	ldrd	r1, r3, [r3]
    23fc:	1a42      	subs	r2, r0, r1
		ticks = 0;
    23fe:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    2402:	480e      	ldr	r0, [pc, #56]	; (243c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    2404:	bf28      	it	cs
    2406:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2408:	3201      	adds	r2, #1
    240a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    240c:	4282      	cmp	r2, r0
    240e:	bf28      	it	cs
    2410:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    2412:	1852      	adds	r2, r2, r1
    2414:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2418:	4909      	ldr	r1, [pc, #36]	; (2440 <sys_clock_set_timeout+0x60>)
    241a:	9001      	str	r0, [sp, #4]
    241c:	9100      	str	r1, [sp, #0]
    241e:	f143 0300 	adc.w	r3, r3, #0
    2422:	f7ff fe87 	bl	2134 <compare_set>
}
    2426:	b002      	add	sp, #8
    2428:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    242a:	4804      	ldr	r0, [pc, #16]	; (243c <sys_clock_set_timeout+0x5c>)
    242c:	e7e0      	b.n	23f0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    242e:	2400      	movs	r4, #0
    2430:	e7df      	b.n	23f2 <sys_clock_set_timeout+0x12>
    2432:	4c02      	ldr	r4, [pc, #8]	; (243c <sys_clock_set_timeout+0x5c>)
    2434:	e7dd      	b.n	23f2 <sys_clock_set_timeout+0x12>
    2436:	bf00      	nop
    2438:	20000178 	.word	0x20000178
    243c:	007fffff 	.word	0x007fffff
    2440:	00002015 	.word	0x00002015

00002444 <sys_clock_elapsed>:
{
    2444:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2446:	f7ff fe53 	bl	20f0 <z_nrf_rtc_timer_read>
    244a:	4b02      	ldr	r3, [pc, #8]	; (2454 <sys_clock_elapsed+0x10>)
    244c:	681b      	ldr	r3, [r3, #0]
}
    244e:	1ac0      	subs	r0, r0, r3
    2450:	bd08      	pop	{r3, pc}
    2452:	bf00      	nop
    2454:	20000178 	.word	0x20000178

00002458 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    245c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2460:	2a08      	cmp	r2, #8
    2462:	d106      	bne.n	2472 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2464:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2468:	2b05      	cmp	r3, #5
    246a:	d802      	bhi.n	2472 <nrf52_errata_103+0x1a>
    246c:	4a02      	ldr	r2, [pc, #8]	; (2478 <nrf52_errata_103+0x20>)
    246e:	5cd0      	ldrb	r0, [r2, r3]
    2470:	4770      	bx	lr
                        return false;
    2472:	2000      	movs	r0, #0
}
    2474:	4770      	bx	lr
    2476:	bf00      	nop
    2478:	00004f48 	.word	0x00004f48

0000247c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    247c:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    247e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2482:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2486:	2a08      	cmp	r2, #8
    2488:	d14e      	bne.n	2528 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    248a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    248e:	2100      	movs	r1, #0
    2490:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2494:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2498:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    249c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    24a0:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    24a4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    24a8:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    24ac:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    24b0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    24b4:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    24b8:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    24bc:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    24c0:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    24c4:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    24c8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    24cc:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    24d0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    24d4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    24d8:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    24dc:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    24e0:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    24e4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    24e8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    24ec:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    24f0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    24f4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    24f8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    24fc:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2500:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    2504:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2508:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    250c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2510:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    2514:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2518:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    251c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2520:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    2524:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2528:	f7ff ff96 	bl	2458 <nrf52_errata_103>
    252c:	b118      	cbz	r0, 2536 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    252e:	4b25      	ldr	r3, [pc, #148]	; (25c4 <SystemInit+0x148>)
    2530:	4a25      	ldr	r2, [pc, #148]	; (25c8 <SystemInit+0x14c>)
    2532:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2536:	f7ff ff8f 	bl	2458 <nrf52_errata_103>
    253a:	b118      	cbz	r0, 2544 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    253c:	4b23      	ldr	r3, [pc, #140]	; (25cc <SystemInit+0x150>)
    253e:	22fb      	movs	r2, #251	; 0xfb
    2540:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2544:	f7ff ff88 	bl	2458 <nrf52_errata_103>
    2548:	b170      	cbz	r0, 2568 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    254a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    254e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2552:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    2556:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    255a:	f022 020f 	bic.w	r2, r2, #15
    255e:	f003 030f 	and.w	r3, r3, #15
    2562:	4313      	orrs	r3, r2
    2564:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2568:	f7ff ff76 	bl	2458 <nrf52_errata_103>
    256c:	b120      	cbz	r0, 2578 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    256e:	4b18      	ldr	r3, [pc, #96]	; (25d0 <SystemInit+0x154>)
    2570:	f44f 7200 	mov.w	r2, #512	; 0x200
    2574:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    257c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2580:	2b08      	cmp	r3, #8
    2582:	d11a      	bne.n	25ba <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2588:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    258c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    258e:	bf44      	itt	mi
    2590:	f06f 0201 	mvnmi.w	r2, #1
    2594:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    259c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    25a0:	2b05      	cmp	r3, #5
    25a2:	d802      	bhi.n	25aa <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    25a4:	4a0b      	ldr	r2, [pc, #44]	; (25d4 <SystemInit+0x158>)
    25a6:	5cd3      	ldrb	r3, [r2, r3]
    25a8:	b13b      	cbz	r3, 25ba <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    25aa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    25ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    25b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25b6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    25ba:	4b07      	ldr	r3, [pc, #28]	; (25d8 <SystemInit+0x15c>)
    25bc:	4a07      	ldr	r2, [pc, #28]	; (25dc <SystemInit+0x160>)
    25be:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    25c0:	bd08      	pop	{r3, pc}
    25c2:	bf00      	nop
    25c4:	40005000 	.word	0x40005000
    25c8:	00038148 	.word	0x00038148
    25cc:	4000f000 	.word	0x4000f000
    25d0:	40029000 	.word	0x40029000
    25d4:	00004f42 	.word	0x00004f42
    25d8:	20000028 	.word	0x20000028
    25dc:	03d09000 	.word	0x03d09000

000025e0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    25e2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    25e4:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    25e6:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    25ea:	fab2 f382 	clz	r3, r2
    25ee:	f1c3 031f 	rsb	r3, r3, #31
    25f2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    25f4:	fa05 f403 	lsl.w	r4, r5, r3
    25f8:	ea22 0404 	bic.w	r4, r2, r4
    25fc:	e850 6f00 	ldrex	r6, [r0]
    2600:	4296      	cmp	r6, r2
    2602:	d104      	bne.n	260e <nrfx_flag32_alloc+0x2e>
    2604:	e840 4c00 	strex	ip, r4, [r0]
    2608:	f1bc 0f00 	cmp.w	ip, #0
    260c:	d1f6      	bne.n	25fc <nrfx_flag32_alloc+0x1c>
    260e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2612:	d1e7      	bne.n	25e4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2614:	4801      	ldr	r0, [pc, #4]	; (261c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2616:	700b      	strb	r3, [r1, #0]
}
    2618:	bd70      	pop	{r4, r5, r6, pc}
    261a:	bf00      	nop
    261c:	0bad0000 	.word	0x0bad0000

00002620 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2620:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2622:	6803      	ldr	r3, [r0, #0]
    2624:	40cb      	lsrs	r3, r1
    2626:	07db      	lsls	r3, r3, #31
    2628:	d414      	bmi.n	2654 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    262a:	2301      	movs	r3, #1
    262c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    262e:	6802      	ldr	r2, [r0, #0]
    2630:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2634:	ea43 0102 	orr.w	r1, r3, r2
    2638:	e850 4f00 	ldrex	r4, [r0]
    263c:	4294      	cmp	r4, r2
    263e:	d104      	bne.n	264a <nrfx_flag32_free+0x2a>
    2640:	e840 1c00 	strex	ip, r1, [r0]
    2644:	f1bc 0f00 	cmp.w	ip, #0
    2648:	d1f6      	bne.n	2638 <nrfx_flag32_free+0x18>
    264a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    264e:	d1ee      	bne.n	262e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2650:	4801      	ldr	r0, [pc, #4]	; (2658 <nrfx_flag32_free+0x38>)
}
    2652:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2654:	4801      	ldr	r0, [pc, #4]	; (265c <nrfx_flag32_free+0x3c>)
    2656:	e7fc      	b.n	2652 <nrfx_flag32_free+0x32>
    2658:	0bad0000 	.word	0x0bad0000
    265c:	0bad0004 	.word	0x0bad0004

00002660 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2662:	4604      	mov	r4, r0
    2664:	b118      	cbz	r0, 266e <clock_stop+0xe>
    2666:	2801      	cmp	r0, #1
    2668:	d022      	beq.n	26b0 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    266a:	b003      	add	sp, #12
    266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    266e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2672:	2202      	movs	r2, #2
    2674:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2678:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    267c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2680:	2201      	movs	r2, #1
    2682:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2684:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2686:	2301      	movs	r3, #1
    2688:	f88d 3007 	strb.w	r3, [sp, #7]
    268c:	f242 7510 	movw	r5, #10000	; 0x2710
    2690:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2694:	b1cc      	cbz	r4, 26ca <clock_stop+0x6a>
    2696:	2c01      	cmp	r4, #1
    2698:	d1e7      	bne.n	266a <clock_stop+0xa>
            if (p_clk_src != NULL)
    269a:	b3c7      	cbz	r7, 270e <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    269c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    26a0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    26a4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26a6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    26aa:	03da      	lsls	r2, r3, #15
    26ac:	d521      	bpl.n	26f2 <clock_stop+0x92>
    26ae:	e016      	b.n	26de <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    26b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26b4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    26b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    26be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26c2:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    26c4:	f10d 0707 	add.w	r7, sp, #7
    26c8:	e7dd      	b.n	2686 <clock_stop+0x26>
            if (p_clk_src != NULL)
    26ca:	b1b7      	cbz	r7, 26fa <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26cc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    26d0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    26d4:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    26da:	03d8      	lsls	r0, r3, #15
    26dc:	d5c5      	bpl.n	266a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    26de:	f89d 0007 	ldrb.w	r0, [sp, #7]
    26e2:	2801      	cmp	r0, #1
    26e4:	d103      	bne.n	26ee <clock_stop+0x8e>
    26e6:	f001 ffcf 	bl	4688 <nrfx_busy_wait>
    26ea:	3d01      	subs	r5, #1
    26ec:	d1d2      	bne.n	2694 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    26ee:	2c01      	cmp	r4, #1
    26f0:	d1bb      	bne.n	266a <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    26f2:	4b0c      	ldr	r3, [pc, #48]	; (2724 <clock_stop+0xc4>)
    26f4:	2200      	movs	r2, #0
    26f6:	715a      	strb	r2, [r3, #5]
    26f8:	e7b7      	b.n	266a <clock_stop+0xa>
    26fa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    26fe:	03d9      	lsls	r1, r3, #15
    2700:	d5b3      	bpl.n	266a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2702:	2001      	movs	r0, #1
    2704:	f001 ffc0 	bl	4688 <nrfx_busy_wait>
    2708:	3d01      	subs	r5, #1
    270a:	d1f6      	bne.n	26fa <clock_stop+0x9a>
    270c:	e7ad      	b.n	266a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    270e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2712:	03db      	lsls	r3, r3, #15
    2714:	d5ed      	bpl.n	26f2 <clock_stop+0x92>
    2716:	2001      	movs	r0, #1
    2718:	f001 ffb6 	bl	4688 <nrfx_busy_wait>
    271c:	3d01      	subs	r5, #1
    271e:	d1f6      	bne.n	270e <clock_stop+0xae>
    2720:	e7e7      	b.n	26f2 <clock_stop+0x92>
    2722:	bf00      	nop
    2724:	20000868 	.word	0x20000868

00002728 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2728:	4b04      	ldr	r3, [pc, #16]	; (273c <nrfx_clock_init+0x14>)
    272a:	791a      	ldrb	r2, [r3, #4]
    272c:	b922      	cbnz	r2, 2738 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    272e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2730:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2732:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2734:	4802      	ldr	r0, [pc, #8]	; (2740 <nrfx_clock_init+0x18>)
    2736:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2738:	4802      	ldr	r0, [pc, #8]	; (2744 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    273a:	4770      	bx	lr
    273c:	20000868 	.word	0x20000868
    2740:	0bad0000 	.word	0x0bad0000
    2744:	0bad000c 	.word	0x0bad000c

00002748 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2748:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    274a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    274e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2752:	b16a      	cbz	r2, 2770 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2754:	2200      	movs	r2, #0
    2756:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    275a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    275e:	2201      	movs	r2, #1
    2760:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2764:	4b11      	ldr	r3, [pc, #68]	; (27ac <nrfx_power_clock_irq_handler+0x64>)
    2766:	7958      	ldrb	r0, [r3, #5]
    2768:	b910      	cbnz	r0, 2770 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    276a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2774:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2778:	b172      	cbz	r2, 2798 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    277a:	2200      	movs	r2, #0
    277c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2780:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2784:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2788:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    278c:	0792      	lsls	r2, r2, #30
    278e:	d104      	bne.n	279a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2790:	2201      	movs	r2, #1
    2792:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2796:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2798:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    279a:	2202      	movs	r2, #2
    279c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    27a0:	4b02      	ldr	r3, [pc, #8]	; (27ac <nrfx_power_clock_irq_handler+0x64>)
}
    27a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	2001      	movs	r0, #1
    27aa:	4718      	bx	r3
    27ac:	20000868 	.word	0x20000868

000027b0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    27b0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    27b2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    27b6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    27b8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    27ba:	6002      	str	r2, [r0, #0]
}
    27bc:	4802      	ldr	r0, [pc, #8]	; (27c8 <nrf_gpio_pin_port_decode+0x18>)
    27be:	bf18      	it	ne
    27c0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    27c4:	4770      	bx	lr
    27c6:	bf00      	nop
    27c8:	50000300 	.word	0x50000300

000027cc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    27cc:	4b03      	ldr	r3, [pc, #12]	; (27dc <pin_in_use_by_te+0x10>)
    27ce:	3008      	adds	r0, #8
    27d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    27d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    27d8:	4770      	bx	lr
    27da:	bf00      	nop
    27dc:	2000002c 	.word	0x2000002c

000027e0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    27e0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    27e2:	f100 0308 	add.w	r3, r0, #8
    27e6:	4c0c      	ldr	r4, [pc, #48]	; (2818 <call_handler+0x38>)
    27e8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    27ec:	05da      	lsls	r2, r3, #23
{
    27ee:	4605      	mov	r5, r0
    27f0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    27f2:	d507      	bpl.n	2804 <call_handler+0x24>
    27f4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    27f8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    27fc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2800:	6852      	ldr	r2, [r2, #4]
    2802:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2804:	68a3      	ldr	r3, [r4, #8]
    2806:	b12b      	cbz	r3, 2814 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2808:	68e2      	ldr	r2, [r4, #12]
    280a:	4631      	mov	r1, r6
    280c:	4628      	mov	r0, r5
    }
}
    280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2812:	4718      	bx	r3
}
    2814:	bd70      	pop	{r4, r5, r6, pc}
    2816:	bf00      	nop
    2818:	2000002c 	.word	0x2000002c

0000281c <release_handler>:
{
    281c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    281e:	4a12      	ldr	r2, [pc, #72]	; (2868 <release_handler+0x4c>)
    2820:	3008      	adds	r0, #8
    2822:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2826:	05d9      	lsls	r1, r3, #23
    2828:	d51b      	bpl.n	2862 <release_handler+0x46>
    282a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    282e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2832:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2836:	f102 040e 	add.w	r4, r2, #14
    283a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    283c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2840:	f413 7f80 	tst.w	r3, #256	; 0x100
    2844:	d003      	beq.n	284e <release_handler+0x32>
    2846:	f3c3 2343 	ubfx	r3, r3, #9, #4
    284a:	4299      	cmp	r1, r3
    284c:	d009      	beq.n	2862 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    284e:	3001      	adds	r0, #1
    2850:	2830      	cmp	r0, #48	; 0x30
    2852:	d1f3      	bne.n	283c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2854:	2300      	movs	r3, #0
    2856:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    285a:	4804      	ldr	r0, [pc, #16]	; (286c <release_handler+0x50>)
}
    285c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    285e:	f7ff bedf 	b.w	2620 <nrfx_flag32_free>
}
    2862:	bc10      	pop	{r4}
    2864:	4770      	bx	lr
    2866:	bf00      	nop
    2868:	2000002c 	.word	0x2000002c
    286c:	200000a0 	.word	0x200000a0

00002870 <pin_handler_trigger_uninit>:
{
    2870:	b538      	push	{r3, r4, r5, lr}
    2872:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2874:	f7ff ffaa 	bl	27cc <pin_in_use_by_te>
    2878:	4c09      	ldr	r4, [pc, #36]	; (28a0 <pin_handler_trigger_uninit+0x30>)
    287a:	f102 0508 	add.w	r5, r2, #8
    287e:	b140      	cbz	r0, 2892 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2880:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2884:	4907      	ldr	r1, [pc, #28]	; (28a4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2886:	0b5b      	lsrs	r3, r3, #13
    2888:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    288c:	2000      	movs	r0, #0
    288e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2892:	4610      	mov	r0, r2
    2894:	f7ff ffc2 	bl	281c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2898:	2300      	movs	r3, #0
    289a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    289e:	bd38      	pop	{r3, r4, r5, pc}
    28a0:	2000002c 	.word	0x2000002c
    28a4:	40006000 	.word	0x40006000

000028a8 <nrfx_gpiote_input_configure>:
{
    28a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    28ac:	4604      	mov	r4, r0
    28ae:	4616      	mov	r6, r2
    28b0:	461d      	mov	r5, r3
    if (p_input_config)
    28b2:	b301      	cbz	r1, 28f6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    28b4:	4f4e      	ldr	r7, [pc, #312]	; (29f0 <nrfx_gpiote_input_configure+0x148>)
    28b6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    28ba:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    28be:	079b      	lsls	r3, r3, #30
    28c0:	d502      	bpl.n	28c8 <nrfx_gpiote_input_configure+0x20>
    28c2:	f7ff ff83 	bl	27cc <pin_in_use_by_te>
    28c6:	bb10      	cbnz	r0, 290e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    28c8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    28ca:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    28ce:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    28d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    28d6:	f10d 020f 	add.w	r2, sp, #15
    28da:	460b      	mov	r3, r1
    28dc:	4620      	mov	r0, r4
    28de:	f10d 010e 	add.w	r1, sp, #14
    28e2:	f001 ff1e 	bl	4722 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    28e6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    28ea:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    28ee:	f043 0301 	orr.w	r3, r3, #1
    28f2:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    28f6:	b346      	cbz	r6, 294a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    28f8:	4b3d      	ldr	r3, [pc, #244]	; (29f0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    28fa:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    28fe:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2900:	f104 0708 	add.w	r7, r4, #8
    2904:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    2908:	0788      	lsls	r0, r1, #30
    290a:	d502      	bpl.n	2912 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    290c:	b1aa      	cbz	r2, 293a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    290e:	4839      	ldr	r0, [pc, #228]	; (29f4 <nrfx_gpiote_input_configure+0x14c>)
    2910:	e01d      	b.n	294e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2912:	f021 0120 	bic.w	r1, r1, #32
    2916:	04c9      	lsls	r1, r1, #19
    2918:	0cc9      	lsrs	r1, r1, #19
    291a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    291e:	b162      	cbz	r2, 293a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    2920:	f1bc 0f03 	cmp.w	ip, #3
    2924:	d8f3      	bhi.n	290e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2926:	6872      	ldr	r2, [r6, #4]
    2928:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    292a:	f1bc 0f00 	cmp.w	ip, #0
    292e:	d111      	bne.n	2954 <nrfx_gpiote_input_configure+0xac>
    2930:	4a31      	ldr	r2, [pc, #196]	; (29f8 <nrfx_gpiote_input_configure+0x150>)
    2932:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    2936:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    293a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    293e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2942:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    2946:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    294a:	bb45      	cbnz	r5, 299e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    294c:	482b      	ldr	r0, [pc, #172]	; (29fc <nrfx_gpiote_input_configure+0x154>)
}
    294e:	b004      	add	sp, #16
    2950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2954:	00b2      	lsls	r2, r6, #2
    2956:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    295a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    295e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    2962:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2966:	f020 0003 	bic.w	r0, r0, #3
    296a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    296e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2972:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    2976:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    297a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    297e:	0220      	lsls	r0, r4, #8
    2980:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2984:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    2988:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    298c:	ea40 000e 	orr.w	r0, r0, lr
    2990:	f041 0120 	orr.w	r1, r1, #32
    2994:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    2998:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    299c:	e7cd      	b.n	293a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    299e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    29a2:	4620      	mov	r0, r4
    29a4:	f7ff ff3a 	bl	281c <release_handler>
    if (!handler)
    29a8:	2e00      	cmp	r6, #0
    29aa:	d0cf      	beq.n	294c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    29ac:	4d10      	ldr	r5, [pc, #64]	; (29f0 <nrfx_gpiote_input_configure+0x148>)
    29ae:	e9d5 2300 	ldrd	r2, r3, [r5]
    29b2:	4296      	cmp	r6, r2
    29b4:	d101      	bne.n	29ba <nrfx_gpiote_input_configure+0x112>
    29b6:	429f      	cmp	r7, r3
    29b8:	d018      	beq.n	29ec <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    29ba:	4811      	ldr	r0, [pc, #68]	; (2a00 <nrfx_gpiote_input_configure+0x158>)
    29bc:	f10d 010f 	add.w	r1, sp, #15
    29c0:	f7ff fe0e 	bl	25e0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    29c4:	4b0d      	ldr	r3, [pc, #52]	; (29fc <nrfx_gpiote_input_configure+0x154>)
    29c6:	4298      	cmp	r0, r3
    29c8:	d1c1      	bne.n	294e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    29ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    29ce:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    29d2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    29d6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    29d8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    29da:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    29de:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    29e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    29e6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    29ea:	e7af      	b.n	294c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    29ec:	2200      	movs	r2, #0
    29ee:	e7ee      	b.n	29ce <nrfx_gpiote_input_configure+0x126>
    29f0:	2000002c 	.word	0x2000002c
    29f4:	0bad0004 	.word	0x0bad0004
    29f8:	40006000 	.word	0x40006000
    29fc:	0bad0000 	.word	0x0bad0000
    2a00:	200000a0 	.word	0x200000a0

00002a04 <nrfx_gpiote_output_configure>:
{
    2a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a06:	4604      	mov	r4, r0
    2a08:	b085      	sub	sp, #20
    2a0a:	4615      	mov	r5, r2
    if (p_config)
    2a0c:	b319      	cbz	r1, 2a56 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2a0e:	4e33      	ldr	r6, [pc, #204]	; (2adc <nrfx_gpiote_output_configure+0xd8>)
    2a10:	f100 0708 	add.w	r7, r0, #8
    2a14:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2a18:	0793      	lsls	r3, r2, #30
    2a1a:	d403      	bmi.n	2a24 <nrfx_gpiote_output_configure+0x20>
    2a1c:	f7ff fed6 	bl	27cc <pin_in_use_by_te>
    2a20:	2800      	cmp	r0, #0
    2a22:	d158      	bne.n	2ad6 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2a24:	f012 0f1c 	tst.w	r2, #28
    2a28:	d002      	beq.n	2a30 <nrfx_gpiote_output_configure+0x2c>
    2a2a:	784b      	ldrb	r3, [r1, #1]
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d052      	beq.n	2ad6 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2a30:	2301      	movs	r3, #1
    2a32:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2a36:	2300      	movs	r3, #0
    2a38:	e9cd 1300 	strd	r1, r3, [sp]
    2a3c:	1c4a      	adds	r2, r1, #1
    2a3e:	1c8b      	adds	r3, r1, #2
    2a40:	4620      	mov	r0, r4
    2a42:	f10d 010f 	add.w	r1, sp, #15
    2a46:	f001 fe6c 	bl	4722 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2a4a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2a4e:	f043 0303 	orr.w	r3, r3, #3
    2a52:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2a56:	b915      	cbnz	r5, 2a5e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2a58:	4821      	ldr	r0, [pc, #132]	; (2ae0 <nrfx_gpiote_output_configure+0xdc>)
}
    2a5a:	b005      	add	sp, #20
    2a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2a5e:	4e1f      	ldr	r6, [pc, #124]	; (2adc <nrfx_gpiote_output_configure+0xd8>)
    2a60:	f104 0708 	add.w	r7, r4, #8
    2a64:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2a68:	0783      	lsls	r3, r0, #30
    2a6a:	d534      	bpl.n	2ad6 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    2a6c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2a70:	4661      	mov	r1, ip
    2a72:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2a74:	f020 0020 	bic.w	r0, r0, #32
    2a78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2a7c:	04c0      	lsls	r0, r0, #19
    2a7e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2a82:	0cc0      	lsrs	r0, r0, #19
    2a84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2a88:	2300      	movs	r3, #0
    2a8a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2a8e:	786a      	ldrb	r2, [r5, #1]
    2a90:	2a00      	cmp	r2, #0
    2a92:	d0e1      	beq.n	2a58 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2a94:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    2a98:	78ad      	ldrb	r5, [r5, #2]
    2a9a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2a9e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2aa2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2aa6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2aaa:	0223      	lsls	r3, r4, #8
    2aac:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2ab0:	0412      	lsls	r2, r2, #16
    2ab2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ab6:	ea43 030e 	orr.w	r3, r3, lr
    2aba:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2abc:	052a      	lsls	r2, r5, #20
    2abe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2ac2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ac6:	4313      	orrs	r3, r2
    2ac8:	f040 0020 	orr.w	r0, r0, #32
    2acc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2ad0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2ad4:	e7c0      	b.n	2a58 <nrfx_gpiote_output_configure+0x54>
{
    2ad6:	4803      	ldr	r0, [pc, #12]	; (2ae4 <nrfx_gpiote_output_configure+0xe0>)
    2ad8:	e7bf      	b.n	2a5a <nrfx_gpiote_output_configure+0x56>
    2ada:	bf00      	nop
    2adc:	2000002c 	.word	0x2000002c
    2ae0:	0bad0000 	.word	0x0bad0000
    2ae4:	0bad0004 	.word	0x0bad0004

00002ae8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2ae8:	4b01      	ldr	r3, [pc, #4]	; (2af0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2aea:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2aee:	4770      	bx	lr
    2af0:	2000002c 	.word	0x2000002c

00002af4 <nrfx_gpiote_channel_get>:
{
    2af4:	b508      	push	{r3, lr}
    2af6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2af8:	f7ff fe68 	bl	27cc <pin_in_use_by_te>
    2afc:	b138      	cbz	r0, 2b0e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2afe:	4b05      	ldr	r3, [pc, #20]	; (2b14 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    2b00:	4805      	ldr	r0, [pc, #20]	; (2b18 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2b02:	3208      	adds	r2, #8
    2b04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2b08:	0b5b      	lsrs	r3, r3, #13
    2b0a:	700b      	strb	r3, [r1, #0]
}
    2b0c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2b0e:	4803      	ldr	r0, [pc, #12]	; (2b1c <nrfx_gpiote_channel_get+0x28>)
    2b10:	e7fc      	b.n	2b0c <nrfx_gpiote_channel_get+0x18>
    2b12:	bf00      	nop
    2b14:	2000002c 	.word	0x2000002c
    2b18:	0bad0000 	.word	0x0bad0000
    2b1c:	0bad0004 	.word	0x0bad0004

00002b20 <nrfx_gpiote_init>:
{
    2b20:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2b22:	4c0f      	ldr	r4, [pc, #60]	; (2b60 <nrfx_gpiote_init+0x40>)
    2b24:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    2b28:	b9bd      	cbnz	r5, 2b5a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2b2a:	2260      	movs	r2, #96	; 0x60
    2b2c:	4629      	mov	r1, r5
    2b2e:	f104 0010 	add.w	r0, r4, #16
    2b32:	f001 fc97 	bl	4464 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2b36:	2006      	movs	r0, #6
    2b38:	f7fe fbce 	bl	12d8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b3c:	4b09      	ldr	r3, [pc, #36]	; (2b64 <nrfx_gpiote_init+0x44>)
    return err_code;
    2b3e:	480a      	ldr	r0, [pc, #40]	; (2b68 <nrfx_gpiote_init+0x48>)
    2b40:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2b44:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2b48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2b4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2b50:	2301      	movs	r3, #1
    2b52:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2b56:	6763      	str	r3, [r4, #116]	; 0x74
}
    2b58:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2b5a:	4804      	ldr	r0, [pc, #16]	; (2b6c <nrfx_gpiote_init+0x4c>)
    2b5c:	e7fc      	b.n	2b58 <nrfx_gpiote_init+0x38>
    2b5e:	bf00      	nop
    2b60:	2000002c 	.word	0x2000002c
    2b64:	40006000 	.word	0x40006000
    2b68:	0bad0000 	.word	0x0bad0000
    2b6c:	0bad0005 	.word	0x0bad0005

00002b70 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2b70:	4b03      	ldr	r3, [pc, #12]	; (2b80 <nrfx_gpiote_is_init+0x10>)
    2b72:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    2b76:	3800      	subs	r0, #0
    2b78:	bf18      	it	ne
    2b7a:	2001      	movne	r0, #1
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	2000002c 	.word	0x2000002c

00002b84 <nrfx_gpiote_channel_free>:
{
    2b84:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2b86:	4801      	ldr	r0, [pc, #4]	; (2b8c <nrfx_gpiote_channel_free+0x8>)
    2b88:	f7ff bd4a 	b.w	2620 <nrfx_flag32_free>
    2b8c:	2000009c 	.word	0x2000009c

00002b90 <nrfx_gpiote_channel_alloc>:
{
    2b90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2b92:	4801      	ldr	r0, [pc, #4]	; (2b98 <nrfx_gpiote_channel_alloc+0x8>)
    2b94:	f7ff bd24 	b.w	25e0 <nrfx_flag32_alloc>
    2b98:	2000009c 	.word	0x2000009c

00002b9c <nrfx_gpiote_trigger_enable>:
{
    2b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b9e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2ba0:	f7ff fe14 	bl	27cc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ba4:	f104 0208 	add.w	r2, r4, #8
    2ba8:	4b1e      	ldr	r3, [pc, #120]	; (2c24 <nrfx_gpiote_trigger_enable+0x88>)
    2baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2bae:	b1e8      	cbz	r0, 2bec <nrfx_gpiote_trigger_enable+0x50>
    2bb0:	f013 0502 	ands.w	r5, r3, #2
    2bb4:	d11a      	bne.n	2bec <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2bb6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2bb8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2bba:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    2bbe:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    2bc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2bc6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bca:	6005      	str	r5, [r0, #0]
    2bcc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2bce:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2bd2:	f040 0001 	orr.w	r0, r0, #1
    2bd6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2bda:	b129      	cbz	r1, 2be8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2bdc:	2201      	movs	r2, #1
    2bde:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2be2:	4a11      	ldr	r2, [pc, #68]	; (2c28 <nrfx_gpiote_trigger_enable+0x8c>)
    2be4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2be8:	b003      	add	sp, #12
    2bea:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2bec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2bf0:	2b04      	cmp	r3, #4
    2bf2:	d012      	beq.n	2c1a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2bf4:	2b05      	cmp	r3, #5
    2bf6:	d012      	beq.n	2c1e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2bf8:	a801      	add	r0, sp, #4
    2bfa:	9401      	str	r4, [sp, #4]
    2bfc:	f7ff fdd8 	bl	27b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2c00:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2c02:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2c06:	40d9      	lsrs	r1, r3
    2c08:	f001 0101 	and.w	r1, r1, #1
    2c0c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2c0e:	4620      	mov	r0, r4
}
    2c10:	b003      	add	sp, #12
    2c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2c16:	f001 bdcd 	b.w	47b4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2c1a:	2103      	movs	r1, #3
    2c1c:	e7f7      	b.n	2c0e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2c1e:	2102      	movs	r1, #2
    2c20:	e7f5      	b.n	2c0e <nrfx_gpiote_trigger_enable+0x72>
    2c22:	bf00      	nop
    2c24:	2000002c 	.word	0x2000002c
    2c28:	40006000 	.word	0x40006000

00002c2c <nrfx_gpiote_trigger_disable>:
{
    2c2c:	b508      	push	{r3, lr}
    2c2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2c30:	f7ff fdcc 	bl	27cc <pin_in_use_by_te>
    2c34:	b1c0      	cbz	r0, 2c68 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c36:	f102 0108 	add.w	r1, r2, #8
    2c3a:	4b0e      	ldr	r3, [pc, #56]	; (2c74 <nrfx_gpiote_trigger_disable+0x48>)
    2c3c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2c40:	0799      	lsls	r1, r3, #30
    2c42:	d411      	bmi.n	2c68 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2c44:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2c46:	2201      	movs	r2, #1
    2c48:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2c4a:	009b      	lsls	r3, r3, #2
    2c4c:	490a      	ldr	r1, [pc, #40]	; (2c78 <nrfx_gpiote_trigger_disable+0x4c>)
    2c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2c52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2c56:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2c5a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2c5e:	f022 0203 	bic.w	r2, r2, #3
    2c62:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2c66:	bd08      	pop	{r3, pc}
    2c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2c6c:	2100      	movs	r1, #0
    2c6e:	4610      	mov	r0, r2
    2c70:	f001 bda0 	b.w	47b4 <nrf_gpio_cfg_sense_set>
    2c74:	2000002c 	.word	0x2000002c
    2c78:	40006000 	.word	0x40006000

00002c7c <nrfx_gpiote_pin_uninit>:
{
    2c7c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2c7e:	4b0e      	ldr	r3, [pc, #56]	; (2cb8 <nrfx_gpiote_pin_uninit+0x3c>)
    2c80:	f100 0208 	add.w	r2, r0, #8
{
    2c84:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2c86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    2c8a:	07db      	lsls	r3, r3, #31
    2c8c:	d511      	bpl.n	2cb2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    2c8e:	f7ff ffcd 	bl	2c2c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2c92:	4620      	mov	r0, r4
    2c94:	f7ff fdec 	bl	2870 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2c98:	a801      	add	r0, sp, #4
    2c9a:	9401      	str	r4, [sp, #4]
    2c9c:	f7ff fd88 	bl	27b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2ca0:	9b01      	ldr	r3, [sp, #4]
    2ca2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2ca6:	2202      	movs	r2, #2
    2ca8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2cac:	4803      	ldr	r0, [pc, #12]	; (2cbc <nrfx_gpiote_pin_uninit+0x40>)
}
    2cae:	b002      	add	sp, #8
    2cb0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2cb2:	4803      	ldr	r0, [pc, #12]	; (2cc0 <nrfx_gpiote_pin_uninit+0x44>)
    2cb4:	e7fb      	b.n	2cae <nrfx_gpiote_pin_uninit+0x32>
    2cb6:	bf00      	nop
    2cb8:	2000002c 	.word	0x2000002c
    2cbc:	0bad0000 	.word	0x0bad0000
    2cc0:	0bad0004 	.word	0x0bad0004

00002cc4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    2cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc8:	4b68      	ldr	r3, [pc, #416]	; (2e6c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    2cca:	4869      	ldr	r0, [pc, #420]	; (2e70 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2ccc:	4969      	ldr	r1, [pc, #420]	; (2e74 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    2cce:	2600      	movs	r6, #0
{
    2cd0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2cd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2cd4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cd6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    2cd8:	b135      	cbz	r5, 2ce8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    2cda:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    2cde:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ce0:	bf1e      	ittt	ne
    2ce2:	601c      	strne	r4, [r3, #0]
    2ce4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    2ce6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2ce8:	3304      	adds	r3, #4
    2cea:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    2cec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2cf0:	d1f1      	bne.n	2cd6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cf2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2e70 <nrfx_gpiote_irq_handler+0x1ac>
    2cf6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	f000 8099 	beq.w	2e32 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    2d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2d04:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    2d08:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2d0a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2d0e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    2d12:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2d14:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2d18:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    2d1c:	f10d 0a10 	add.w	sl, sp, #16
    2d20:	ea4f 1348 	mov.w	r3, r8, lsl #5
    2d24:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    2d26:	f04f 0b01 	mov.w	fp, #1
    2d2a:	e049      	b.n	2dc0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    2d2c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2d2e:	4a52      	ldr	r2, [pc, #328]	; (2e78 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    2d30:	fa94 f4a4 	rbit	r4, r4
    2d34:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    2d38:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2d3a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2d3c:	f104 0308 	add.w	r3, r4, #8
    2d40:	9403      	str	r4, [sp, #12]
    2d42:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    2d46:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    2d4a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2d4e:	fa0b f202 	lsl.w	r2, fp, r2
    2d52:	ea23 0302 	bic.w	r3, r3, r2
    2d56:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d5a:	a803      	add	r0, sp, #12
    2d5c:	f7ff fd28 	bl	27b0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d60:	9b03      	ldr	r3, [sp, #12]
    2d62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2d66:	08b9      	lsrs	r1, r7, #2
    2d68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    2d6c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    2d70:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2d72:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    2d74:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    2d78:	d52c      	bpl.n	2dd4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    2d7a:	4620      	mov	r0, r4
    2d7c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d7e:	b2dd      	uxtb	r5, r3
    2d80:	f7ff fd2e 	bl	27e0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d84:	a803      	add	r0, sp, #12
    2d86:	9403      	str	r4, [sp, #12]
    2d88:	f7ff fd12 	bl	27b0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d8c:	9b03      	ldr	r3, [sp, #12]
    2d8e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2d92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2d96:	f3c3 4301 	ubfx	r3, r3, #16, #2
    2d9a:	429d      	cmp	r5, r3
    2d9c:	d107      	bne.n	2dae <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2d9e:	2100      	movs	r1, #0
    2da0:	4620      	mov	r0, r4
    2da2:	f001 fd07 	bl	47b4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2da6:	4629      	mov	r1, r5
    2da8:	4620      	mov	r0, r4
    2daa:	f001 fd03 	bl	47b4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2dae:	a803      	add	r0, sp, #12
    2db0:	9403      	str	r4, [sp, #12]
    2db2:	f7ff fcfd 	bl	27b0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    2db6:	9b03      	ldr	r3, [sp, #12]
    2db8:	fa0b f303 	lsl.w	r3, fp, r3
    2dbc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    2dc0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    2dc4:	2c00      	cmp	r4, #0
    2dc6:	d1b1      	bne.n	2d2c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2dc8:	f1b8 0f00 	cmp.w	r8, #0
    2dcc:	d11d      	bne.n	2e0a <nrfx_gpiote_irq_handler+0x146>
    2dce:	f04f 0801 	mov.w	r8, #1
    2dd2:	e7a5      	b.n	2d20 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2dd4:	2b02      	cmp	r3, #2
    2dd6:	d10c      	bne.n	2df2 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2dd8:	2103      	movs	r1, #3
    2dda:	4620      	mov	r0, r4
    2ddc:	f001 fcea 	bl	47b4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2de0:	f005 0305 	and.w	r3, r5, #5
    2de4:	2b01      	cmp	r3, #1
    2de6:	d1e2      	bne.n	2dae <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    2de8:	4639      	mov	r1, r7
    2dea:	4620      	mov	r0, r4
    2dec:	f7ff fcf8 	bl	27e0 <call_handler>
    2df0:	e7dd      	b.n	2dae <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2df2:	2102      	movs	r1, #2
    2df4:	4620      	mov	r0, r4
    2df6:	9301      	str	r3, [sp, #4]
    2df8:	f001 fcdc 	bl	47b4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2dfc:	2d03      	cmp	r5, #3
    2dfe:	d0f3      	beq.n	2de8 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2e00:	9b01      	ldr	r3, [sp, #4]
    2e02:	2b03      	cmp	r3, #3
    2e04:	d1d3      	bne.n	2dae <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2e06:	2d02      	cmp	r5, #2
    2e08:	e7ed      	b.n	2de6 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    2e0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e0e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    2e12:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    2e16:	4919      	ldr	r1, [pc, #100]	; (2e7c <nrfx_gpiote_irq_handler+0x1b8>)
    2e18:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    2e1c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2e1e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2e22:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    2e26:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    2e28:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    2e2a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    2e2e:	f47f af73 	bne.w	2d18 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    2e32:	2401      	movs	r4, #1
    while (mask)
    2e34:	b916      	cbnz	r6, 2e3c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    2e36:	b007      	add	sp, #28
    2e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    2e3c:	fa96 f3a6 	rbit	r3, r6
    2e40:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    2e44:	fa04 f203 	lsl.w	r2, r4, r3
    2e48:	009b      	lsls	r3, r3, #2
    2e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2e52:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2e56:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    2e5a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    2e5e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    2e62:	f3c1 4101 	ubfx	r1, r1, #16, #2
    2e66:	f7ff fcbb 	bl	27e0 <call_handler>
    2e6a:	e7e3      	b.n	2e34 <nrfx_gpiote_irq_handler+0x170>
    2e6c:	40006100 	.word	0x40006100
    2e70:	40006000 	.word	0x40006000
    2e74:	40006120 	.word	0x40006120
    2e78:	2000002c 	.word	0x2000002c
    2e7c:	50000300 	.word	0x50000300

00002e80 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e80:	4b0f      	ldr	r3, [pc, #60]	; (2ec0 <z_sys_init_run_level+0x40>)
{
    2e82:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e84:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2e88:	3001      	adds	r0, #1
    2e8a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2e8e:	42a6      	cmp	r6, r4
    2e90:	d800      	bhi.n	2e94 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2e92:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2e94:	e9d4 3500 	ldrd	r3, r5, [r4]
    2e98:	4628      	mov	r0, r5
    2e9a:	4798      	blx	r3
		if (dev != NULL) {
    2e9c:	b16d      	cbz	r5, 2eba <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    2e9e:	b138      	cbz	r0, 2eb0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2ea0:	2800      	cmp	r0, #0
    2ea2:	bfb8      	it	lt
    2ea4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    2ea6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    2ea8:	28ff      	cmp	r0, #255	; 0xff
    2eaa:	bfa8      	it	ge
    2eac:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    2eae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2eb0:	68ea      	ldr	r2, [r5, #12]
    2eb2:	7853      	ldrb	r3, [r2, #1]
    2eb4:	f043 0301 	orr.w	r3, r3, #1
    2eb8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2eba:	3408      	adds	r4, #8
    2ebc:	e7e7      	b.n	2e8e <z_sys_init_run_level+0xe>
    2ebe:	bf00      	nop
    2ec0:	00004de0 	.word	0x00004de0

00002ec4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2ec4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2ec6:	4b0a      	ldr	r3, [pc, #40]	; (2ef0 <bg_thread_main+0x2c>)
    2ec8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2eca:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    2ecc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2ece:	f7ff ffd7 	bl	2e80 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2ed2:	f000 ff4d 	bl	3d70 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    2ed6:	2004      	movs	r0, #4
    2ed8:	f7ff ffd2 	bl	2e80 <z_sys_init_run_level>

	z_init_static_threads();
    2edc:	f000 f930 	bl	3140 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    2ee0:	f7fd fa78 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2ee4:	4a03      	ldr	r2, [pc, #12]	; (2ef4 <bg_thread_main+0x30>)
    2ee6:	7b13      	ldrb	r3, [r2, #12]
    2ee8:	f023 0301 	bic.w	r3, r3, #1
    2eec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2eee:	bd08      	pop	{r3, pc}
    2ef0:	20000a81 	.word	0x20000a81
    2ef4:	20000208 	.word	0x20000208

00002ef8 <z_bss_zero>:
{
    2ef8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    2efa:	4803      	ldr	r0, [pc, #12]	; (2f08 <z_bss_zero+0x10>)
    2efc:	4a03      	ldr	r2, [pc, #12]	; (2f0c <z_bss_zero+0x14>)
    2efe:	2100      	movs	r1, #0
    2f00:	1a12      	subs	r2, r2, r0
    2f02:	f001 fc8d 	bl	4820 <z_early_memset>
}
    2f06:	bd08      	pop	{r3, pc}
    2f08:	20000168 	.word	0x20000168
    2f0c:	20000a84 	.word	0x20000a84

00002f10 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    2f10:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    2f12:	2300      	movs	r3, #0
{
    2f14:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    2f16:	2201      	movs	r2, #1
    2f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    2f1c:	4e13      	ldr	r6, [pc, #76]	; (2f6c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2f1e:	4d14      	ldr	r5, [pc, #80]	; (2f70 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    2f20:	9301      	str	r3, [sp, #4]
    2f22:	220f      	movs	r2, #15
    2f24:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2f28:	4912      	ldr	r1, [pc, #72]	; (2f74 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2f2a:	2318      	movs	r3, #24
    2f2c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    2f30:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    2f34:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    2f36:	f44f 70c0 	mov.w	r0, #384	; 0x180
    2f3a:	fb00 1104 	mla	r1, r0, r4, r1
    2f3e:	4b0e      	ldr	r3, [pc, #56]	; (2f78 <z_init_cpu+0x68>)
    2f40:	9500      	str	r5, [sp, #0]
    2f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2f46:	4630      	mov	r0, r6
    2f48:	f000 f8c8 	bl	30dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2f4c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    2f4e:	4a0b      	ldr	r2, [pc, #44]	; (2f7c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    2f50:	60ee      	str	r6, [r5, #12]
    2f52:	f023 0304 	bic.w	r3, r3, #4
    2f56:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    2f58:	f44f 6304 	mov.w	r3, #2112	; 0x840
    2f5c:	fb04 3303 	mla	r3, r4, r3, r3
    2f60:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    2f62:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    2f64:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    2f66:	b006      	add	sp, #24
    2f68:	bd70      	pop	{r4, r5, r6, pc}
    2f6a:	bf00      	nop
    2f6c:	20000188 	.word	0x20000188
    2f70:	20000870 	.word	0x20000870
    2f74:	20001300 	.word	0x20001300
    2f78:	000031f9 	.word	0x000031f9
    2f7c:	20000ac0 	.word	0x20000ac0

00002f80 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2f80:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    2f82:	2000      	movs	r0, #0
{
    2f84:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    2f86:	f7ff ff7b 	bl	2e80 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2f8a:	4b2d      	ldr	r3, [pc, #180]	; (3040 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2f8c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2f90:	4d2c      	ldr	r5, [pc, #176]	; (3044 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    2f92:	4e2d      	ldr	r6, [pc, #180]	; (3048 <z_cstart+0xc8>)
    2f94:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2f96:	4f2d      	ldr	r7, [pc, #180]	; (304c <z_cstart+0xcc>)
    2f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2f9c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f9e:	2400      	movs	r4, #0
    2fa0:	23e0      	movs	r3, #224	; 0xe0
    2fa2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2fa6:	77ec      	strb	r4, [r5, #31]
    2fa8:	762c      	strb	r4, [r5, #24]
    2faa:	766c      	strb	r4, [r5, #25]
    2fac:	76ac      	strb	r4, [r5, #26]
    2fae:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2fb4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2fb8:	626b      	str	r3, [r5, #36]	; 0x24
    2fba:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2fbe:	f7fe fb9d 	bl	16fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2fc2:	f7fe f96b 	bl	129c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2fc6:	f04f 33ff 	mov.w	r3, #4294967295
    2fca:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2fcc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2fce:	f7fe fccf 	bl	1970 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2fd2:	f7fe fc35 	bl	1840 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2fd6:	f240 1301 	movw	r3, #257	; 0x101
    2fda:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2fde:	ab06      	add	r3, sp, #24
    2fe0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    2fe2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    2fe6:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2fe8:	f001 fbf3 	bl	47d2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    2fec:	2001      	movs	r0, #1
    2fee:	f7ff ff47 	bl	2e80 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    2ff2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    2ff4:	4d16      	ldr	r5, [pc, #88]	; (3050 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    2ff6:	f7ff ff43 	bl	2e80 <z_sys_init_run_level>
	z_sched_init();
    2ffa:	f000 fc51 	bl	38a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2ffe:	4b15      	ldr	r3, [pc, #84]	; (3054 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3000:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3002:	9305      	str	r3, [sp, #20]
    3004:	2301      	movs	r3, #1
    3006:	4914      	ldr	r1, [pc, #80]	; (3058 <z_cstart+0xd8>)
    3008:	9400      	str	r4, [sp, #0]
    300a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    300e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3012:	463b      	mov	r3, r7
    3014:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3018:	4628      	mov	r0, r5
    301a:	f000 f85f 	bl	30dc <z_setup_new_thread>
    301e:	7b6a      	ldrb	r2, [r5, #13]
    3020:	4606      	mov	r6, r0
    3022:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3026:	4628      	mov	r0, r5
    3028:	736a      	strb	r2, [r5, #13]
    302a:	f001 fcc2 	bl	49b2 <z_ready_thread>
	z_init_cpu(0);
    302e:	4620      	mov	r0, r4
    3030:	f7ff ff6e 	bl	2f10 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3034:	463a      	mov	r2, r7
    3036:	4631      	mov	r1, r6
    3038:	4628      	mov	r0, r5
    303a:	f7fe fa27 	bl	148c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    303e:	bf00      	nop
    3040:	20001300 	.word	0x20001300
    3044:	e000ed00 	.word	0xe000ed00
    3048:	20000870 	.word	0x20000870
    304c:	00002ec5 	.word	0x00002ec5
    3050:	20000208 	.word	0x20000208
    3054:	00004f4e 	.word	0x00004f4e
    3058:	20001480 	.word	0x20001480

0000305c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    305c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    305e:	4c06      	ldr	r4, [pc, #24]	; (3078 <init_mem_slab_module+0x1c>)
    3060:	4d06      	ldr	r5, [pc, #24]	; (307c <init_mem_slab_module+0x20>)
	int rc = 0;
    3062:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3064:	42ac      	cmp	r4, r5
    3066:	d300      	bcc.n	306a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    3068:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    306a:	4620      	mov	r0, r4
    306c:	f001 fbdc 	bl	4828 <create_free_list>
		if (rc < 0) {
    3070:	2800      	cmp	r0, #0
    3072:	dbf9      	blt.n	3068 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3074:	341c      	adds	r4, #28
    3076:	e7f5      	b.n	3064 <init_mem_slab_module+0x8>
    3078:	20000116 	.word	0x20000116
    307c:	20000116 	.word	0x20000116

00003080 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3080:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3082:	460c      	mov	r4, r1
	__asm__ volatile(
    3084:	f04f 0520 	mov.w	r5, #32
    3088:	f3ef 8111 	mrs	r1, BASEPRI
    308c:	f385 8812 	msr	BASEPRI_MAX, r5
    3090:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3094:	6945      	ldr	r5, [r0, #20]
    3096:	b15d      	cbz	r5, 30b0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3098:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    309a:	682b      	ldr	r3, [r5, #0]
    309c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    309e:	6983      	ldr	r3, [r0, #24]
    30a0:	3301      	adds	r3, #1
    30a2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    30a4:	2000      	movs	r0, #0
	__asm__ volatile(
    30a6:	f381 8811 	msr	BASEPRI, r1
    30aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    30ae:	e011      	b.n	30d4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    30b0:	ea52 0603 	orrs.w	r6, r2, r3
    30b4:	d103      	bne.n	30be <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    30b6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    30b8:	f06f 000b 	mvn.w	r0, #11
    30bc:	e7f3      	b.n	30a6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    30be:	e9cd 2300 	strd	r2, r3, [sp]
    30c2:	4602      	mov	r2, r0
    30c4:	3008      	adds	r0, #8
    30c6:	f000 faf5 	bl	36b4 <z_pend_curr>
		if (result == 0) {
    30ca:	b918      	cbnz	r0, 30d4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    30cc:	4b02      	ldr	r3, [pc, #8]	; (30d8 <k_mem_slab_alloc+0x58>)
    30ce:	689b      	ldr	r3, [r3, #8]
    30d0:	695b      	ldr	r3, [r3, #20]
    30d2:	6023      	str	r3, [r4, #0]
}
    30d4:	b002      	add	sp, #8
    30d6:	bd70      	pop	{r4, r5, r6, pc}
    30d8:	20000870 	.word	0x20000870

000030dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    30dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    30e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    30e2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    30e4:	2604      	movs	r6, #4
    30e6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    30e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    30ea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    30ec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    30f0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    30f2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    30f4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    30f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    30fa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    30fc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3100:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3102:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3106:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    310a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    310c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    310e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3110:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3114:	9202      	str	r2, [sp, #8]
    3116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3118:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    311a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    311c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    311e:	9200      	str	r2, [sp, #0]
    3120:	4642      	mov	r2, r8
{
    3122:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3124:	f7fe f980 	bl	1428 <arch_new_thread>
	if (!_current) {
    3128:	4b04      	ldr	r3, [pc, #16]	; (313c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    312a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    312c:	689b      	ldr	r3, [r3, #8]
    312e:	b103      	cbz	r3, 3132 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3132:	6723      	str	r3, [r4, #112]	; 0x70
}
    3134:	4640      	mov	r0, r8
    3136:	b004      	add	sp, #16
    3138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    313c:	20000870 	.word	0x20000870

00003140 <z_init_static_threads>:
{
    3140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3144:	4c29      	ldr	r4, [pc, #164]	; (31ec <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3146:	4d2a      	ldr	r5, [pc, #168]	; (31f0 <z_init_static_threads+0xb0>)
{
    3148:	b087      	sub	sp, #28
    314a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    314c:	42ae      	cmp	r6, r5
    314e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3152:	d30f      	bcc.n	3174 <z_init_static_threads+0x34>
	k_sched_lock();
    3154:	f000 fb74 	bl	3840 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3158:	4c24      	ldr	r4, [pc, #144]	; (31ec <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    315a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 31f4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    315e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3162:	f240 37e7 	movw	r7, #999	; 0x3e7
    3166:	42ac      	cmp	r4, r5
    3168:	d320      	bcc.n	31ac <z_init_static_threads+0x6c>
}
    316a:	b007      	add	sp, #28
    316c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3170:	f000 bb7a 	b.w	3868 <k_sched_unlock>
		z_setup_new_thread(
    3174:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3178:	9305      	str	r3, [sp, #20]
    317a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    317e:	9304      	str	r3, [sp, #16]
    3180:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3184:	9303      	str	r3, [sp, #12]
    3186:	f854 3c18 	ldr.w	r3, [r4, #-24]
    318a:	9302      	str	r3, [sp, #8]
    318c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3190:	9301      	str	r3, [sp, #4]
    3192:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3196:	9300      	str	r3, [sp, #0]
    3198:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    319c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    31a0:	f7ff ff9c 	bl	30dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    31a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    31a8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    31aa:	e7ce      	b.n	314a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    31ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31ae:	1c5a      	adds	r2, r3, #1
    31b0:	d00d      	beq.n	31ce <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    31b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    31b6:	2100      	movs	r1, #0
    31b8:	4638      	mov	r0, r7
    31ba:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    31be:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    31c2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    31c6:	d104      	bne.n	31d2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    31c8:	4640      	mov	r0, r8
    31ca:	f000 fae9 	bl	37a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    31ce:	3430      	adds	r4, #48	; 0x30
    31d0:	e7c9      	b.n	3166 <z_init_static_threads+0x26>
    31d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    31d6:	2300      	movs	r3, #0
    31d8:	f7fc ff92 	bl	100 <__aeabi_uldivmod>
    31dc:	4602      	mov	r2, r0
    31de:	460b      	mov	r3, r1
    31e0:	f108 0018 	add.w	r0, r8, #24
    31e4:	4649      	mov	r1, r9
    31e6:	f000 fcd1 	bl	3b8c <z_add_timeout>
    31ea:	e7f0      	b.n	31ce <z_init_static_threads+0x8e>
    31ec:	00004ce4 	.word	0x00004ce4
    31f0:	00004ce4 	.word	0x00004ce4
    31f4:	0000491f 	.word	0x0000491f

000031f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    31f8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    31fa:	4c0b      	ldr	r4, [pc, #44]	; (3228 <idle+0x30>)
	return !z_sys_post_kernel;
    31fc:	4d0b      	ldr	r5, [pc, #44]	; (322c <idle+0x34>)
	__asm__ volatile(
    31fe:	f04f 0220 	mov.w	r2, #32
    3202:	f3ef 8311 	mrs	r3, BASEPRI
    3206:	f382 8812 	msr	BASEPRI_MAX, r2
    320a:	f3bf 8f6f 	isb	sy
    320e:	f001 fc28 	bl	4a62 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3212:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3214:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3216:	b913      	cbnz	r3, 321e <idle+0x26>
	arch_cpu_idle();
    3218:	f7fe f846 	bl	12a8 <arch_cpu_idle>
}
    321c:	e7ef      	b.n	31fe <idle+0x6>
    321e:	f7fd fe83 	bl	f28 <pm_system_suspend>
    3222:	2800      	cmp	r0, #0
    3224:	d1eb      	bne.n	31fe <idle+0x6>
    3226:	e7f7      	b.n	3218 <idle+0x20>
    3228:	20000870 	.word	0x20000870
    322c:	20000a81 	.word	0x20000a81

00003230 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3234:	4604      	mov	r4, r0
    3236:	4617      	mov	r7, r2
    3238:	461e      	mov	r6, r3
    323a:	f04f 0320 	mov.w	r3, #32
    323e:	f3ef 8811 	mrs	r8, BASEPRI
    3242:	f383 8812 	msr	BASEPRI_MAX, r3
    3246:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    324a:	68c3      	ldr	r3, [r0, #12]
    324c:	4a33      	ldr	r2, [pc, #204]	; (331c <z_impl_k_mutex_lock+0xec>)
    324e:	b17b      	cbz	r3, 3270 <z_impl_k_mutex_lock+0x40>
    3250:	6880      	ldr	r0, [r0, #8]
    3252:	6891      	ldr	r1, [r2, #8]
    3254:	4288      	cmp	r0, r1
    3256:	d019      	beq.n	328c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3258:	ea57 0306 	orrs.w	r3, r7, r6
    325c:	d118      	bne.n	3290 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    325e:	f388 8811 	msr	BASEPRI, r8
    3262:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3266:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    326a:	b002      	add	sp, #8
    326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3270:	6891      	ldr	r1, [r2, #8]
    3272:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3276:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3278:	3301      	adds	r3, #1
    327a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    327c:	6893      	ldr	r3, [r2, #8]
    327e:	60a3      	str	r3, [r4, #8]
    3280:	f388 8811 	msr	BASEPRI, r8
    3284:	f3bf 8f6f 	isb	sy
		return 0;
    3288:	2000      	movs	r0, #0
    328a:	e7ee      	b.n	326a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    328c:	6921      	ldr	r1, [r4, #16]
    328e:	e7f2      	b.n	3276 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3290:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3294:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3298:	4299      	cmp	r1, r3
    329a:	bfa8      	it	ge
    329c:	4619      	movge	r1, r3
    329e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    32a2:	4291      	cmp	r1, r2
    32a4:	bfb8      	it	lt
    32a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    32a8:	428b      	cmp	r3, r1
    32aa:	dd2e      	ble.n	330a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    32ac:	f001 fb16 	bl	48dc <adjust_owner_prio.isra.0>
    32b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    32b2:	e9cd 7600 	strd	r7, r6, [sp]
    32b6:	481a      	ldr	r0, [pc, #104]	; (3320 <z_impl_k_mutex_lock+0xf0>)
    32b8:	4622      	mov	r2, r4
    32ba:	4641      	mov	r1, r8
    32bc:	f000 f9fa 	bl	36b4 <z_pend_curr>
	if (got_mutex == 0) {
    32c0:	2800      	cmp	r0, #0
    32c2:	d0e1      	beq.n	3288 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    32c4:	f04f 0320 	mov.w	r3, #32
    32c8:	f3ef 8611 	mrs	r6, BASEPRI
    32cc:	f383 8812 	msr	BASEPRI_MAX, r3
    32d0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    32d4:	68a0      	ldr	r0, [r4, #8]
    32d6:	b1d0      	cbz	r0, 330e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    32d8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    32da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    32dc:	429c      	cmp	r4, r3
    32de:	d00a      	beq.n	32f6 <z_impl_k_mutex_lock+0xc6>
    32e0:	b14b      	cbz	r3, 32f6 <z_impl_k_mutex_lock+0xc6>
    32e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    32e6:	4299      	cmp	r1, r3
    32e8:	bfa8      	it	ge
    32ea:	4619      	movge	r1, r3
    32ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    32f0:	4299      	cmp	r1, r3
    32f2:	bfb8      	it	lt
    32f4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    32f6:	f001 faf1 	bl	48dc <adjust_owner_prio.isra.0>
    32fa:	b140      	cbz	r0, 330e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    32fc:	4808      	ldr	r0, [pc, #32]	; (3320 <z_impl_k_mutex_lock+0xf0>)
    32fe:	4631      	mov	r1, r6
    3300:	f000 fa3c 	bl	377c <z_reschedule>
	return -EAGAIN;
    3304:	f06f 000a 	mvn.w	r0, #10
    3308:	e7af      	b.n	326a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    330a:	2500      	movs	r5, #0
    330c:	e7d1      	b.n	32b2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    330e:	2d00      	cmp	r5, #0
    3310:	d1f4      	bne.n	32fc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    3312:	f386 8811 	msr	BASEPRI, r6
    3316:	f3bf 8f6f 	isb	sy
    331a:	e7f3      	b.n	3304 <z_impl_k_mutex_lock+0xd4>
    331c:	20000870 	.word	0x20000870
    3320:	20000a82 	.word	0x20000a82

00003324 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3324:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3326:	6883      	ldr	r3, [r0, #8]
{
    3328:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    332a:	b36b      	cbz	r3, 3388 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    332c:	4a19      	ldr	r2, [pc, #100]	; (3394 <z_impl_k_mutex_unlock+0x70>)
    332e:	6892      	ldr	r2, [r2, #8]
    3330:	4293      	cmp	r3, r2
    3332:	d12c      	bne.n	338e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3334:	68c3      	ldr	r3, [r0, #12]
    3336:	2b01      	cmp	r3, #1
    3338:	d903      	bls.n	3342 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    333a:	3b01      	subs	r3, #1
    333c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    333e:	2000      	movs	r0, #0
}
    3340:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3342:	f04f 0320 	mov.w	r3, #32
    3346:	f3ef 8511 	mrs	r5, BASEPRI
    334a:	f383 8812 	msr	BASEPRI_MAX, r3
    334e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3352:	6901      	ldr	r1, [r0, #16]
    3354:	6880      	ldr	r0, [r0, #8]
    3356:	f001 fac1 	bl	48dc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    335a:	4620      	mov	r0, r4
    335c:	f001 fb39 	bl	49d2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3360:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3362:	b158      	cbz	r0, 337c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3364:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3368:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    336a:	2200      	movs	r2, #0
    336c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    336e:	f001 fb20 	bl	49b2 <z_ready_thread>
		z_reschedule(&lock, key);
    3372:	4809      	ldr	r0, [pc, #36]	; (3398 <z_impl_k_mutex_unlock+0x74>)
    3374:	4629      	mov	r1, r5
    3376:	f000 fa01 	bl	377c <z_reschedule>
    337a:	e7e0      	b.n	333e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    337c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    337e:	f385 8811 	msr	BASEPRI, r5
    3382:	f3bf 8f6f 	isb	sy
    3386:	e7da      	b.n	333e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3388:	f06f 0015 	mvn.w	r0, #21
    338c:	e7d8      	b.n	3340 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    338e:	f04f 30ff 	mov.w	r0, #4294967295
    3392:	e7d5      	b.n	3340 <z_impl_k_mutex_unlock+0x1c>
    3394:	20000870 	.word	0x20000870
    3398:	20000a82 	.word	0x20000a82

0000339c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    339c:	b538      	push	{r3, r4, r5, lr}
    339e:	4604      	mov	r4, r0
	__asm__ volatile(
    33a0:	f04f 0320 	mov.w	r3, #32
    33a4:	f3ef 8511 	mrs	r5, BASEPRI
    33a8:	f383 8812 	msr	BASEPRI_MAX, r3
    33ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    33b0:	f001 fb0f 	bl	49d2 <z_unpend_first_thread>

	if (thread != NULL) {
    33b4:	b148      	cbz	r0, 33ca <z_impl_k_sem_give+0x2e>
    33b6:	2200      	movs	r2, #0
    33b8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    33ba:	f001 fafa 	bl	49b2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    33be:	4629      	mov	r1, r5
    33c0:	4805      	ldr	r0, [pc, #20]	; (33d8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    33c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    33c6:	f000 b9d9 	b.w	377c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    33ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    33ce:	429a      	cmp	r2, r3
    33d0:	bf18      	it	ne
    33d2:	3301      	addne	r3, #1
    33d4:	60a3      	str	r3, [r4, #8]
}
    33d6:	e7f2      	b.n	33be <z_impl_k_sem_give+0x22>
    33d8:	20000a82 	.word	0x20000a82

000033dc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    33dc:	b513      	push	{r0, r1, r4, lr}
    33de:	f04f 0420 	mov.w	r4, #32
    33e2:	f3ef 8111 	mrs	r1, BASEPRI
    33e6:	f384 8812 	msr	BASEPRI_MAX, r4
    33ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    33ee:	6884      	ldr	r4, [r0, #8]
    33f0:	b144      	cbz	r4, 3404 <z_impl_k_sem_take+0x28>
		sem->count--;
    33f2:	3c01      	subs	r4, #1
    33f4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    33f6:	f381 8811 	msr	BASEPRI, r1
    33fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    33fe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3400:	b002      	add	sp, #8
    3402:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3404:	ea52 0403 	orrs.w	r4, r2, r3
    3408:	d106      	bne.n	3418 <z_impl_k_sem_take+0x3c>
    340a:	f381 8811 	msr	BASEPRI, r1
    340e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3412:	f06f 000f 	mvn.w	r0, #15
    3416:	e7f3      	b.n	3400 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3418:	e9cd 2300 	strd	r2, r3, [sp]
    341c:	4602      	mov	r2, r0
    341e:	4802      	ldr	r0, [pc, #8]	; (3428 <z_impl_k_sem_take+0x4c>)
    3420:	f000 f948 	bl	36b4 <z_pend_curr>
	return ret;
    3424:	e7ec      	b.n	3400 <z_impl_k_sem_take+0x24>
    3426:	bf00      	nop
    3428:	20000a82 	.word	0x20000a82

0000342c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    342c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    342e:	4d07      	ldr	r5, [pc, #28]	; (344c <z_reset_time_slice+0x20>)
    3430:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3432:	b154      	cbz	r4, 344a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3434:	f7ff f806 	bl	2444 <sys_clock_elapsed>
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <z_reset_time_slice+0x24>)
    343a:	4404      	add	r4, r0
    343c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    343e:	6828      	ldr	r0, [r5, #0]
    3440:	2100      	movs	r1, #0
	}
}
    3442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3446:	f001 bb1c 	b.w	4a82 <z_set_timeout_expiry>
}
    344a:	bd38      	pop	{r3, r4, r5, pc}
    344c:	200008a0 	.word	0x200008a0
    3450:	20000870 	.word	0x20000870

00003454 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3454:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3456:	4d0d      	ldr	r5, [pc, #52]	; (348c <update_cache+0x38>)
    3458:	462b      	mov	r3, r5
    345a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    345e:	429c      	cmp	r4, r3
    3460:	d000      	beq.n	3464 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3462:	b904      	cbnz	r4, 3466 <update_cache+0x12>
    3464:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3466:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3468:	b938      	cbnz	r0, 347a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    346a:	7b5a      	ldrb	r2, [r3, #13]
    346c:	06d2      	lsls	r2, r2, #27
    346e:	d104      	bne.n	347a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3470:	69a2      	ldr	r2, [r4, #24]
    3472:	b912      	cbnz	r2, 347a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3474:	89da      	ldrh	r2, [r3, #14]
    3476:	2a7f      	cmp	r2, #127	; 0x7f
    3478:	d805      	bhi.n	3486 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    347a:	429c      	cmp	r4, r3
    347c:	d002      	beq.n	3484 <update_cache+0x30>
			z_reset_time_slice(thread);
    347e:	4620      	mov	r0, r4
    3480:	f7ff ffd4 	bl	342c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3484:	4623      	mov	r3, r4
    3486:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3488:	bd38      	pop	{r3, r4, r5, pc}
    348a:	bf00      	nop
    348c:	20000870 	.word	0x20000870

00003490 <move_thread_to_end_of_prio_q>:
{
    3490:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3492:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3496:	7b43      	ldrb	r3, [r0, #13]
    3498:	2a00      	cmp	r2, #0
{
    349a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    349c:	da04      	bge.n	34a8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    349e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34a2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    34a4:	f001 fa29 	bl	48fa <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    34a8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    34aa:	4a15      	ldr	r2, [pc, #84]	; (3500 <move_thread_to_end_of_prio_q+0x70>)
    34ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34b0:	4610      	mov	r0, r2
    34b2:	734b      	strb	r3, [r1, #13]
    34b4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    34b8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34ba:	4283      	cmp	r3, r0
    34bc:	bf08      	it	eq
    34be:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    34c0:	b923      	cbnz	r3, 34cc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    34c2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    34c6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    34c8:	6251      	str	r1, [r2, #36]	; 0x24
}
    34ca:	e00c      	b.n	34e6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    34cc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    34d0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    34d4:	42b5      	cmp	r5, r6
    34d6:	d00e      	beq.n	34f6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    34d8:	42ae      	cmp	r6, r5
    34da:	dd0c      	ble.n	34f6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    34dc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    34de:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    34e2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    34e4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    34e6:	6890      	ldr	r0, [r2, #8]
    34e8:	1a43      	subs	r3, r0, r1
    34ea:	4258      	negs	r0, r3
}
    34ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    34f0:	4158      	adcs	r0, r3
    34f2:	f7ff bfaf 	b.w	3454 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    34f6:	429c      	cmp	r4, r3
    34f8:	d0e3      	beq.n	34c2 <move_thread_to_end_of_prio_q+0x32>
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	e7e0      	b.n	34c0 <move_thread_to_end_of_prio_q+0x30>
    34fe:	bf00      	nop
    3500:	20000870 	.word	0x20000870

00003504 <ready_thread>:
{
    3504:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3506:	f990 300d 	ldrsb.w	r3, [r0, #13]
    350a:	7b42      	ldrb	r2, [r0, #13]
    350c:	2b00      	cmp	r3, #0
    350e:	db29      	blt.n	3564 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3510:	06d3      	lsls	r3, r2, #27
    3512:	d127      	bne.n	3564 <ready_thread+0x60>
	return node->next != NULL;
    3514:	6983      	ldr	r3, [r0, #24]
    3516:	bb2b      	cbnz	r3, 3564 <ready_thread+0x60>
	return list->head == list;
    3518:	4913      	ldr	r1, [pc, #76]	; (3568 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    351a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    351e:	7342      	strb	r2, [r0, #13]
    3520:	460a      	mov	r2, r1
    3522:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3526:	4294      	cmp	r4, r2
    3528:	bf18      	it	ne
    352a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    352c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    352e:	b923      	cbnz	r3, 353a <ready_thread+0x36>
	node->prev = tail;
    3530:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3534:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3536:	6248      	str	r0, [r1, #36]	; 0x24
}
    3538:	e00c      	b.n	3554 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    353a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    353e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3542:	42b5      	cmp	r5, r6
    3544:	d00a      	beq.n	355c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3546:	42ae      	cmp	r6, r5
    3548:	dd08      	ble.n	355c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    354a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    354c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3550:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3552:	6058      	str	r0, [r3, #4]
}
    3554:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3556:	2000      	movs	r0, #0
    3558:	f7ff bf7c 	b.w	3454 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    355c:	42a3      	cmp	r3, r4
    355e:	d0e7      	beq.n	3530 <ready_thread+0x2c>
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	e7e4      	b.n	352e <ready_thread+0x2a>
}
    3564:	bc70      	pop	{r4, r5, r6}
    3566:	4770      	bx	lr
    3568:	20000870 	.word	0x20000870

0000356c <unready_thread>:
{
    356c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    356e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3572:	7b43      	ldrb	r3, [r0, #13]
    3574:	2a00      	cmp	r2, #0
{
    3576:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3578:	da04      	bge.n	3584 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    357a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    357e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3580:	f001 f9bb 	bl	48fa <sys_dlist_remove>
	update_cache(thread == _current);
    3584:	4b04      	ldr	r3, [pc, #16]	; (3598 <unready_thread+0x2c>)
    3586:	6898      	ldr	r0, [r3, #8]
    3588:	1a43      	subs	r3, r0, r1
    358a:	4258      	negs	r0, r3
    358c:	4158      	adcs	r0, r3
}
    358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3592:	f7ff bf5f 	b.w	3454 <update_cache>
    3596:	bf00      	nop
    3598:	20000870 	.word	0x20000870

0000359c <pend_locked>:
{
    359c:	b570      	push	{r4, r5, r6, lr}
    359e:	4615      	mov	r5, r2
    35a0:	461c      	mov	r4, r3
    35a2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    35a4:	f001 f9dd 	bl	4962 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    35a8:	f1b4 3fff 	cmp.w	r4, #4294967295
    35ac:	bf08      	it	eq
    35ae:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    35b2:	d008      	beq.n	35c6 <pend_locked+0x2a>
    35b4:	462a      	mov	r2, r5
    35b6:	4623      	mov	r3, r4
    35b8:	f106 0018 	add.w	r0, r6, #24
    35bc:	4902      	ldr	r1, [pc, #8]	; (35c8 <pend_locked+0x2c>)
}
    35be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    35c2:	f000 bae3 	b.w	3b8c <z_add_timeout>
    35c6:	bd70      	pop	{r4, r5, r6, pc}
    35c8:	0000491f 	.word	0x0000491f

000035cc <k_sched_time_slice_set>:
{
    35cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ce:	4604      	mov	r4, r0
    35d0:	460d      	mov	r5, r1
	__asm__ volatile(
    35d2:	f04f 0320 	mov.w	r3, #32
    35d6:	f3ef 8711 	mrs	r7, BASEPRI
    35da:	f383 8812 	msr	BASEPRI_MAX, r3
    35de:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    35e2:	2600      	movs	r6, #0
    35e4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    35e8:	f240 30e7 	movw	r0, #999	; 0x3e7
    35ec:	4631      	mov	r1, r6
    35ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35f2:	2300      	movs	r3, #0
    35f4:	fbe4 010c 	umlal	r0, r1, r4, ip
    35f8:	f7fc fd82 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    35fc:	42b4      	cmp	r4, r6
    35fe:	dd02      	ble.n	3606 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    3600:	2802      	cmp	r0, #2
    3602:	bfb8      	it	lt
    3604:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3606:	4a07      	ldr	r2, [pc, #28]	; (3624 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    3608:	4b07      	ldr	r3, [pc, #28]	; (3628 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    360a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    360c:	4a07      	ldr	r2, [pc, #28]	; (362c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    360e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    3610:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    3612:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    3614:	f7ff ff0a 	bl	342c <z_reset_time_slice>
	__asm__ volatile(
    3618:	f387 8811 	msr	BASEPRI, r7
    361c:	f3bf 8f6f 	isb	sy
}
    3620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3622:	bf00      	nop
    3624:	200008a0 	.word	0x200008a0
    3628:	20000870 	.word	0x20000870
    362c:	2000089c 	.word	0x2000089c

00003630 <z_time_slice>:
{
    3630:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3632:	f04f 0320 	mov.w	r3, #32
    3636:	f3ef 8511 	mrs	r5, BASEPRI
    363a:	f383 8812 	msr	BASEPRI_MAX, r3
    363e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3642:	4b17      	ldr	r3, [pc, #92]	; (36a0 <z_time_slice+0x70>)
    3644:	4a17      	ldr	r2, [pc, #92]	; (36a4 <z_time_slice+0x74>)
    3646:	689c      	ldr	r4, [r3, #8]
    3648:	6811      	ldr	r1, [r2, #0]
    364a:	428c      	cmp	r4, r1
    364c:	d107      	bne.n	365e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    364e:	4620      	mov	r0, r4
    3650:	f7ff feec 	bl	342c <z_reset_time_slice>
	__asm__ volatile(
    3654:	f385 8811 	msr	BASEPRI, r5
    3658:	f3bf 8f6f 	isb	sy
}
    365c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    365e:	2100      	movs	r1, #0
    3660:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3662:	4a11      	ldr	r2, [pc, #68]	; (36a8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3664:	6812      	ldr	r2, [r2, #0]
    3666:	b1c2      	cbz	r2, 369a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3668:	89e2      	ldrh	r2, [r4, #14]
    366a:	2a7f      	cmp	r2, #127	; 0x7f
    366c:	d815      	bhi.n	369a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    366e:	7b62      	ldrb	r2, [r4, #13]
    3670:	06d2      	lsls	r2, r2, #27
    3672:	d112      	bne.n	369a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3674:	4a0d      	ldr	r2, [pc, #52]	; (36ac <z_time_slice+0x7c>)
    3676:	f994 100e 	ldrsb.w	r1, [r4, #14]
    367a:	6812      	ldr	r2, [r2, #0]
    367c:	4291      	cmp	r1, r2
    367e:	db0c      	blt.n	369a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3680:	4a0b      	ldr	r2, [pc, #44]	; (36b0 <z_time_slice+0x80>)
    3682:	4294      	cmp	r4, r2
    3684:	d009      	beq.n	369a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3686:	691a      	ldr	r2, [r3, #16]
    3688:	4282      	cmp	r2, r0
    368a:	dc03      	bgt.n	3694 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    368c:	4620      	mov	r0, r4
    368e:	f7ff feff 	bl	3490 <move_thread_to_end_of_prio_q>
    3692:	e7dc      	b.n	364e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3694:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3696:	611a      	str	r2, [r3, #16]
    3698:	e7dc      	b.n	3654 <z_time_slice+0x24>
    369a:	2200      	movs	r2, #0
    369c:	e7fb      	b.n	3696 <z_time_slice+0x66>
    369e:	bf00      	nop
    36a0:	20000870 	.word	0x20000870
    36a4:	20000898 	.word	0x20000898
    36a8:	200008a0 	.word	0x200008a0
    36ac:	2000089c 	.word	0x2000089c
    36b0:	20000188 	.word	0x20000188

000036b4 <z_pend_curr>:
{
    36b4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    36b6:	480c      	ldr	r0, [pc, #48]	; (36e8 <z_pend_curr+0x34>)
    36b8:	4d0c      	ldr	r5, [pc, #48]	; (36ec <z_pend_curr+0x38>)
    36ba:	6886      	ldr	r6, [r0, #8]
    36bc:	602e      	str	r6, [r5, #0]
{
    36be:	460c      	mov	r4, r1
    36c0:	4611      	mov	r1, r2
    36c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    36c6:	f04f 0620 	mov.w	r6, #32
    36ca:	f3ef 8511 	mrs	r5, BASEPRI
    36ce:	f386 8812 	msr	BASEPRI_MAX, r6
    36d2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    36d6:	6880      	ldr	r0, [r0, #8]
    36d8:	f7ff ff60 	bl	359c <pend_locked>
	ret = arch_swap(key);
    36dc:	4620      	mov	r0, r4
}
    36de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36e2:	f7fd be4d 	b.w	1380 <arch_swap>
    36e6:	bf00      	nop
    36e8:	20000870 	.word	0x20000870
    36ec:	20000898 	.word	0x20000898

000036f0 <z_set_prio>:
{
    36f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f2:	4604      	mov	r4, r0
    36f4:	f04f 0320 	mov.w	r3, #32
    36f8:	f3ef 8611 	mrs	r6, BASEPRI
    36fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3700:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3704:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3706:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    3708:	b249      	sxtb	r1, r1
    370a:	d119      	bne.n	3740 <z_set_prio+0x50>
	return node->next != NULL;
    370c:	6985      	ldr	r5, [r0, #24]
    370e:	b9bd      	cbnz	r5, 3740 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3714:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3716:	f001 f8f0 	bl	48fa <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    371a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    371c:	4a16      	ldr	r2, [pc, #88]	; (3778 <z_set_prio+0x88>)
				thread->base.prio = prio;
    371e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    3720:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3724:	7343      	strb	r3, [r0, #13]
    3726:	4613      	mov	r3, r2
    3728:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    372c:	4298      	cmp	r0, r3
    372e:	bf18      	it	ne
    3730:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3732:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3734:	b95d      	cbnz	r5, 374e <z_set_prio+0x5e>
	node->prev = tail;
    3736:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    373a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    373c:	6254      	str	r4, [r2, #36]	; 0x24
}
    373e:	e011      	b.n	3764 <z_set_prio+0x74>
			thread->base.prio = prio;
    3740:	73a1      	strb	r1, [r4, #14]
    3742:	2000      	movs	r0, #0
	__asm__ volatile(
    3744:	f386 8811 	msr	BASEPRI, r6
    3748:	f3bf 8f6f 	isb	sy
}
    374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    374e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3752:	42b9      	cmp	r1, r7
    3754:	d00b      	beq.n	376e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3756:	428f      	cmp	r7, r1
    3758:	dd09      	ble.n	376e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    375a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    375c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3760:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3762:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3764:	2001      	movs	r0, #1
    3766:	f7ff fe75 	bl	3454 <update_cache>
    376a:	2001      	movs	r0, #1
    376c:	e7ea      	b.n	3744 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    376e:	42a8      	cmp	r0, r5
    3770:	d0e1      	beq.n	3736 <z_set_prio+0x46>
    3772:	682d      	ldr	r5, [r5, #0]
    3774:	e7de      	b.n	3734 <z_set_prio+0x44>
    3776:	bf00      	nop
    3778:	20000870 	.word	0x20000870

0000377c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    377c:	b949      	cbnz	r1, 3792 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    377e:	f3ef 8005 	mrs	r0, IPSR
    3782:	b930      	cbnz	r0, 3792 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3786:	69da      	ldr	r2, [r3, #28]
    3788:	689b      	ldr	r3, [r3, #8]
    378a:	429a      	cmp	r2, r3
    378c:	d001      	beq.n	3792 <z_reschedule+0x16>
    378e:	f7fd bdf7 	b.w	1380 <arch_swap>
    3792:	f381 8811 	msr	BASEPRI, r1
    3796:	f3bf 8f6f 	isb	sy
}
    379a:	4770      	bx	lr
    379c:	20000870 	.word	0x20000870

000037a0 <z_sched_start>:
{
    37a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    37a2:	f04f 0220 	mov.w	r2, #32
    37a6:	f3ef 8411 	mrs	r4, BASEPRI
    37aa:	f382 8812 	msr	BASEPRI_MAX, r2
    37ae:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    37b2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    37b4:	0751      	lsls	r1, r2, #29
    37b6:	d404      	bmi.n	37c2 <z_sched_start+0x22>
	__asm__ volatile(
    37b8:	f384 8811 	msr	BASEPRI, r4
    37bc:	f3bf 8f6f 	isb	sy
}
    37c0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    37c2:	f022 0204 	bic.w	r2, r2, #4
    37c6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    37c8:	f7ff fe9c 	bl	3504 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    37cc:	4621      	mov	r1, r4
    37ce:	4802      	ldr	r0, [pc, #8]	; (37d8 <z_sched_start+0x38>)
}
    37d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    37d4:	f7ff bfd2 	b.w	377c <z_reschedule>
    37d8:	20000a82 	.word	0x20000a82

000037dc <z_impl_k_thread_suspend>:
{
    37dc:	b570      	push	{r4, r5, r6, lr}
    37de:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    37e0:	3018      	adds	r0, #24
    37e2:	f001 f928 	bl	4a36 <z_abort_timeout>
	__asm__ volatile(
    37e6:	f04f 0320 	mov.w	r3, #32
    37ea:	f3ef 8611 	mrs	r6, BASEPRI
    37ee:	f383 8812 	msr	BASEPRI_MAX, r3
    37f2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    37f6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    37fa:	7b63      	ldrb	r3, [r4, #13]
    37fc:	2a00      	cmp	r2, #0
    37fe:	da05      	bge.n	380c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3804:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3806:	4620      	mov	r0, r4
    3808:	f001 f877 	bl	48fa <sys_dlist_remove>
		update_cache(thread == _current);
    380c:	4d0b      	ldr	r5, [pc, #44]	; (383c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    380e:	7b63      	ldrb	r3, [r4, #13]
    3810:	68a8      	ldr	r0, [r5, #8]
    3812:	f043 0310 	orr.w	r3, r3, #16
    3816:	7363      	strb	r3, [r4, #13]
    3818:	1b03      	subs	r3, r0, r4
    381a:	4258      	negs	r0, r3
    381c:	4158      	adcs	r0, r3
    381e:	f7ff fe19 	bl	3454 <update_cache>
	__asm__ volatile(
    3822:	f386 8811 	msr	BASEPRI, r6
    3826:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    382a:	68ab      	ldr	r3, [r5, #8]
    382c:	42a3      	cmp	r3, r4
    382e:	d103      	bne.n	3838 <z_impl_k_thread_suspend+0x5c>
}
    3830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3834:	f001 b8f5 	b.w	4a22 <z_reschedule_unlocked>
}
    3838:	bd70      	pop	{r4, r5, r6, pc}
    383a:	bf00      	nop
    383c:	20000870 	.word	0x20000870

00003840 <k_sched_lock>:
	__asm__ volatile(
    3840:	f04f 0320 	mov.w	r3, #32
    3844:	f3ef 8111 	mrs	r1, BASEPRI
    3848:	f383 8812 	msr	BASEPRI_MAX, r3
    384c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3850:	4b04      	ldr	r3, [pc, #16]	; (3864 <k_sched_lock+0x24>)
    3852:	689a      	ldr	r2, [r3, #8]
    3854:	7bd3      	ldrb	r3, [r2, #15]
    3856:	3b01      	subs	r3, #1
    3858:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    385a:	f381 8811 	msr	BASEPRI, r1
    385e:	f3bf 8f6f 	isb	sy
}
    3862:	4770      	bx	lr
    3864:	20000870 	.word	0x20000870

00003868 <k_sched_unlock>:
{
    3868:	b510      	push	{r4, lr}
	__asm__ volatile(
    386a:	f04f 0320 	mov.w	r3, #32
    386e:	f3ef 8411 	mrs	r4, BASEPRI
    3872:	f383 8812 	msr	BASEPRI_MAX, r3
    3876:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    387a:	4b08      	ldr	r3, [pc, #32]	; (389c <k_sched_unlock+0x34>)
    387c:	689a      	ldr	r2, [r3, #8]
    387e:	7bd3      	ldrb	r3, [r2, #15]
    3880:	3301      	adds	r3, #1
    3882:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3884:	2000      	movs	r0, #0
    3886:	f7ff fde5 	bl	3454 <update_cache>
	__asm__ volatile(
    388a:	f384 8811 	msr	BASEPRI, r4
    388e:	f3bf 8f6f 	isb	sy
}
    3892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3896:	f001 b8c4 	b.w	4a22 <z_reschedule_unlocked>
    389a:	bf00      	nop
    389c:	20000870 	.word	0x20000870

000038a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    38a0:	4b04      	ldr	r3, [pc, #16]	; (38b4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    38a2:	2100      	movs	r1, #0
    38a4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    38a8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    38ac:	4608      	mov	r0, r1
    38ae:	f7ff be8d 	b.w	35cc <k_sched_time_slice_set>
    38b2:	bf00      	nop
    38b4:	20000870 	.word	0x20000870

000038b8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    38ba:	f04f 0320 	mov.w	r3, #32
    38be:	f3ef 8511 	mrs	r5, BASEPRI
    38c2:	f383 8812 	msr	BASEPRI_MAX, r3
    38c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    38ca:	4919      	ldr	r1, [pc, #100]	; (3930 <z_impl_k_yield+0x78>)
    38cc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    38ce:	7b43      	ldrb	r3, [r0, #13]
    38d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    38d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    38d6:	f001 f810 	bl	48fa <sys_dlist_remove>
	}
	queue_thread(_current);
    38da:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    38dc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    38de:	4608      	mov	r0, r1
    38e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    38e4:	735a      	strb	r2, [r3, #13]
    38e6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    38ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38ec:	4282      	cmp	r2, r0
    38ee:	bf08      	it	eq
    38f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    38f2:	b922      	cbnz	r2, 38fe <z_impl_k_yield+0x46>
	node->prev = tail;
    38f4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    38f8:	6023      	str	r3, [r4, #0]
	list->tail = node;
    38fa:	624b      	str	r3, [r1, #36]	; 0x24
}
    38fc:	e00c      	b.n	3918 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    38fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3902:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3906:	42be      	cmp	r6, r7
    3908:	d00e      	beq.n	3928 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    390a:	42b7      	cmp	r7, r6
    390c:	dd0c      	ble.n	3928 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    390e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3910:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3914:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3916:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3918:	2001      	movs	r0, #1
    391a:	f7ff fd9b 	bl	3454 <update_cache>
    391e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3924:	f7fd bd2c 	b.w	1380 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3928:	42a2      	cmp	r2, r4
    392a:	d0e3      	beq.n	38f4 <z_impl_k_yield+0x3c>
    392c:	6812      	ldr	r2, [r2, #0]
    392e:	e7e0      	b.n	38f2 <z_impl_k_yield+0x3a>
    3930:	20000870 	.word	0x20000870

00003934 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3934:	ea50 0301 	orrs.w	r3, r0, r1
{
    3938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    393c:	4605      	mov	r5, r0
    393e:	460e      	mov	r6, r1
	if (ticks == 0) {
    3940:	d103      	bne.n	394a <z_tick_sleep+0x16>
	z_impl_k_yield();
    3942:	f7ff ffb9 	bl	38b8 <z_impl_k_yield>
		k_yield();
		return 0;
    3946:	2000      	movs	r0, #0
    3948:	e02c      	b.n	39a4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    394a:	1c83      	adds	r3, r0, #2
    394c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    3950:	db2a      	blt.n	39a8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3952:	f001 f8b2 	bl	4aba <sys_clock_tick_get_32>
    3956:	1944      	adds	r4, r0, r5
    3958:	f04f 0320 	mov.w	r3, #32
    395c:	f3ef 8811 	mrs	r8, BASEPRI
    3960:	f383 8812 	msr	BASEPRI_MAX, r3
    3964:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3968:	4f11      	ldr	r7, [pc, #68]	; (39b0 <z_tick_sleep+0x7c>)
    396a:	4b12      	ldr	r3, [pc, #72]	; (39b4 <z_tick_sleep+0x80>)
    396c:	68b8      	ldr	r0, [r7, #8]
    396e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3970:	f7ff fdfc 	bl	356c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3974:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3976:	4910      	ldr	r1, [pc, #64]	; (39b8 <z_tick_sleep+0x84>)
    3978:	462a      	mov	r2, r5
    397a:	4633      	mov	r3, r6
    397c:	3018      	adds	r0, #24
    397e:	f000 f905 	bl	3b8c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3982:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3984:	7b53      	ldrb	r3, [r2, #13]
    3986:	f043 0310 	orr.w	r3, r3, #16
    398a:	7353      	strb	r3, [r2, #13]
    398c:	4640      	mov	r0, r8
    398e:	f7fd fcf7 	bl	1380 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3992:	f001 f892 	bl	4aba <sys_clock_tick_get_32>
    3996:	1a20      	subs	r0, r4, r0
    3998:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    399c:	2801      	cmp	r0, #1
    399e:	f173 0300 	sbcs.w	r3, r3, #0
    39a2:	dbd0      	blt.n	3946 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    39a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    39a8:	f06f 0401 	mvn.w	r4, #1
    39ac:	1a24      	subs	r4, r4, r0
    39ae:	e7d3      	b.n	3958 <z_tick_sleep+0x24>
    39b0:	20000870 	.word	0x20000870
    39b4:	20000898 	.word	0x20000898
    39b8:	0000491f 	.word	0x0000491f

000039bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    39bc:	f1b1 3fff 	cmp.w	r1, #4294967295
    39c0:	bf08      	it	eq
    39c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    39c6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    39c8:	d106      	bne.n	39d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    39ca:	4b08      	ldr	r3, [pc, #32]	; (39ec <z_impl_k_sleep+0x30>)
    39cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    39ce:	f7ff ff05 	bl	37dc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    39d2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    39d6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    39d8:	f7ff ffac 	bl	3934 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    39dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    39e0:	fb80 0303 	smull	r0, r3, r0, r3
    39e4:	0bc0      	lsrs	r0, r0, #15
    39e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    39ea:	e7f4      	b.n	39d6 <z_impl_k_sleep+0x1a>
    39ec:	20000870 	.word	0x20000870

000039f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    39f0:	4b01      	ldr	r3, [pc, #4]	; (39f8 <z_impl_z_current_get+0x8>)
    39f2:	6898      	ldr	r0, [r3, #8]
    39f4:	4770      	bx	lr
    39f6:	bf00      	nop
    39f8:	20000870 	.word	0x20000870

000039fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    39fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a00:	4604      	mov	r4, r0
    3a02:	f04f 0320 	mov.w	r3, #32
    3a06:	f3ef 8611 	mrs	r6, BASEPRI
    3a0a:	f383 8812 	msr	BASEPRI_MAX, r3
    3a0e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3a12:	7b03      	ldrb	r3, [r0, #12]
    3a14:	07d9      	lsls	r1, r3, #31
    3a16:	d50b      	bpl.n	3a30 <z_thread_abort+0x34>
	__asm__ volatile(
    3a18:	f386 8811 	msr	BASEPRI, r6
    3a1c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3a20:	4040      	eors	r0, r0
    3a22:	f380 8811 	msr	BASEPRI, r0
    3a26:	f04f 0004 	mov.w	r0, #4
    3a2a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3a30:	7b43      	ldrb	r3, [r0, #13]
    3a32:	071a      	lsls	r2, r3, #28
    3a34:	d504      	bpl.n	3a40 <z_thread_abort+0x44>
    3a36:	f386 8811 	msr	BASEPRI, r6
    3a3a:	f3bf 8f6f 	isb	sy
    3a3e:	e7f5      	b.n	3a2c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3a40:	f023 0220 	bic.w	r2, r3, #32
    3a44:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3a48:	09d2      	lsrs	r2, r2, #7
    3a4a:	d120      	bne.n	3a8e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3a4c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3a4e:	68a3      	ldr	r3, [r4, #8]
    3a50:	b113      	cbz	r3, 3a58 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3a52:	4620      	mov	r0, r4
    3a54:	f000 ff59 	bl	490a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3a58:	f104 0018 	add.w	r0, r4, #24
    3a5c:	f000 ffeb 	bl	4a36 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3a60:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3a64:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3a68:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a6a:	42bd      	cmp	r5, r7
    3a6c:	d000      	beq.n	3a70 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3a6e:	b9b5      	cbnz	r5, 3a9e <z_thread_abort+0xa2>
		update_cache(1);
    3a70:	2001      	movs	r0, #1
    3a72:	f7ff fcef 	bl	3454 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3a76:	4b10      	ldr	r3, [pc, #64]	; (3ab8 <z_thread_abort+0xbc>)
    3a78:	689b      	ldr	r3, [r3, #8]
    3a7a:	42a3      	cmp	r3, r4
    3a7c:	d1db      	bne.n	3a36 <z_thread_abort+0x3a>
    3a7e:	f3ef 8305 	mrs	r3, IPSR
    3a82:	2b00      	cmp	r3, #0
    3a84:	d1d7      	bne.n	3a36 <z_thread_abort+0x3a>
    3a86:	4630      	mov	r0, r6
    3a88:	f7fd fc7a 	bl	1380 <arch_swap>
	return ret;
    3a8c:	e7d3      	b.n	3a36 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a8e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3a92:	f043 0308 	orr.w	r3, r3, #8
    3a96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3a98:	f000 ff2f 	bl	48fa <sys_dlist_remove>
}
    3a9c:	e7d7      	b.n	3a4e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3a9e:	4628      	mov	r0, r5
    3aa0:	f000 ff33 	bl	490a <unpend_thread_no_timeout>
    3aa4:	f105 0018 	add.w	r0, r5, #24
    3aa8:	f000 ffc5 	bl	4a36 <z_abort_timeout>
    3aac:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3ab0:	4628      	mov	r0, r5
    3ab2:	f7ff fd27 	bl	3504 <ready_thread>
    3ab6:	e7d7      	b.n	3a68 <z_thread_abort+0x6c>
    3ab8:	20000870 	.word	0x20000870

00003abc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3abc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3abe:	4806      	ldr	r0, [pc, #24]	; (3ad8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3ac0:	4a06      	ldr	r2, [pc, #24]	; (3adc <z_data_copy+0x20>)
    3ac2:	4907      	ldr	r1, [pc, #28]	; (3ae0 <z_data_copy+0x24>)
    3ac4:	1a12      	subs	r2, r2, r0
    3ac6:	f000 fead 	bl	4824 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3ace:	4a05      	ldr	r2, [pc, #20]	; (3ae4 <z_data_copy+0x28>)
    3ad0:	4905      	ldr	r1, [pc, #20]	; (3ae8 <z_data_copy+0x2c>)
    3ad2:	4806      	ldr	r0, [pc, #24]	; (3aec <z_data_copy+0x30>)
    3ad4:	f000 bea6 	b.w	4824 <z_early_memcpy>
    3ad8:	20000000 	.word	0x20000000
    3adc:	20000168 	.word	0x20000168
    3ae0:	00004f84 	.word	0x00004f84
    3ae4:	00000000 	.word	0x00000000
    3ae8:	00004f84 	.word	0x00004f84
    3aec:	20000000 	.word	0x20000000

00003af0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3af0:	4b03      	ldr	r3, [pc, #12]	; (3b00 <elapsed+0x10>)
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	b90b      	cbnz	r3, 3afa <elapsed+0xa>
    3af6:	f7fe bca5 	b.w	2444 <sys_clock_elapsed>
}
    3afa:	2000      	movs	r0, #0
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	200008a4 	.word	0x200008a4

00003b04 <next_timeout>:

static int32_t next_timeout(void)
{
    3b04:	b510      	push	{r4, lr}
	return list->head == list;
    3b06:	4b11      	ldr	r3, [pc, #68]	; (3b4c <next_timeout+0x48>)
    3b08:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b0a:	429c      	cmp	r4, r3
    3b0c:	d10a      	bne.n	3b24 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3b0e:	f7ff ffef 	bl	3af0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3b12:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3b16:	4b0e      	ldr	r3, [pc, #56]	; (3b50 <next_timeout+0x4c>)
    3b18:	691b      	ldr	r3, [r3, #16]
    3b1a:	b113      	cbz	r3, 3b22 <next_timeout+0x1e>
    3b1c:	4298      	cmp	r0, r3
    3b1e:	bfa8      	it	ge
    3b20:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3b22:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3b24:	f7ff ffe4 	bl	3af0 <elapsed>
	if ((to == NULL) ||
    3b28:	2c00      	cmp	r4, #0
    3b2a:	d0f2      	beq.n	3b12 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3b2c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3b30:	1a1b      	subs	r3, r3, r0
    3b32:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3b3a:	f172 0100 	sbcs.w	r1, r2, #0
    3b3e:	dae8      	bge.n	3b12 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    3b40:	2a00      	cmp	r2, #0
    3b42:	bfac      	ite	ge
    3b44:	4618      	movge	r0, r3
    3b46:	2000      	movlt	r0, #0
    3b48:	e7e5      	b.n	3b16 <next_timeout+0x12>
    3b4a:	bf00      	nop
    3b4c:	200000a8 	.word	0x200000a8
    3b50:	20000870 	.word	0x20000870

00003b54 <remove_timeout>:
{
    3b54:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3b56:	b170      	cbz	r0, 3b76 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3b58:	4b0b      	ldr	r3, [pc, #44]	; (3b88 <remove_timeout+0x34>)
    3b5a:	685b      	ldr	r3, [r3, #4]
    3b5c:	4298      	cmp	r0, r3
    3b5e:	d00a      	beq.n	3b76 <remove_timeout+0x22>
    3b60:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3b62:	b143      	cbz	r3, 3b76 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3b64:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3b68:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3b6c:	1912      	adds	r2, r2, r4
    3b6e:	eb41 0105 	adc.w	r1, r1, r5
    3b72:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3b76:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3b7a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3b7c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3b7e:	2300      	movs	r3, #0
	node->prev = NULL;
    3b80:	e9c0 3300 	strd	r3, r3, [r0]
}
    3b84:	bd30      	pop	{r4, r5, pc}
    3b86:	bf00      	nop
    3b88:	200000a8 	.word	0x200000a8

00003b8c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b90:	bf08      	it	eq
    3b92:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b98:	4604      	mov	r4, r0
    3b9a:	461d      	mov	r5, r3
    3b9c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b9e:	d061      	beq.n	3c64 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3ba0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3ba2:	f04f 0320 	mov.w	r3, #32
    3ba6:	f3ef 8711 	mrs	r7, BASEPRI
    3baa:	f383 8812 	msr	BASEPRI_MAX, r3
    3bae:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3bb2:	3201      	adds	r2, #1
    3bb4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    3bb8:	da24      	bge.n	3c04 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3bba:	4930      	ldr	r1, [pc, #192]	; (3c7c <z_add_timeout+0xf0>)
    3bbc:	e9d1 2000 	ldrd	r2, r0, [r1]
    3bc0:	f06f 0301 	mvn.w	r3, #1
    3bc4:	1a9b      	subs	r3, r3, r2
    3bc6:	f04f 32ff 	mov.w	r2, #4294967295
    3bca:	eb62 0000 	sbc.w	r0, r2, r0
    3bce:	1b9e      	subs	r6, r3, r6
    3bd0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3bd4:	2e01      	cmp	r6, #1
    3bd6:	f170 0300 	sbcs.w	r3, r0, #0
    3bda:	da01      	bge.n	3be0 <z_add_timeout+0x54>
    3bdc:	2601      	movs	r6, #1
    3bde:	2000      	movs	r0, #0
    3be0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3be4:	4e26      	ldr	r6, [pc, #152]	; (3c80 <z_add_timeout+0xf4>)
    3be6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3bea:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bec:	45b4      	cmp	ip, r6
    3bee:	bf08      	it	eq
    3bf0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3bf4:	f1bc 0f00 	cmp.w	ip, #0
    3bf8:	d10d      	bne.n	3c16 <z_add_timeout+0x8a>
	node->prev = tail;
    3bfa:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3bfe:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3c00:	6074      	str	r4, [r6, #4]
}
    3c02:	e01c      	b.n	3c3e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    3c04:	f7ff ff74 	bl	3af0 <elapsed>
    3c08:	3601      	adds	r6, #1
    3c0a:	f145 0500 	adc.w	r5, r5, #0
    3c0e:	1836      	adds	r6, r6, r0
    3c10:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    3c14:	e7e4      	b.n	3be0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    3c16:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    3c1a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    3c1e:	4293      	cmp	r3, r2
    3c20:	eb71 0e00 	sbcs.w	lr, r1, r0
    3c24:	da1f      	bge.n	3c66 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    3c26:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    3c28:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3c2c:	eb60 0001 	sbc.w	r0, r0, r1
    3c30:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    3c34:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    3c38:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3c3a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    3c3e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c40:	42b3      	cmp	r3, r6
    3c42:	d00b      	beq.n	3c5c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3c44:	429c      	cmp	r4, r3
    3c46:	d109      	bne.n	3c5c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3c48:	f7ff ff5c 	bl	3b04 <next_timeout>

			if (next_time == 0 ||
    3c4c:	b118      	cbz	r0, 3c56 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    3c4e:	4b0d      	ldr	r3, [pc, #52]	; (3c84 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    3c50:	691b      	ldr	r3, [r3, #16]
    3c52:	4283      	cmp	r3, r0
    3c54:	d002      	beq.n	3c5c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    3c56:	2100      	movs	r1, #0
    3c58:	f7fe fbc2 	bl	23e0 <sys_clock_set_timeout>
	__asm__ volatile(
    3c5c:	f387 8811 	msr	BASEPRI, r7
    3c60:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    3c66:	1a9b      	subs	r3, r3, r2
    3c68:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3c6c:	45ac      	cmp	ip, r5
    3c6e:	e9c4 3104 	strd	r3, r1, [r4, #16]
    3c72:	d0c2      	beq.n	3bfa <z_add_timeout+0x6e>
    3c74:	f8dc c000 	ldr.w	ip, [ip]
    3c78:	e7bc      	b.n	3bf4 <z_add_timeout+0x68>
    3c7a:	bf00      	nop
    3c7c:	20000288 	.word	0x20000288
    3c80:	200000a8 	.word	0x200000a8
    3c84:	20000870 	.word	0x20000870

00003c88 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c8c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3c8e:	f7ff fccf 	bl	3630 <z_time_slice>
	__asm__ volatile(
    3c92:	f04f 0320 	mov.w	r3, #32
    3c96:	f3ef 8611 	mrs	r6, BASEPRI
    3c9a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c9e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3ca2:	4f23      	ldr	r7, [pc, #140]	; (3d30 <sys_clock_announce+0xa8>)
	return list->head == list;
    3ca4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3d34 <sys_clock_announce+0xac>
    3ca8:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3cac:	4a22      	ldr	r2, [pc, #136]	; (3d38 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    3cae:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cb0:	4540      	cmp	r0, r8
		curr_tick += dt;
    3cb2:	e9d2 3e00 	ldrd	r3, lr, [r2]
    3cb6:	ea4f 71e4 	mov.w	r1, r4, asr #31
    3cba:	d00b      	beq.n	3cd4 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3cbc:	b150      	cbz	r0, 3cd4 <sys_clock_announce+0x4c>
    3cbe:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    3cc2:	42ac      	cmp	r4, r5
    3cc4:	eb71 090c 	sbcs.w	r9, r1, ip
    3cc8:	da16      	bge.n	3cf8 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3cca:	1b2d      	subs	r5, r5, r4
    3ccc:	eb6c 0c01 	sbc.w	ip, ip, r1
    3cd0:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3cd4:	18e3      	adds	r3, r4, r3
    3cd6:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    3cda:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3cdc:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    3ce0:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3ce2:	f7ff ff0f 	bl	3b04 <next_timeout>
    3ce6:	4621      	mov	r1, r4
    3ce8:	f7fe fb7a 	bl	23e0 <sys_clock_set_timeout>
	__asm__ volatile(
    3cec:	f386 8811 	msr	BASEPRI, r6
    3cf0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3cf8:	18eb      	adds	r3, r5, r3
    3cfa:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    3cfe:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    3d02:	2200      	movs	r2, #0
    3d04:	2300      	movs	r3, #0
    3d06:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    3d0a:	f7ff ff23 	bl	3b54 <remove_timeout>
    3d0e:	f386 8811 	msr	BASEPRI, r6
    3d12:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3d16:	6883      	ldr	r3, [r0, #8]
    3d18:	4798      	blx	r3
	__asm__ volatile(
    3d1a:	f04f 0320 	mov.w	r3, #32
    3d1e:	f3ef 8611 	mrs	r6, BASEPRI
    3d22:	f383 8812 	msr	BASEPRI_MAX, r3
    3d26:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3d2a:	683c      	ldr	r4, [r7, #0]
    3d2c:	1b64      	subs	r4, r4, r5
    3d2e:	e7bb      	b.n	3ca8 <sys_clock_announce+0x20>
    3d30:	200008a4 	.word	0x200008a4
    3d34:	200000a8 	.word	0x200000a8
    3d38:	20000288 	.word	0x20000288

00003d3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3d3c:	b510      	push	{r4, lr}
    3d3e:	f04f 0320 	mov.w	r3, #32
    3d42:	f3ef 8411 	mrs	r4, BASEPRI
    3d46:	f383 8812 	msr	BASEPRI_MAX, r3
    3d4a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    3d4e:	f7ff fecf 	bl	3af0 <elapsed>
    3d52:	4a06      	ldr	r2, [pc, #24]	; (3d6c <sys_clock_tick_get+0x30>)
    3d54:	4603      	mov	r3, r0
    3d56:	e9d2 0100 	ldrd	r0, r1, [r2]
    3d5a:	1818      	adds	r0, r3, r0
    3d5c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    3d60:	f384 8811 	msr	BASEPRI, r4
    3d64:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3d68:	bd10      	pop	{r4, pc}
    3d6a:	bf00      	nop
    3d6c:	20000288 	.word	0x20000288

00003d70 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3d70:	4801      	ldr	r0, [pc, #4]	; (3d78 <boot_banner+0x8>)
    3d72:	f000 b9f8 	b.w	4166 <printk>
    3d76:	bf00      	nop
    3d78:	00004f53 	.word	0x00004f53

00003d7c <nrf_cc3xx_platform_init_no_rng>:
    3d7c:	b510      	push	{r4, lr}
    3d7e:	4c0a      	ldr	r4, [pc, #40]	; (3da8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3d80:	6823      	ldr	r3, [r4, #0]
    3d82:	b11b      	cbz	r3, 3d8c <nrf_cc3xx_platform_init_no_rng+0x10>
    3d84:	2301      	movs	r3, #1
    3d86:	6023      	str	r3, [r4, #0]
    3d88:	2000      	movs	r0, #0
    3d8a:	bd10      	pop	{r4, pc}
    3d8c:	f000 f8e6 	bl	3f5c <CC_LibInitNoRng>
    3d90:	2800      	cmp	r0, #0
    3d92:	d0f7      	beq.n	3d84 <nrf_cc3xx_platform_init_no_rng+0x8>
    3d94:	3801      	subs	r0, #1
    3d96:	2806      	cmp	r0, #6
    3d98:	d803      	bhi.n	3da2 <nrf_cc3xx_platform_init_no_rng+0x26>
    3d9a:	4b04      	ldr	r3, [pc, #16]	; (3dac <nrf_cc3xx_platform_init_no_rng+0x30>)
    3d9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3da0:	bd10      	pop	{r4, pc}
    3da2:	4803      	ldr	r0, [pc, #12]	; (3db0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    3da4:	bd10      	pop	{r4, pc}
    3da6:	bf00      	nop
    3da8:	200008a8 	.word	0x200008a8
    3dac:	00004df8 	.word	0x00004df8
    3db0:	ffff8ffe 	.word	0xffff8ffe

00003db4 <nrf_cc3xx_platform_abort>:
    3db4:	f3bf 8f4f 	dsb	sy
    3db8:	4905      	ldr	r1, [pc, #20]	; (3dd0 <nrf_cc3xx_platform_abort+0x1c>)
    3dba:	4b06      	ldr	r3, [pc, #24]	; (3dd4 <nrf_cc3xx_platform_abort+0x20>)
    3dbc:	68ca      	ldr	r2, [r1, #12]
    3dbe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3dc2:	4313      	orrs	r3, r2
    3dc4:	60cb      	str	r3, [r1, #12]
    3dc6:	f3bf 8f4f 	dsb	sy
    3dca:	bf00      	nop
    3dcc:	e7fd      	b.n	3dca <nrf_cc3xx_platform_abort+0x16>
    3dce:	bf00      	nop
    3dd0:	e000ed00 	.word	0xe000ed00
    3dd4:	05fa0004 	.word	0x05fa0004

00003dd8 <CC_PalAbort>:
    3dd8:	b410      	push	{r4}
    3dda:	4b09      	ldr	r3, [pc, #36]	; (3e00 <CC_PalAbort+0x28>)
    3ddc:	4909      	ldr	r1, [pc, #36]	; (3e04 <CC_PalAbort+0x2c>)
    3dde:	4c0a      	ldr	r4, [pc, #40]	; (3e08 <CC_PalAbort+0x30>)
    3de0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    3de4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    3de8:	6849      	ldr	r1, [r1, #4]
    3dea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    3dee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    3df2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    3df6:	2300      	movs	r3, #0
    3df8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    3dfc:	bc10      	pop	{r4}
    3dfe:	4708      	bx	r1
    3e00:	5002b000 	.word	0x5002b000
    3e04:	200000b0 	.word	0x200000b0
    3e08:	5002a000 	.word	0x5002a000

00003e0c <nrf_cc3xx_platform_set_abort>:
    3e0c:	e9d0 1200 	ldrd	r1, r2, [r0]
    3e10:	4b01      	ldr	r3, [pc, #4]	; (3e18 <nrf_cc3xx_platform_set_abort+0xc>)
    3e12:	e9c3 1200 	strd	r1, r2, [r3]
    3e16:	4770      	bx	lr
    3e18:	200000b0 	.word	0x200000b0

00003e1c <mutex_free>:
    3e1c:	b510      	push	{r4, lr}
    3e1e:	4604      	mov	r4, r0
    3e20:	b150      	cbz	r0, 3e38 <mutex_free+0x1c>
    3e22:	6863      	ldr	r3, [r4, #4]
    3e24:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3e28:	d005      	beq.n	3e36 <mutex_free+0x1a>
    3e2a:	4a06      	ldr	r2, [pc, #24]	; (3e44 <mutex_free+0x28>)
    3e2c:	4293      	cmp	r3, r2
    3e2e:	d002      	beq.n	3e36 <mutex_free+0x1a>
    3e30:	2300      	movs	r3, #0
    3e32:	6023      	str	r3, [r4, #0]
    3e34:	6062      	str	r2, [r4, #4]
    3e36:	bd10      	pop	{r4, pc}
    3e38:	4b03      	ldr	r3, [pc, #12]	; (3e48 <mutex_free+0x2c>)
    3e3a:	4804      	ldr	r0, [pc, #16]	; (3e4c <mutex_free+0x30>)
    3e3c:	685b      	ldr	r3, [r3, #4]
    3e3e:	4798      	blx	r3
    3e40:	e7ef      	b.n	3e22 <mutex_free+0x6>
    3e42:	bf00      	nop
    3e44:	a95c5f2c 	.word	0xa95c5f2c
    3e48:	200000b0 	.word	0x200000b0
    3e4c:	00004e14 	.word	0x00004e14

00003e50 <mutex_lock>:
    3e50:	b1c8      	cbz	r0, 3e86 <mutex_lock+0x36>
    3e52:	6843      	ldr	r3, [r0, #4]
    3e54:	4a0d      	ldr	r2, [pc, #52]	; (3e8c <mutex_lock+0x3c>)
    3e56:	4293      	cmp	r3, r2
    3e58:	d013      	beq.n	3e82 <mutex_lock+0x32>
    3e5a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3e5e:	d00e      	beq.n	3e7e <mutex_lock+0x2e>
    3e60:	2301      	movs	r3, #1
    3e62:	e850 2f00 	ldrex	r2, [r0]
    3e66:	4619      	mov	r1, r3
    3e68:	e840 1c00 	strex	ip, r1, [r0]
    3e6c:	f09c 0f00 	teq	ip, #0
    3e70:	d1f7      	bne.n	3e62 <mutex_lock+0x12>
    3e72:	2a01      	cmp	r2, #1
    3e74:	d0f5      	beq.n	3e62 <mutex_lock+0x12>
    3e76:	f3bf 8f5f 	dmb	sy
    3e7a:	2000      	movs	r0, #0
    3e7c:	4770      	bx	lr
    3e7e:	4804      	ldr	r0, [pc, #16]	; (3e90 <mutex_lock+0x40>)
    3e80:	4770      	bx	lr
    3e82:	4804      	ldr	r0, [pc, #16]	; (3e94 <mutex_lock+0x44>)
    3e84:	4770      	bx	lr
    3e86:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3e8a:	4770      	bx	lr
    3e8c:	a95c5f2c 	.word	0xa95c5f2c
    3e90:	ffff8fe9 	.word	0xffff8fe9
    3e94:	ffff8fea 	.word	0xffff8fea

00003e98 <mutex_unlock>:
    3e98:	b180      	cbz	r0, 3ebc <mutex_unlock+0x24>
    3e9a:	6843      	ldr	r3, [r0, #4]
    3e9c:	4a09      	ldr	r2, [pc, #36]	; (3ec4 <mutex_unlock+0x2c>)
    3e9e:	4293      	cmp	r3, r2
    3ea0:	d00a      	beq.n	3eb8 <mutex_unlock+0x20>
    3ea2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3ea6:	d005      	beq.n	3eb4 <mutex_unlock+0x1c>
    3ea8:	f3bf 8f5f 	dmb	sy
    3eac:	2300      	movs	r3, #0
    3eae:	6003      	str	r3, [r0, #0]
    3eb0:	4618      	mov	r0, r3
    3eb2:	4770      	bx	lr
    3eb4:	4804      	ldr	r0, [pc, #16]	; (3ec8 <mutex_unlock+0x30>)
    3eb6:	4770      	bx	lr
    3eb8:	4804      	ldr	r0, [pc, #16]	; (3ecc <mutex_unlock+0x34>)
    3eba:	4770      	bx	lr
    3ebc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3ec0:	4770      	bx	lr
    3ec2:	bf00      	nop
    3ec4:	a95c5f2c 	.word	0xa95c5f2c
    3ec8:	ffff8fe9 	.word	0xffff8fe9
    3ecc:	ffff8fea 	.word	0xffff8fea

00003ed0 <mutex_init>:
    3ed0:	b510      	push	{r4, lr}
    3ed2:	4604      	mov	r4, r0
    3ed4:	b120      	cbz	r0, 3ee0 <mutex_init+0x10>
    3ed6:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <mutex_init+0x18>)
    3ed8:	6063      	str	r3, [r4, #4]
    3eda:	2200      	movs	r2, #0
    3edc:	6022      	str	r2, [r4, #0]
    3ede:	bd10      	pop	{r4, pc}
    3ee0:	4802      	ldr	r0, [pc, #8]	; (3eec <mutex_init+0x1c>)
    3ee2:	f7ff ff79 	bl	3dd8 <CC_PalAbort>
    3ee6:	e7f6      	b.n	3ed6 <mutex_init+0x6>
    3ee8:	3a00003a 	.word	0x3a00003a
    3eec:	00004e3c 	.word	0x00004e3c

00003ef0 <nrf_cc3xx_platform_set_mutexes>:
    3ef0:	b570      	push	{r4, r5, r6, lr}
    3ef2:	e9d0 2300 	ldrd	r2, r3, [r0]
    3ef6:	4c15      	ldr	r4, [pc, #84]	; (3f4c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    3ef8:	4d15      	ldr	r5, [pc, #84]	; (3f50 <nrf_cc3xx_platform_set_mutexes+0x60>)
    3efa:	6063      	str	r3, [r4, #4]
    3efc:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    3f00:	e9c4 3002 	strd	r3, r0, [r4, #8]
    3f04:	6022      	str	r2, [r4, #0]
    3f06:	4b13      	ldr	r3, [pc, #76]	; (3f54 <nrf_cc3xx_platform_set_mutexes+0x64>)
    3f08:	6808      	ldr	r0, [r1, #0]
    3f0a:	6018      	str	r0, [r3, #0]
    3f0c:	6848      	ldr	r0, [r1, #4]
    3f0e:	6058      	str	r0, [r3, #4]
    3f10:	6888      	ldr	r0, [r1, #8]
    3f12:	6098      	str	r0, [r3, #8]
    3f14:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    3f18:	60d8      	str	r0, [r3, #12]
    3f1a:	6119      	str	r1, [r3, #16]
    3f1c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    3f20:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3f24:	d010      	beq.n	3f48 <nrf_cc3xx_platform_set_mutexes+0x58>
    3f26:	490c      	ldr	r1, [pc, #48]	; (3f58 <nrf_cc3xx_platform_set_mutexes+0x68>)
    3f28:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    3f2c:	2300      	movs	r3, #0
    3f2e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    3f32:	f505 708a 	add.w	r0, r5, #276	; 0x114
    3f36:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    3f3a:	4790      	blx	r2
    3f3c:	6823      	ldr	r3, [r4, #0]
    3f3e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    3f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f46:	4718      	bx	r3
    3f48:	bd70      	pop	{r4, r5, r6, pc}
    3f4a:	bf00      	nop
    3f4c:	200000c0 	.word	0x200000c0
    3f50:	200008c0 	.word	0x200008c0
    3f54:	200000d0 	.word	0x200000d0
    3f58:	a95c5f2c 	.word	0xa95c5f2c

00003f5c <CC_LibInitNoRng>:
    3f5c:	b538      	push	{r3, r4, r5, lr}
    3f5e:	f000 f82f 	bl	3fc0 <CC_HalInit>
    3f62:	b120      	cbz	r0, 3f6e <CC_LibInitNoRng+0x12>
    3f64:	2403      	movs	r4, #3
    3f66:	f000 f863 	bl	4030 <CC_PalTerminate>
    3f6a:	4620      	mov	r0, r4
    3f6c:	bd38      	pop	{r3, r4, r5, pc}
    3f6e:	f000 f831 	bl	3fd4 <CC_PalInit>
    3f72:	b998      	cbnz	r0, 3f9c <CC_LibInitNoRng+0x40>
    3f74:	f000 f8ac 	bl	40d0 <CC_PalPowerSaveModeSelect>
    3f78:	b998      	cbnz	r0, 3fa2 <CC_LibInitNoRng+0x46>
    3f7a:	4d0f      	ldr	r5, [pc, #60]	; (3fb8 <CC_LibInitNoRng+0x5c>)
    3f7c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    3f80:	0e1b      	lsrs	r3, r3, #24
    3f82:	2bf0      	cmp	r3, #240	; 0xf0
    3f84:	d108      	bne.n	3f98 <CC_LibInitNoRng+0x3c>
    3f86:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    3f8a:	4b0c      	ldr	r3, [pc, #48]	; (3fbc <CC_LibInitNoRng+0x60>)
    3f8c:	429a      	cmp	r2, r3
    3f8e:	d00a      	beq.n	3fa6 <CC_LibInitNoRng+0x4a>
    3f90:	2407      	movs	r4, #7
    3f92:	f000 f817 	bl	3fc4 <CC_HalTerminate>
    3f96:	e7e6      	b.n	3f66 <CC_LibInitNoRng+0xa>
    3f98:	2406      	movs	r4, #6
    3f9a:	e7fa      	b.n	3f92 <CC_LibInitNoRng+0x36>
    3f9c:	2404      	movs	r4, #4
    3f9e:	4620      	mov	r0, r4
    3fa0:	bd38      	pop	{r3, r4, r5, pc}
    3fa2:	2400      	movs	r4, #0
    3fa4:	e7f5      	b.n	3f92 <CC_LibInitNoRng+0x36>
    3fa6:	2001      	movs	r0, #1
    3fa8:	f000 f892 	bl	40d0 <CC_PalPowerSaveModeSelect>
    3fac:	4604      	mov	r4, r0
    3fae:	2800      	cmp	r0, #0
    3fb0:	d1f7      	bne.n	3fa2 <CC_LibInitNoRng+0x46>
    3fb2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    3fb6:	e7d8      	b.n	3f6a <CC_LibInitNoRng+0xe>
    3fb8:	5002b000 	.word	0x5002b000
    3fbc:	20e00000 	.word	0x20e00000

00003fc0 <CC_HalInit>:
    3fc0:	2000      	movs	r0, #0
    3fc2:	4770      	bx	lr

00003fc4 <CC_HalTerminate>:
    3fc4:	2000      	movs	r0, #0
    3fc6:	4770      	bx	lr

00003fc8 <CC_HalMaskInterrupt>:
    3fc8:	4b01      	ldr	r3, [pc, #4]	; (3fd0 <CC_HalMaskInterrupt+0x8>)
    3fca:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    3fce:	4770      	bx	lr
    3fd0:	5002b000 	.word	0x5002b000

00003fd4 <CC_PalInit>:
    3fd4:	b510      	push	{r4, lr}
    3fd6:	4811      	ldr	r0, [pc, #68]	; (401c <CC_PalInit+0x48>)
    3fd8:	f000 f848 	bl	406c <CC_PalMutexCreate>
    3fdc:	b100      	cbz	r0, 3fe0 <CC_PalInit+0xc>
    3fde:	bd10      	pop	{r4, pc}
    3fe0:	480f      	ldr	r0, [pc, #60]	; (4020 <CC_PalInit+0x4c>)
    3fe2:	f000 f843 	bl	406c <CC_PalMutexCreate>
    3fe6:	2800      	cmp	r0, #0
    3fe8:	d1f9      	bne.n	3fde <CC_PalInit+0xa>
    3fea:	4c0e      	ldr	r4, [pc, #56]	; (4024 <CC_PalInit+0x50>)
    3fec:	4620      	mov	r0, r4
    3fee:	f000 f83d 	bl	406c <CC_PalMutexCreate>
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d1f3      	bne.n	3fde <CC_PalInit+0xa>
    3ff6:	4b0c      	ldr	r3, [pc, #48]	; (4028 <CC_PalInit+0x54>)
    3ff8:	480c      	ldr	r0, [pc, #48]	; (402c <CC_PalInit+0x58>)
    3ffa:	601c      	str	r4, [r3, #0]
    3ffc:	f000 f836 	bl	406c <CC_PalMutexCreate>
    4000:	4601      	mov	r1, r0
    4002:	2800      	cmp	r0, #0
    4004:	d1eb      	bne.n	3fde <CC_PalInit+0xa>
    4006:	f000 f82d 	bl	4064 <CC_PalDmaInit>
    400a:	4604      	mov	r4, r0
    400c:	b108      	cbz	r0, 4012 <CC_PalInit+0x3e>
    400e:	4620      	mov	r0, r4
    4010:	bd10      	pop	{r4, pc}
    4012:	f000 f83f 	bl	4094 <CC_PalPowerSaveModeInit>
    4016:	4620      	mov	r0, r4
    4018:	e7fa      	b.n	4010 <CC_PalInit+0x3c>
    401a:	bf00      	nop
    401c:	20000108 	.word	0x20000108
    4020:	200000fc 	.word	0x200000fc
    4024:	20000104 	.word	0x20000104
    4028:	2000010c 	.word	0x2000010c
    402c:	20000100 	.word	0x20000100

00004030 <CC_PalTerminate>:
    4030:	b508      	push	{r3, lr}
    4032:	4808      	ldr	r0, [pc, #32]	; (4054 <CC_PalTerminate+0x24>)
    4034:	f000 f824 	bl	4080 <CC_PalMutexDestroy>
    4038:	4807      	ldr	r0, [pc, #28]	; (4058 <CC_PalTerminate+0x28>)
    403a:	f000 f821 	bl	4080 <CC_PalMutexDestroy>
    403e:	4807      	ldr	r0, [pc, #28]	; (405c <CC_PalTerminate+0x2c>)
    4040:	f000 f81e 	bl	4080 <CC_PalMutexDestroy>
    4044:	4806      	ldr	r0, [pc, #24]	; (4060 <CC_PalTerminate+0x30>)
    4046:	f000 f81b 	bl	4080 <CC_PalMutexDestroy>
    404a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    404e:	f000 b80b 	b.w	4068 <CC_PalDmaTerminate>
    4052:	bf00      	nop
    4054:	20000108 	.word	0x20000108
    4058:	200000fc 	.word	0x200000fc
    405c:	20000104 	.word	0x20000104
    4060:	20000100 	.word	0x20000100

00004064 <CC_PalDmaInit>:
    4064:	2000      	movs	r0, #0
    4066:	4770      	bx	lr

00004068 <CC_PalDmaTerminate>:
    4068:	4770      	bx	lr
    406a:	bf00      	nop

0000406c <CC_PalMutexCreate>:
    406c:	b508      	push	{r3, lr}
    406e:	4b03      	ldr	r3, [pc, #12]	; (407c <CC_PalMutexCreate+0x10>)
    4070:	6802      	ldr	r2, [r0, #0]
    4072:	681b      	ldr	r3, [r3, #0]
    4074:	6810      	ldr	r0, [r2, #0]
    4076:	4798      	blx	r3
    4078:	2000      	movs	r0, #0
    407a:	bd08      	pop	{r3, pc}
    407c:	200000c0 	.word	0x200000c0

00004080 <CC_PalMutexDestroy>:
    4080:	b508      	push	{r3, lr}
    4082:	4b03      	ldr	r3, [pc, #12]	; (4090 <CC_PalMutexDestroy+0x10>)
    4084:	6802      	ldr	r2, [r0, #0]
    4086:	685b      	ldr	r3, [r3, #4]
    4088:	6810      	ldr	r0, [r2, #0]
    408a:	4798      	blx	r3
    408c:	2000      	movs	r0, #0
    408e:	bd08      	pop	{r3, pc}
    4090:	200000c0 	.word	0x200000c0

00004094 <CC_PalPowerSaveModeInit>:
    4094:	b570      	push	{r4, r5, r6, lr}
    4096:	4c09      	ldr	r4, [pc, #36]	; (40bc <CC_PalPowerSaveModeInit+0x28>)
    4098:	4d09      	ldr	r5, [pc, #36]	; (40c0 <CC_PalPowerSaveModeInit+0x2c>)
    409a:	6920      	ldr	r0, [r4, #16]
    409c:	68ab      	ldr	r3, [r5, #8]
    409e:	4798      	blx	r3
    40a0:	b118      	cbz	r0, 40aa <CC_PalPowerSaveModeInit+0x16>
    40a2:	4b08      	ldr	r3, [pc, #32]	; (40c4 <CC_PalPowerSaveModeInit+0x30>)
    40a4:	4808      	ldr	r0, [pc, #32]	; (40c8 <CC_PalPowerSaveModeInit+0x34>)
    40a6:	685b      	ldr	r3, [r3, #4]
    40a8:	4798      	blx	r3
    40aa:	4a08      	ldr	r2, [pc, #32]	; (40cc <CC_PalPowerSaveModeInit+0x38>)
    40ac:	68eb      	ldr	r3, [r5, #12]
    40ae:	6920      	ldr	r0, [r4, #16]
    40b0:	2100      	movs	r1, #0
    40b2:	6011      	str	r1, [r2, #0]
    40b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40b8:	4718      	bx	r3
    40ba:	bf00      	nop
    40bc:	200000d0 	.word	0x200000d0
    40c0:	200000c0 	.word	0x200000c0
    40c4:	200000b0 	.word	0x200000b0
    40c8:	00004e60 	.word	0x00004e60
    40cc:	200008bc 	.word	0x200008bc

000040d0 <CC_PalPowerSaveModeSelect>:
    40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d2:	4d1a      	ldr	r5, [pc, #104]	; (413c <CC_PalPowerSaveModeSelect+0x6c>)
    40d4:	4e1a      	ldr	r6, [pc, #104]	; (4140 <CC_PalPowerSaveModeSelect+0x70>)
    40d6:	4604      	mov	r4, r0
    40d8:	68b2      	ldr	r2, [r6, #8]
    40da:	6928      	ldr	r0, [r5, #16]
    40dc:	4790      	blx	r2
    40de:	b9e8      	cbnz	r0, 411c <CC_PalPowerSaveModeSelect+0x4c>
    40e0:	4f18      	ldr	r7, [pc, #96]	; (4144 <CC_PalPowerSaveModeSelect+0x74>)
    40e2:	683b      	ldr	r3, [r7, #0]
    40e4:	b14c      	cbz	r4, 40fa <CC_PalPowerSaveModeSelect+0x2a>
    40e6:	b1a3      	cbz	r3, 4112 <CC_PalPowerSaveModeSelect+0x42>
    40e8:	2b01      	cmp	r3, #1
    40ea:	d019      	beq.n	4120 <CC_PalPowerSaveModeSelect+0x50>
    40ec:	3b01      	subs	r3, #1
    40ee:	603b      	str	r3, [r7, #0]
    40f0:	6928      	ldr	r0, [r5, #16]
    40f2:	68f3      	ldr	r3, [r6, #12]
    40f4:	4798      	blx	r3
    40f6:	2000      	movs	r0, #0
    40f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40fa:	b943      	cbnz	r3, 410e <CC_PalPowerSaveModeSelect+0x3e>
    40fc:	4a12      	ldr	r2, [pc, #72]	; (4148 <CC_PalPowerSaveModeSelect+0x78>)
    40fe:	2101      	movs	r1, #1
    4100:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4104:	4911      	ldr	r1, [pc, #68]	; (414c <CC_PalPowerSaveModeSelect+0x7c>)
    4106:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    410a:	2a00      	cmp	r2, #0
    410c:	d1fb      	bne.n	4106 <CC_PalPowerSaveModeSelect+0x36>
    410e:	3301      	adds	r3, #1
    4110:	603b      	str	r3, [r7, #0]
    4112:	68f3      	ldr	r3, [r6, #12]
    4114:	6928      	ldr	r0, [r5, #16]
    4116:	4798      	blx	r3
    4118:	2000      	movs	r0, #0
    411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    411c:	480c      	ldr	r0, [pc, #48]	; (4150 <CC_PalPowerSaveModeSelect+0x80>)
    411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4120:	4a0a      	ldr	r2, [pc, #40]	; (414c <CC_PalPowerSaveModeSelect+0x7c>)
    4122:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4126:	2b00      	cmp	r3, #0
    4128:	d1fb      	bne.n	4122 <CC_PalPowerSaveModeSelect+0x52>
    412a:	4a07      	ldr	r2, [pc, #28]	; (4148 <CC_PalPowerSaveModeSelect+0x78>)
    412c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4130:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4134:	f7ff ff48 	bl	3fc8 <CC_HalMaskInterrupt>
    4138:	683b      	ldr	r3, [r7, #0]
    413a:	e7d7      	b.n	40ec <CC_PalPowerSaveModeSelect+0x1c>
    413c:	200000d0 	.word	0x200000d0
    4140:	200000c0 	.word	0x200000c0
    4144:	200008bc 	.word	0x200008bc
    4148:	5002a000 	.word	0x5002a000
    414c:	5002b000 	.word	0x5002b000
    4150:	ffff8fe9 	.word	0xffff8fe9

00004154 <disable_ds_1>:
{
    4154:	b508      	push	{r3, lr}
	pm_policy_state_lock_get(PM_STATE_SOFT_OFF, PM_ALL_SUBSTATES);
    4156:	21ff      	movs	r1, #255	; 0xff
    4158:	2006      	movs	r0, #6
    415a:	f000 f952 	bl	4402 <pm_policy_state_lock_get>
}
    415e:	2000      	movs	r0, #0
    4160:	bd08      	pop	{r3, pc}

00004162 <arch_printk_char_out>:
}
    4162:	2000      	movs	r0, #0
    4164:	4770      	bx	lr

00004166 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4166:	b40f      	push	{r0, r1, r2, r3}
    4168:	b507      	push	{r0, r1, r2, lr}
    416a:	a904      	add	r1, sp, #16
    416c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4170:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4172:	f7fc f973 	bl	45c <vprintk>

	va_end(ap);
}
    4176:	b003      	add	sp, #12
    4178:	f85d eb04 	ldr.w	lr, [sp], #4
    417c:	b004      	add	sp, #16
    417e:	4770      	bx	lr

00004180 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4180:	4604      	mov	r4, r0
    4182:	b508      	push	{r3, lr}
    4184:	4608      	mov	r0, r1
    4186:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4188:	461a      	mov	r2, r3
    418a:	47a0      	blx	r4
	return z_impl_z_current_get();
    418c:	f7ff fc30 	bl	39f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4190:	f7fd fb40 	bl	1814 <z_impl_k_thread_abort>

00004194 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4194:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4196:	f013 0307 	ands.w	r3, r3, #7
    419a:	d105      	bne.n	41a8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    419c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    419e:	2b00      	cmp	r3, #0
    41a0:	bf0c      	ite	eq
    41a2:	2000      	moveq	r0, #0
    41a4:	2003      	movne	r0, #3
    41a6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    41a8:	2b02      	cmp	r3, #2
    41aa:	d105      	bne.n	41b8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    41ac:	8b40      	ldrh	r0, [r0, #26]
    41ae:	fab0 f080 	clz	r0, r0
    41b2:	0940      	lsrs	r0, r0, #5
    41b4:	0080      	lsls	r0, r0, #2
    41b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    41b8:	2b01      	cmp	r3, #1
    41ba:	d105      	bne.n	41c8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    41bc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    41be:	2b00      	cmp	r3, #0
    41c0:	bf0c      	ite	eq
    41c2:	2000      	moveq	r0, #0
    41c4:	2005      	movne	r0, #5
    41c6:	4770      	bx	lr
	int evt = EVT_NOP;
    41c8:	2000      	movs	r0, #0
}
    41ca:	4770      	bx	lr

000041cc <validate_args>:
{
    41cc:	b510      	push	{r4, lr}
    41ce:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    41d0:	b100      	cbz	r0, 41d4 <validate_args+0x8>
    41d2:	b911      	cbnz	r1, 41da <validate_args+0xe>
		return -EINVAL;
    41d4:	f06f 0015 	mvn.w	r0, #21
}
    41d8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    41da:	1d08      	adds	r0, r1, #4
    41dc:	f000 f895 	bl	430a <sys_notify_validate>
	if ((rv == 0)
    41e0:	2800      	cmp	r0, #0
    41e2:	d1f9      	bne.n	41d8 <validate_args+0xc>
	    && ((cli->notify.flags
    41e4:	68a3      	ldr	r3, [r4, #8]
    41e6:	2b03      	cmp	r3, #3
    41e8:	d9f6      	bls.n	41d8 <validate_args+0xc>
    41ea:	e7f3      	b.n	41d4 <validate_args+0x8>

000041ec <notify_one>:
{
    41ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41f0:	460d      	mov	r5, r1
    41f2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    41f4:	4619      	mov	r1, r3
    41f6:	1d28      	adds	r0, r5, #4
{
    41f8:	4690      	mov	r8, r2
    41fa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    41fc:	f000 f896 	bl	432c <sys_notify_finalize>
	if (cb) {
    4200:	4604      	mov	r4, r0
    4202:	b138      	cbz	r0, 4214 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4204:	4633      	mov	r3, r6
    4206:	4642      	mov	r2, r8
    4208:	4629      	mov	r1, r5
    420a:	4638      	mov	r0, r7
    420c:	46a4      	mov	ip, r4
}
    420e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4212:	4760      	bx	ip
}
    4214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004218 <transition_complete>:
{
    4218:	b410      	push	{r4}
	__asm__ volatile(
    421a:	f04f 0420 	mov.w	r4, #32
    421e:	f3ef 8211 	mrs	r2, BASEPRI
    4222:	f384 8812 	msr	BASEPRI_MAX, r4
    4226:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    422a:	6141      	str	r1, [r0, #20]
}
    422c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    422e:	2101      	movs	r1, #1
    4230:	f7fc b922 	b.w	478 <process_event>

00004234 <onoff_manager_init>:
{
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4238:	4605      	mov	r5, r0
    423a:	b158      	cbz	r0, 4254 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    423c:	b151      	cbz	r1, 4254 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    423e:	680b      	ldr	r3, [r1, #0]
    4240:	b143      	cbz	r3, 4254 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4242:	684b      	ldr	r3, [r1, #4]
    4244:	b133      	cbz	r3, 4254 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4246:	221c      	movs	r2, #28
    4248:	2100      	movs	r1, #0
    424a:	f000 f90b 	bl	4464 <memset>
    424e:	612c      	str	r4, [r5, #16]
	return 0;
    4250:	2000      	movs	r0, #0
}
    4252:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4254:	f06f 0015 	mvn.w	r0, #21
    4258:	e7fb      	b.n	4252 <onoff_manager_init+0x1e>

0000425a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    425a:	b570      	push	{r4, r5, r6, lr}
    425c:	4605      	mov	r5, r0
    425e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4260:	f7ff ffb4 	bl	41cc <validate_args>

	if (rv < 0) {
    4264:	1e04      	subs	r4, r0, #0
    4266:	db15      	blt.n	4294 <onoff_request+0x3a>
    4268:	f04f 0320 	mov.w	r3, #32
    426c:	f3ef 8211 	mrs	r2, BASEPRI
    4270:	f383 8812 	msr	BASEPRI_MAX, r3
    4274:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4278:	8b6b      	ldrh	r3, [r5, #26]
    427a:	8b2c      	ldrh	r4, [r5, #24]
    427c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4280:	428b      	cmp	r3, r1
    4282:	f004 0407 	and.w	r4, r4, #7
    4286:	d107      	bne.n	4298 <onoff_request+0x3e>
	__asm__ volatile(
    4288:	f382 8811 	msr	BASEPRI, r2
    428c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    4290:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4294:	4620      	mov	r0, r4
    4296:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4298:	2c02      	cmp	r4, #2
    429a:	d10c      	bne.n	42b6 <onoff_request+0x5c>
		mgr->refs += 1U;
    429c:	3301      	adds	r3, #1
    429e:	836b      	strh	r3, [r5, #26]
    42a0:	f382 8811 	msr	BASEPRI, r2
    42a4:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    42a8:	2300      	movs	r3, #0
    42aa:	4622      	mov	r2, r4
    42ac:	4631      	mov	r1, r6
    42ae:	4628      	mov	r0, r5
    42b0:	f7ff ff9c 	bl	41ec <notify_one>
    42b4:	e7ee      	b.n	4294 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    42b6:	2c06      	cmp	r4, #6
    42b8:	d814      	bhi.n	42e4 <onoff_request+0x8a>
    42ba:	e8df f004 	tbb	[pc, r4]
    42be:	1304      	.short	0x1304
    42c0:	1a041313 	.word	0x1a041313
    42c4:	04          	.byte	0x04
    42c5:	00          	.byte	0x00
	parent->next = child;
    42c6:	2300      	movs	r3, #0
    42c8:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    42ca:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    42cc:	b93b      	cbnz	r3, 42de <onoff_request+0x84>
	list->head = node;
    42ce:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    42d2:	b9ac      	cbnz	r4, 4300 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    42d4:	2102      	movs	r1, #2
    42d6:	4628      	mov	r0, r5
    42d8:	f7fc f8ce 	bl	478 <process_event>
    42dc:	e7da      	b.n	4294 <onoff_request+0x3a>
	parent->next = child;
    42de:	601e      	str	r6, [r3, #0]
	list->tail = node;
    42e0:	606e      	str	r6, [r5, #4]
}
    42e2:	e7f6      	b.n	42d2 <onoff_request+0x78>
    42e4:	f382 8811 	msr	BASEPRI, r2
    42e8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    42ec:	f06f 0404 	mvn.w	r4, #4
    42f0:	e7d0      	b.n	4294 <onoff_request+0x3a>
    42f2:	f382 8811 	msr	BASEPRI, r2
    42f6:	f3bf 8f6f 	isb	sy
    42fa:	f06f 0485 	mvn.w	r4, #133	; 0x85
    42fe:	e7c9      	b.n	4294 <onoff_request+0x3a>
    4300:	f382 8811 	msr	BASEPRI, r2
    4304:	f3bf 8f6f 	isb	sy
		if (notify) {
    4308:	e7c4      	b.n	4294 <onoff_request+0x3a>

0000430a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    430a:	4603      	mov	r3, r0
    430c:	b158      	cbz	r0, 4326 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    430e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4310:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4314:	2a01      	cmp	r2, #1
    4316:	d003      	beq.n	4320 <sys_notify_validate+0x16>
    4318:	2a03      	cmp	r2, #3
    431a:	d104      	bne.n	4326 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    431c:	6802      	ldr	r2, [r0, #0]
    431e:	b112      	cbz	r2, 4326 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4320:	2000      	movs	r0, #0
    4322:	6098      	str	r0, [r3, #8]
    4324:	4770      	bx	lr
    4326:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    432a:	4770      	bx	lr

0000432c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    432c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    432e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4330:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4334:	2a03      	cmp	r2, #3
    4336:	f04f 0200 	mov.w	r2, #0
{
    433a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    433c:	bf0c      	ite	eq
    433e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    4340:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4342:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4344:	4770      	bx	lr

00004346 <encode_uint>:
{
    4346:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    434a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    434c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    434e:	2b6f      	cmp	r3, #111	; 0x6f
{
    4350:	4680      	mov	r8, r0
    4352:	460f      	mov	r7, r1
    4354:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4356:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    435a:	d029      	beq.n	43b0 <encode_uint+0x6a>
    435c:	d824      	bhi.n	43a8 <encode_uint+0x62>
		return 10;
    435e:	2b58      	cmp	r3, #88	; 0x58
    4360:	bf0c      	ite	eq
    4362:	2610      	moveq	r6, #16
    4364:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4366:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    436a:	4632      	mov	r2, r6
    436c:	2300      	movs	r3, #0
    436e:	4640      	mov	r0, r8
    4370:	4639      	mov	r1, r7
    4372:	f7fb fec5 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4376:	2a09      	cmp	r2, #9
    4378:	b2d4      	uxtb	r4, r2
    437a:	d81e      	bhi.n	43ba <encode_uint+0x74>
    437c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    437e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4380:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4382:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4386:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    438a:	d301      	bcc.n	4390 <encode_uint+0x4a>
    438c:	45d1      	cmp	r9, sl
    438e:	d811      	bhi.n	43b4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4390:	782b      	ldrb	r3, [r5, #0]
    4392:	069b      	lsls	r3, r3, #26
    4394:	d505      	bpl.n	43a2 <encode_uint+0x5c>
		if (radix == 8) {
    4396:	2e08      	cmp	r6, #8
    4398:	d115      	bne.n	43c6 <encode_uint+0x80>
			conv->altform_0 = true;
    439a:	78ab      	ldrb	r3, [r5, #2]
    439c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    43a0:	70ab      	strb	r3, [r5, #2]
}
    43a2:	4648      	mov	r0, r9
    43a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    43a8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    43ac:	2b70      	cmp	r3, #112	; 0x70
    43ae:	e7d7      	b.n	4360 <encode_uint+0x1a>
	switch (specifier) {
    43b0:	2608      	movs	r6, #8
    43b2:	e7d8      	b.n	4366 <encode_uint+0x20>
		value /= radix;
    43b4:	4680      	mov	r8, r0
    43b6:	460f      	mov	r7, r1
    43b8:	e7d7      	b.n	436a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    43ba:	f1bb 0f19 	cmp.w	fp, #25
    43be:	bf94      	ite	ls
    43c0:	3437      	addls	r4, #55	; 0x37
    43c2:	3457      	addhi	r4, #87	; 0x57
    43c4:	e7db      	b.n	437e <encode_uint+0x38>
		} else if (radix == 16) {
    43c6:	2e10      	cmp	r6, #16
    43c8:	d1eb      	bne.n	43a2 <encode_uint+0x5c>
			conv->altform_0c = true;
    43ca:	78ab      	ldrb	r3, [r5, #2]
    43cc:	f043 0310 	orr.w	r3, r3, #16
    43d0:	e7e6      	b.n	43a0 <encode_uint+0x5a>

000043d2 <outs>:
{
    43d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43d6:	4607      	mov	r7, r0
    43d8:	4688      	mov	r8, r1
    43da:	4615      	mov	r5, r2
    43dc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    43de:	4614      	mov	r4, r2
    43e0:	42b4      	cmp	r4, r6
    43e2:	d305      	bcc.n	43f0 <outs+0x1e>
    43e4:	b10e      	cbz	r6, 43ea <outs+0x18>
	return (int)count;
    43e6:	1b60      	subs	r0, r4, r5
    43e8:	e008      	b.n	43fc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    43ea:	7823      	ldrb	r3, [r4, #0]
    43ec:	2b00      	cmp	r3, #0
    43ee:	d0fa      	beq.n	43e6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    43f0:	f814 0b01 	ldrb.w	r0, [r4], #1
    43f4:	4641      	mov	r1, r8
    43f6:	47b8      	blx	r7
		if (rc < 0) {
    43f8:	2800      	cmp	r0, #0
    43fa:	daf1      	bge.n	43e0 <outs+0xe>
}
    43fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004400 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4400:	4770      	bx	lr

00004402 <pm_policy_state_lock_get>:
		   (substate_lock_t[i].substate_id == substate_id ||
		    substate_id == PM_ALL_SUBSTATES)) {
			atomic_inc(&substate_lock_t[i].lock);
		}
	}
}
    4402:	4770      	bx	lr

00004404 <abort_function>:
{
    4404:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4406:	2000      	movs	r0, #0
    4408:	f7fc fcf6 	bl	df8 <sys_reboot>

0000440c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    440c:	f000 b9ed 	b.w	47ea <z_fatal_error>

00004410 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4410:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4412:	6800      	ldr	r0, [r0, #0]
    4414:	f000 b9e9 	b.w	47ea <z_fatal_error>

00004418 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4418:	2100      	movs	r1, #0
    441a:	2001      	movs	r0, #1
    441c:	f7ff bff6 	b.w	440c <z_arm_fatal_error>

00004420 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4420:	b508      	push	{r3, lr}
	handler();
    4422:	f7fc ff8d 	bl	1340 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    442a:	f7fd b865 	b.w	14f8 <z_arm_exc_exit>

0000442e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    442e:	4603      	mov	r3, r0
	size_t n = 0;
    4430:	2000      	movs	r0, #0

	while (*s != '\0') {
    4432:	5c1a      	ldrb	r2, [r3, r0]
    4434:	b902      	cbnz	r2, 4438 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4436:	4770      	bx	lr
		n++;
    4438:	3001      	adds	r0, #1
    443a:	e7fa      	b.n	4432 <strlen+0x4>

0000443c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    443c:	4603      	mov	r3, r0
	size_t n = 0;
    443e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4440:	5c1a      	ldrb	r2, [r3, r0]
    4442:	b10a      	cbz	r2, 4448 <strnlen+0xc>
    4444:	4288      	cmp	r0, r1
    4446:	d100      	bne.n	444a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4448:	4770      	bx	lr
		n++;
    444a:	3001      	adds	r0, #1
    444c:	e7f8      	b.n	4440 <strnlen+0x4>

0000444e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    444e:	b510      	push	{r4, lr}
    4450:	1e43      	subs	r3, r0, #1
    4452:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4454:	4291      	cmp	r1, r2
    4456:	d100      	bne.n	445a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4458:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    445a:	f811 4b01 	ldrb.w	r4, [r1], #1
    445e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4462:	e7f7      	b.n	4454 <memcpy+0x6>

00004464 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4464:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4466:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4468:	4603      	mov	r3, r0
	while (n > 0) {
    446a:	4293      	cmp	r3, r2
    446c:	d100      	bne.n	4470 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    446e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4470:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4474:	e7f9      	b.n	446a <memset+0x6>

00004476 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4476:	2806      	cmp	r0, #6
    4478:	d108      	bne.n	448c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    447a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    447e:	2201      	movs	r2, #1
    4480:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4484:	f3bf 8f4f 	dsb	sy
        __WFE();
    4488:	bf20      	wfe
    while (true)
    448a:	e7fd      	b.n	4488 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    448c:	4770      	bx	lr

0000448e <pm_state_exit_post_ops>:
    448e:	2300      	movs	r3, #0
    4490:	f383 8811 	msr	BASEPRI, r3
    4494:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4498:	4770      	bx	lr

0000449a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    449a:	6903      	ldr	r3, [r0, #16]
    449c:	b2c9      	uxtb	r1, r1
    449e:	220c      	movs	r2, #12
    44a0:	fb01 3302 	mla	r3, r1, r2, r3
    44a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    44a6:	f000 0007 	and.w	r0, r0, #7
    44aa:	4770      	bx	lr

000044ac <set_on_state>:
	__asm__ volatile(
    44ac:	f04f 0320 	mov.w	r3, #32
    44b0:	f3ef 8211 	mrs	r2, BASEPRI
    44b4:	f383 8812 	msr	BASEPRI_MAX, r3
    44b8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    44bc:	6803      	ldr	r3, [r0, #0]
    44be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    44c2:	f043 0302 	orr.w	r3, r3, #2
    44c6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    44c8:	f382 8811 	msr	BASEPRI, r2
    44cc:	f3bf 8f6f 	isb	sy
}
    44d0:	4770      	bx	lr

000044d2 <stop>:
{
    44d2:	b570      	push	{r4, r5, r6, lr}
    44d4:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    44d6:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    44d8:	f04f 0420 	mov.w	r4, #32
    44dc:	f3ef 8511 	mrs	r5, BASEPRI
    44e0:	f384 8812 	msr	BASEPRI_MAX, r4
    44e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    44e8:	260c      	movs	r6, #12
    44ea:	fb06 3401 	mla	r4, r6, r1, r3
    44ee:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    44f0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    44f4:	d008      	beq.n	4508 <stop+0x36>
    44f6:	42a2      	cmp	r2, r4
    44f8:	d006      	beq.n	4508 <stop+0x36>
	__asm__ volatile(
    44fa:	f385 8811 	msr	BASEPRI, r5
    44fe:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4502:	f04f 30ff 	mov.w	r0, #4294967295
}
    4506:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4508:	fb06 3301 	mla	r3, r6, r1, r3
    450c:	2201      	movs	r2, #1
    450e:	641a      	str	r2, [r3, #64]	; 0x40
    4510:	f385 8811 	msr	BASEPRI, r5
    4514:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4518:	6843      	ldr	r3, [r0, #4]
    451a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    451e:	685b      	ldr	r3, [r3, #4]
    4520:	4798      	blx	r3
	return 0;
    4522:	2000      	movs	r0, #0
    4524:	e7ef      	b.n	4506 <stop+0x34>

00004526 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4526:	2280      	movs	r2, #128	; 0x80
    4528:	f7ff bfd3 	b.w	44d2 <stop>

0000452c <async_start>:
{
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4530:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4532:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4534:	f04f 0520 	mov.w	r5, #32
    4538:	f3ef 8611 	mrs	r6, BASEPRI
    453c:	f385 8812 	msr	BASEPRI_MAX, r5
    4540:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4544:	250c      	movs	r5, #12
    4546:	fb05 4401 	mla	r4, r5, r1, r4
    454a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    454c:	f005 0c07 	and.w	ip, r5, #7
    4550:	f1bc 0f01 	cmp.w	ip, #1
    4554:	d10c      	bne.n	4570 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4556:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    4558:	f386 8811 	msr	BASEPRI, r6
    455c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4560:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4564:	6843      	ldr	r3, [r0, #4]
    4566:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    456a:	4798      	blx	r3
	return 0;
    456c:	2000      	movs	r0, #0
}
    456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4570:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4574:	42af      	cmp	r7, r5
    4576:	f386 8811 	msr	BASEPRI, r6
    457a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    457e:	bf0c      	ite	eq
    4580:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4584:	f04f 30ff 	movne.w	r0, #4294967295
    4588:	e7f1      	b.n	456e <async_start+0x42>

0000458a <api_start>:
{
    458a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    458c:	2480      	movs	r4, #128	; 0x80
    458e:	9400      	str	r4, [sp, #0]
    4590:	f7ff ffcc 	bl	452c <async_start>
}
    4594:	b002      	add	sp, #8
    4596:	bd10      	pop	{r4, pc}

00004598 <onoff_started_callback>:
{
    4598:	b410      	push	{r4}
	return &data->mgr[type];
    459a:	6900      	ldr	r0, [r0, #16]
    459c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    459e:	241c      	movs	r4, #28
    45a0:	fb03 0004 	mla	r0, r3, r4, r0
    45a4:	2100      	movs	r1, #0
}
    45a6:	bc10      	pop	{r4}
	notify(mgr, 0);
    45a8:	4710      	bx	r2

000045aa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    45aa:	2000      	movs	r0, #0
    45ac:	f000 b87b 	b.w	46a6 <nrfx_clock_start>

000045b0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    45b0:	2000      	movs	r0, #0
    45b2:	f000 b8b4 	b.w	471e <nrfx_clock_stop>

000045b6 <blocking_start_callback>:
{
    45b6:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    45b8:	f7fe bef0 	b.w	339c <z_impl_k_sem_give>

000045bc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    45bc:	6843      	ldr	r3, [r0, #4]
    45be:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    45c0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    45c4:	600b      	str	r3, [r1, #0]
}
    45c6:	2000      	movs	r0, #0
    45c8:	4770      	bx	lr

000045ca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    45ca:	6843      	ldr	r3, [r0, #4]
    45cc:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    45ce:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    45d2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    45d6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    45da:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    45de:	2000      	movs	r0, #0
    45e0:	4770      	bx	lr

000045e2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    45e2:	6843      	ldr	r3, [r0, #4]
    45e4:	685b      	ldr	r3, [r3, #4]
}
    45e6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    45e8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    45ec:	4770      	bx	lr

000045ee <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    45ee:	6843      	ldr	r3, [r0, #4]
    45f0:	685b      	ldr	r3, [r3, #4]
}
    45f2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    45f4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    45f8:	4770      	bx	lr

000045fa <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    45fa:	6843      	ldr	r3, [r0, #4]
    45fc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    45fe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4602:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4606:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4608:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    460c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4610:	2000      	movs	r0, #0
    4612:	4770      	bx	lr

00004614 <gpio_nrfx_manage_callback>:
{
    4614:	b510      	push	{r4, lr}
	return port->data;
    4616:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4618:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    461a:	b1f8      	cbz	r0, 465c <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    461c:	4288      	cmp	r0, r1
    461e:	d119      	bne.n	4654 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4620:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4622:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4624:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4626:	42a1      	cmp	r1, r4
    4628:	d100      	bne.n	462c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    462a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    462c:	2000      	movs	r0, #0
    462e:	6008      	str	r0, [r1, #0]
	if (set) {
    4630:	b12a      	cbz	r2, 463e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4632:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4634:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4636:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4638:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    463a:	b902      	cbnz	r2, 463e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    463c:	6099      	str	r1, [r3, #8]
	return 0;
    463e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4640:	e010      	b.n	4664 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4642:	4281      	cmp	r1, r0
    4644:	d106      	bne.n	4654 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4646:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4648:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    464a:	6898      	ldr	r0, [r3, #8]
    464c:	4281      	cmp	r1, r0
    464e:	d1ed      	bne.n	462c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4650:	609c      	str	r4, [r3, #8]
}
    4652:	e7eb      	b.n	462c <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4654:	4604      	mov	r4, r0
    4656:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4658:	2800      	cmp	r0, #0
    465a:	d1f2      	bne.n	4642 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    465c:	2a00      	cmp	r2, #0
    465e:	d1e8      	bne.n	4632 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4660:	f06f 0015 	mvn.w	r0, #21
}
    4664:	bd10      	pop	{r4, pc}

00004666 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4666:	4770      	bx	lr

00004668 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4668:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    466a:	2000      	movs	r0, #0
    466c:	f7fd f9e0 	bl	1a30 <sys_arch_reboot>

00004670 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4670:	f7ff bb84 	b.w	3d7c <nrf_cc3xx_platform_init_no_rng>

00004674 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    4674:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4676:	f7fc fd25 	bl	10c4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    467a:	f7fc fdf9 	bl	1270 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    467e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4682:	f7ff bb7b 	b.w	3d7c <nrf_cc3xx_platform_init_no_rng>

00004686 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4686:	4700      	bx	r0

00004688 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4688:	f000 ba1b 	b.w	4ac2 <z_impl_k_busy_wait>

0000468c <nrfx_clock_enable>:
{
    468c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    468e:	2000      	movs	r0, #0
    4690:	f7fc fe30 	bl	12f4 <arch_irq_is_enabled>
    4694:	b908      	cbnz	r0, 469a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4696:	f7fc fe1f 	bl	12d8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    469a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    469e:	2200      	movs	r2, #0
    46a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    46a4:	bd08      	pop	{r3, pc}

000046a6 <nrfx_clock_start>:
{
    46a6:	b508      	push	{r3, lr}
    switch (domain)
    46a8:	b110      	cbz	r0, 46b0 <nrfx_clock_start+0xa>
    46aa:	2801      	cmp	r0, #1
    46ac:	d02c      	beq.n	4708 <nrfx_clock_start+0x62>
}
    46ae:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    46b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    46b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46b8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    46bc:	03c8      	lsls	r0, r1, #15
    46be:	d40b      	bmi.n	46d8 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    46c0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    46c4:	07d9      	lsls	r1, r3, #31
    46c6:	d50f      	bpl.n	46e8 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    46c8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    46cc:	079b      	lsls	r3, r3, #30
    46ce:	d408      	bmi.n	46e2 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    46d0:	2302      	movs	r3, #2
    46d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    46d6:	e7ea      	b.n	46ae <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    46d8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    46dc:	2b01      	cmp	r3, #1
    46de:	d004      	beq.n	46ea <nrfx_clock_start+0x44>
    46e0:	b113      	cbz	r3, 46e8 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    46e2:	2000      	movs	r0, #0
    46e4:	f7fd ffbc 	bl	2660 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    46e8:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    46ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    46ee:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46f2:	2300      	movs	r3, #0
    46f4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    46f8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    46fc:	2302      	movs	r3, #2
    46fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4702:	2301      	movs	r3, #1
    4704:	6093      	str	r3, [r2, #8]
}
    4706:	e7d2      	b.n	46ae <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    470c:	2200      	movs	r2, #0
    470e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4712:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4716:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    471a:	6018      	str	r0, [r3, #0]
}
    471c:	e7c7      	b.n	46ae <nrfx_clock_start+0x8>

0000471e <nrfx_clock_stop>:
    clock_stop(domain);
    471e:	f7fd bf9f 	b.w	2660 <clock_stop>

00004722 <nrf_gpio_reconfigure>:
{
    4722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4724:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4726:	a801      	add	r0, sp, #4
{
    4728:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    472c:	4616      	mov	r6, r2
    472e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4730:	f7fe f83e 	bl	27b0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4734:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4736:	f1b6 0c00 	subs.w	ip, r6, #0
    473a:	bf18      	it	ne
    473c:	f04f 0c01 	movne.w	ip, #1
    4740:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4744:	1e0b      	subs	r3, r1, #0
    4746:	bf18      	it	ne
    4748:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    474a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    474c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4750:	bf14      	ite	ne
    4752:	f04f 0c0c 	movne.w	ip, #12
    4756:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    475a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    475c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4760:	bf14      	ite	ne
    4762:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    4766:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    476a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    476c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4770:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4774:	bf14      	ite	ne
    4776:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    477a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    477e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4782:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4786:	b101      	cbz	r1, 478a <nrf_gpio_reconfigure+0x68>
    4788:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    478a:	b10e      	cbz	r6, 4790 <nrf_gpio_reconfigure+0x6e>
    478c:	7836      	ldrb	r6, [r6, #0]
    478e:	0076      	lsls	r6, r6, #1
    4790:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4792:	b10d      	cbz	r5, 4798 <nrf_gpio_reconfigure+0x76>
    4794:	782d      	ldrb	r5, [r5, #0]
    4796:	00ad      	lsls	r5, r5, #2
    4798:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    479a:	b10c      	cbz	r4, 47a0 <nrf_gpio_reconfigure+0x7e>
    479c:	7824      	ldrb	r4, [r4, #0]
    479e:	0224      	lsls	r4, r4, #8
    47a0:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    47a2:	b10f      	cbz	r7, 47a8 <nrf_gpio_reconfigure+0x86>
    47a4:	783f      	ldrb	r7, [r7, #0]
    47a6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    47a8:	430c      	orrs	r4, r1
    47aa:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    47ac:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    47b0:	b003      	add	sp, #12
    47b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000047b4 <nrf_gpio_cfg_sense_set>:
{
    47b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    47b6:	f10d 030f 	add.w	r3, sp, #15
    47ba:	9301      	str	r3, [sp, #4]
    47bc:	2300      	movs	r3, #0
{
    47be:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    47c2:	9300      	str	r3, [sp, #0]
    47c4:	461a      	mov	r2, r3
    47c6:	4619      	mov	r1, r3
    47c8:	f7ff ffab 	bl	4722 <nrf_gpio_reconfigure>
}
    47cc:	b005      	add	sp, #20
    47ce:	f85d fb04 	ldr.w	pc, [sp], #4

000047d2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    47d2:	4770      	bx	lr

000047d4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    47d4:	b140      	cbz	r0, 47e8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    47d6:	68c3      	ldr	r3, [r0, #12]
    47d8:	7858      	ldrb	r0, [r3, #1]
    47da:	f010 0001 	ands.w	r0, r0, #1
    47de:	bf1e      	ittt	ne
    47e0:	7818      	ldrbne	r0, [r3, #0]
    47e2:	fab0 f080 	clzne	r0, r0
    47e6:	0940      	lsrne	r0, r0, #5
}
    47e8:	4770      	bx	lr

000047ea <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    47ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ec:	4605      	mov	r5, r0
    47ee:	460e      	mov	r6, r1
	__asm__ volatile(
    47f0:	f04f 0320 	mov.w	r3, #32
    47f4:	f3ef 8711 	mrs	r7, BASEPRI
    47f8:	f383 8812 	msr	BASEPRI_MAX, r3
    47fc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4800:	f7ff f8f6 	bl	39f0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4804:	4631      	mov	r1, r6
    4806:	4604      	mov	r4, r0
    4808:	4628      	mov	r0, r5
    480a:	f7ff ff2d 	bl	4668 <k_sys_fatal_error_handler>
	__asm__ volatile(
    480e:	f387 8811 	msr	BASEPRI, r7
    4812:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4816:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    481c:	f7fc bffa 	b.w	1814 <z_impl_k_thread_abort>

00004820 <z_early_memset>:
	(void) memset(dst, c, n);
    4820:	f7ff be20 	b.w	4464 <memset>

00004824 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4824:	f7ff be13 	b.w	444e <memcpy>

00004828 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4828:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    482c:	4313      	orrs	r3, r2
    482e:	f013 0303 	ands.w	r3, r3, #3
    4832:	d10c      	bne.n	484e <create_free_list+0x26>
	slab->free_list = NULL;
    4834:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4836:	6881      	ldr	r1, [r0, #8]
    4838:	4299      	cmp	r1, r3
    483a:	d801      	bhi.n	4840 <create_free_list+0x18>
	return 0;
    483c:	2000      	movs	r0, #0
    483e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    4840:	6941      	ldr	r1, [r0, #20]
    4842:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    4844:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    4846:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4848:	3301      	adds	r3, #1
		p += slab->block_size;
    484a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    484c:	e7f3      	b.n	4836 <create_free_list+0xe>
		return -EINVAL;
    484e:	f06f 0015 	mvn.w	r0, #21
}
    4852:	4770      	bx	lr

00004854 <k_mem_slab_init>:
{
    4854:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    4856:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    485a:	2300      	movs	r3, #0
	slab->buffer = buffer;
    485c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    485e:	6183      	str	r3, [r0, #24]
{
    4860:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    4862:	f7ff ffe1 	bl	4828 <create_free_list>
	if (rc < 0) {
    4866:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    4868:	bfa8      	it	ge
    486a:	e9c4 4400 	strdge	r4, r4, [r4]
}
    486e:	bd10      	pop	{r4, pc}

00004870 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4872:	4604      	mov	r4, r0
    4874:	460d      	mov	r5, r1
	__asm__ volatile(
    4876:	f04f 0320 	mov.w	r3, #32
    487a:	f3ef 8611 	mrs	r6, BASEPRI
    487e:	f383 8812 	msr	BASEPRI_MAX, r3
    4882:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4886:	6947      	ldr	r7, [r0, #20]
    4888:	b977      	cbnz	r7, 48a8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    488a:	f000 f8a2 	bl	49d2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    488e:	b158      	cbz	r0, 48a8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4890:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4892:	6142      	str	r2, [r0, #20]
    4894:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4896:	f000 f88c 	bl	49b2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    489a:	4631      	mov	r1, r6
    489c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    48a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    48a4:	f7fe bf6a 	b.w	377c <z_reschedule>
	**(char ***) mem = slab->free_list;
    48a8:	682b      	ldr	r3, [r5, #0]
    48aa:	6962      	ldr	r2, [r4, #20]
    48ac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    48ae:	682b      	ldr	r3, [r5, #0]
    48b0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    48b2:	69a3      	ldr	r3, [r4, #24]
    48b4:	3b01      	subs	r3, #1
    48b6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    48b8:	f386 8811 	msr	BASEPRI, r6
    48bc:	f3bf 8f6f 	isb	sy
}
    48c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000048c2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    48c2:	f3ef 8005 	mrs	r0, IPSR
}
    48c6:	3800      	subs	r0, #0
    48c8:	bf18      	it	ne
    48ca:	2001      	movne	r0, #1
    48cc:	4770      	bx	lr

000048ce <z_pm_save_idle_exit>:
{
    48ce:	b508      	push	{r3, lr}
	pm_system_resume();
    48d0:	f7fc fad6 	bl	e80 <pm_system_resume>
}
    48d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    48d8:	f7ff bec5 	b.w	4666 <sys_clock_idle_exit>

000048dc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    48dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    48e0:	428b      	cmp	r3, r1
    48e2:	d001      	beq.n	48e8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    48e4:	f7fe bf04 	b.w	36f0 <z_set_prio>
}
    48e8:	2000      	movs	r0, #0
    48ea:	4770      	bx	lr

000048ec <z_impl_k_mutex_init>:
{
    48ec:	4603      	mov	r3, r0
	mutex->owner = NULL;
    48ee:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    48f0:	e9c3 0002 	strd	r0, r0, [r3, #8]
    48f4:	e9c3 3300 	strd	r3, r3, [r3]
}
    48f8:	4770      	bx	lr

000048fa <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    48fa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    48fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4900:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4902:	2300      	movs	r3, #0
	node->prev = NULL;
    4904:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4908:	4770      	bx	lr

0000490a <unpend_thread_no_timeout>:
{
    490a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    490c:	f7ff fff5 	bl	48fa <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4910:	7b43      	ldrb	r3, [r0, #13]
    4912:	f023 0302 	bic.w	r3, r3, #2
    4916:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4918:	2300      	movs	r3, #0
    491a:	6083      	str	r3, [r0, #8]
}
    491c:	bd08      	pop	{r3, pc}

0000491e <z_thread_timeout>:
{
    491e:	b510      	push	{r4, lr}
    4920:	4601      	mov	r1, r0
	__asm__ volatile(
    4922:	f04f 0320 	mov.w	r3, #32
    4926:	f3ef 8411 	mrs	r4, BASEPRI
    492a:	f383 8812 	msr	BASEPRI_MAX, r3
    492e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4932:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    4936:	f013 0f28 	tst.w	r3, #40	; 0x28
    493a:	d10d      	bne.n	4958 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    493c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4940:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4942:	b10b      	cbz	r3, 4948 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4944:	f7ff ffe1 	bl	490a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4948:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    494c:	f023 0314 	bic.w	r3, r3, #20
    4950:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4954:	f7fe fdd6 	bl	3504 <ready_thread>
	__asm__ volatile(
    4958:	f384 8811 	msr	BASEPRI, r4
    495c:	f3bf 8f6f 	isb	sy
}
    4960:	bd10      	pop	{r4, pc}

00004962 <add_to_waitq_locked>:
{
    4962:	b538      	push	{r3, r4, r5, lr}
    4964:	4604      	mov	r4, r0
    4966:	460d      	mov	r5, r1
	unready_thread(thread);
    4968:	f7fe fe00 	bl	356c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    496c:	7b63      	ldrb	r3, [r4, #13]
    496e:	f043 0302 	orr.w	r3, r3, #2
    4972:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4974:	b1e5      	cbz	r5, 49b0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4976:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    4978:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    497a:	429d      	cmp	r5, r3
    497c:	d109      	bne.n	4992 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    497e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4980:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4984:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4986:	606c      	str	r4, [r5, #4]
}
    4988:	e012      	b.n	49b0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    498a:	686a      	ldr	r2, [r5, #4]
    498c:	4293      	cmp	r3, r2
    498e:	d0f6      	beq.n	497e <add_to_waitq_locked+0x1c>
    4990:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4992:	2b00      	cmp	r3, #0
    4994:	d0f3      	beq.n	497e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4996:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    499a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    499e:	428a      	cmp	r2, r1
    49a0:	d0f3      	beq.n	498a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    49a2:	4291      	cmp	r1, r2
    49a4:	ddf1      	ble.n	498a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    49a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    49a8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    49ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    49ae:	605c      	str	r4, [r3, #4]
}
    49b0:	bd38      	pop	{r3, r4, r5, pc}

000049b2 <z_ready_thread>:
{
    49b2:	b510      	push	{r4, lr}
	__asm__ volatile(
    49b4:	f04f 0320 	mov.w	r3, #32
    49b8:	f3ef 8411 	mrs	r4, BASEPRI
    49bc:	f383 8812 	msr	BASEPRI_MAX, r3
    49c0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    49c4:	f7fe fd9e 	bl	3504 <ready_thread>
	__asm__ volatile(
    49c8:	f384 8811 	msr	BASEPRI, r4
    49cc:	f3bf 8f6f 	isb	sy
}
    49d0:	bd10      	pop	{r4, pc}

000049d2 <z_unpend_first_thread>:
{
    49d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    49d4:	f04f 0320 	mov.w	r3, #32
    49d8:	f3ef 8511 	mrs	r5, BASEPRI
    49dc:	f383 8812 	msr	BASEPRI_MAX, r3
    49e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    49e4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49e6:	42a0      	cmp	r0, r4
    49e8:	d00d      	beq.n	4a06 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    49ea:	b134      	cbz	r4, 49fa <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    49ec:	4620      	mov	r0, r4
    49ee:	f7ff ff8c 	bl	490a <unpend_thread_no_timeout>
    49f2:	f104 0018 	add.w	r0, r4, #24
    49f6:	f000 f81e 	bl	4a36 <z_abort_timeout>
	__asm__ volatile(
    49fa:	f385 8811 	msr	BASEPRI, r5
    49fe:	f3bf 8f6f 	isb	sy
}
    4a02:	4620      	mov	r0, r4
    4a04:	bd38      	pop	{r3, r4, r5, pc}
    4a06:	2400      	movs	r4, #0
    4a08:	e7f7      	b.n	49fa <z_unpend_first_thread+0x28>

00004a0a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4a0a:	4603      	mov	r3, r0
    4a0c:	b920      	cbnz	r0, 4a18 <z_reschedule_irqlock+0xe>
    4a0e:	f3ef 8205 	mrs	r2, IPSR
    4a12:	b90a      	cbnz	r2, 4a18 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4a14:	f7fc bcb4 	b.w	1380 <arch_swap>
    4a18:	f383 8811 	msr	BASEPRI, r3
    4a1c:	f3bf 8f6f 	isb	sy
}
    4a20:	4770      	bx	lr

00004a22 <z_reschedule_unlocked>:
	__asm__ volatile(
    4a22:	f04f 0320 	mov.w	r3, #32
    4a26:	f3ef 8011 	mrs	r0, BASEPRI
    4a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4a32:	f7ff bfea 	b.w	4a0a <z_reschedule_irqlock>

00004a36 <z_abort_timeout>:
{
    4a36:	b510      	push	{r4, lr}
    4a38:	f04f 0220 	mov.w	r2, #32
    4a3c:	f3ef 8411 	mrs	r4, BASEPRI
    4a40:	f382 8812 	msr	BASEPRI_MAX, r2
    4a44:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4a48:	6803      	ldr	r3, [r0, #0]
    4a4a:	b13b      	cbz	r3, 4a5c <z_abort_timeout+0x26>
			remove_timeout(to);
    4a4c:	f7ff f882 	bl	3b54 <remove_timeout>
			ret = 0;
    4a50:	2000      	movs	r0, #0
	__asm__ volatile(
    4a52:	f384 8811 	msr	BASEPRI, r4
    4a56:	f3bf 8f6f 	isb	sy
}
    4a5a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4a5c:	f06f 0015 	mvn.w	r0, #21
    4a60:	e7f7      	b.n	4a52 <z_abort_timeout+0x1c>

00004a62 <z_get_next_timeout_expiry>:
{
    4a62:	b510      	push	{r4, lr}
	__asm__ volatile(
    4a64:	f04f 0320 	mov.w	r3, #32
    4a68:	f3ef 8411 	mrs	r4, BASEPRI
    4a6c:	f383 8812 	msr	BASEPRI_MAX, r3
    4a70:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4a74:	f7ff f846 	bl	3b04 <next_timeout>
	__asm__ volatile(
    4a78:	f384 8811 	msr	BASEPRI, r4
    4a7c:	f3bf 8f6f 	isb	sy
}
    4a80:	bd10      	pop	{r4, pc}

00004a82 <z_set_timeout_expiry>:
{
    4a82:	b570      	push	{r4, r5, r6, lr}
    4a84:	4604      	mov	r4, r0
    4a86:	460d      	mov	r5, r1
	__asm__ volatile(
    4a88:	f04f 0320 	mov.w	r3, #32
    4a8c:	f3ef 8611 	mrs	r6, BASEPRI
    4a90:	f383 8812 	msr	BASEPRI_MAX, r3
    4a94:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4a98:	f7ff f834 	bl	3b04 <next_timeout>
			      || (ticks <= next_to);
    4a9c:	2801      	cmp	r0, #1
    4a9e:	dd07      	ble.n	4ab0 <z_set_timeout_expiry+0x2e>
    4aa0:	42a0      	cmp	r0, r4
    4aa2:	db05      	blt.n	4ab0 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4aa4:	42a0      	cmp	r0, r4
    4aa6:	4629      	mov	r1, r5
    4aa8:	bfa8      	it	ge
    4aaa:	4620      	movge	r0, r4
    4aac:	f7fd fc98 	bl	23e0 <sys_clock_set_timeout>
	__asm__ volatile(
    4ab0:	f386 8811 	msr	BASEPRI, r6
    4ab4:	f3bf 8f6f 	isb	sy
}
    4ab8:	bd70      	pop	{r4, r5, r6, pc}

00004aba <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4aba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4abc:	f7ff f93e 	bl	3d3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4ac0:	bd08      	pop	{r3, pc}

00004ac2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4ac2:	b108      	cbz	r0, 4ac8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4ac4:	f7fc bfca 	b.w	1a5c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4ac8:	4770      	bx	lr

00004aca <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4aca:	4770      	bx	lr
